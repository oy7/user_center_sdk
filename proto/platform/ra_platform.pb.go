// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v4.24.3
// source: ra_platform.proto

package platform

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 注意：GO 业务这边用3位
type E_Server_Type int32

const (
	E_Server_Type_SRV_INVALID E_Server_Type = 0
	// go
	E_Server_Type_SRV_GO_CLUB       E_Server_Type = 100 // 俱乐部服
	E_Server_Type_SRV_GO_AGENT      E_Server_Type = 200 // 代理商服
	E_Server_Type_SRV_GO_USER       E_Server_Type = 300 // 用户服
	E_Server_Type_SRV_GO_TRADE      E_Server_Type = 400 // 交易服
	E_Server_Type_SRV_GO_S2SPROXY   E_Server_Type = 500 // 内部数据传递代理服
	E_Server_Type_SRV_GO_ROOM       E_Server_Type = 600 // 房间服
	E_Server_Type_SRV_GO_MATCH      E_Server_Type = 700 // 大师赛服
	E_Server_Type_SRV_GO_GOLD_MATCH E_Server_Type = 800 // 咖豆赛服
	// go ...
	E_Server_Type_SRV_GATEWAY E_Server_Type = 1000 // 网关 内网端口范围[8100-8199] 外网端口范围[8000-8099]
	E_Server_Type_SRV_COMMON  E_Server_Type = 2000 // 公共业务	内网端口范围[8510-8599]
	E_Server_Type_SRV_PUSH    E_Server_Type = 3000 // 推送服
	// SRV_SETTLE 已由Go服接管				= 8000;		// 战绩服 内网端口范围[8200-8299]
	// 注意：房间服与玩法服server id 与 内网端口号port 配置一致
	E_Server_Type_SRV_ROOM_SERVER_ROUTE  E_Server_Type = 6000  // 战队房间管理服
	E_Server_Type__SRV_ROOM_SERVER_LOGIC E_Server_Type = 6001  // TAG:不要直接使用，实际使用的srv_id由go根据cid决定，范围[6000-6799]
	E_Server_Type_SRV_ROOM_SELF          E_Server_Type = 6800  // 个人房间管理服,srv_id由go根据创建者uid决定 范围[6800-6999]
	E_Server_Type__SRV_GAME_MJ_STAND     E_Server_Type = 10100 // TAG:不要直接使用，标准麻将服务器，因为是动态建立的，实际范围是[10100-11999]
	E_Server_Type__SRV_GAME_POKER        E_Server_Type = 12000 // TAG:不是直接使用，斗地主服务器，因为是动态建立的，实际范围是[12000-12999]
)

// Enum value maps for E_Server_Type.
var (
	E_Server_Type_name = map[int32]string{
		0:     "SRV_INVALID",
		100:   "SRV_GO_CLUB",
		200:   "SRV_GO_AGENT",
		300:   "SRV_GO_USER",
		400:   "SRV_GO_TRADE",
		500:   "SRV_GO_S2SPROXY",
		600:   "SRV_GO_ROOM",
		700:   "SRV_GO_MATCH",
		800:   "SRV_GO_GOLD_MATCH",
		1000:  "SRV_GATEWAY",
		2000:  "SRV_COMMON",
		3000:  "SRV_PUSH",
		6000:  "SRV_ROOM_SERVER_ROUTE",
		6001:  "_SRV_ROOM_SERVER_LOGIC",
		6800:  "SRV_ROOM_SELF",
		10100: "_SRV_GAME_MJ_STAND",
		12000: "_SRV_GAME_POKER",
	}
	E_Server_Type_value = map[string]int32{
		"SRV_INVALID":            0,
		"SRV_GO_CLUB":            100,
		"SRV_GO_AGENT":           200,
		"SRV_GO_USER":            300,
		"SRV_GO_TRADE":           400,
		"SRV_GO_S2SPROXY":        500,
		"SRV_GO_ROOM":            600,
		"SRV_GO_MATCH":           700,
		"SRV_GO_GOLD_MATCH":      800,
		"SRV_GATEWAY":            1000,
		"SRV_COMMON":             2000,
		"SRV_PUSH":               3000,
		"SRV_ROOM_SERVER_ROUTE":  6000,
		"_SRV_ROOM_SERVER_LOGIC": 6001,
		"SRV_ROOM_SELF":          6800,
		"_SRV_GAME_MJ_STAND":     10100,
		"_SRV_GAME_POKER":        12000,
	}
)

func (x E_Server_Type) Enum() *E_Server_Type {
	p := new(E_Server_Type)
	*p = x
	return p
}

func (x E_Server_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_Server_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[0].Descriptor()
}

func (E_Server_Type) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[0]
}

func (x E_Server_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_Server_Type.Descriptor instead.
func (E_Server_Type) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{0}
}

// 游戏类型ID定义
type E_GAME_TYPE int32

const (
	E_GAME_TYPE_E_GAMR_TYPE_MJ   E_GAME_TYPE = 0 // 麻将
	E_GAME_TYPE_E_GAMR_TYPE_DDZ  E_GAME_TYPE = 1 // 斗地主
	E_GAME_TYPE_E_GAMR_TYPE_PDK  E_GAME_TYPE = 2 // 跑得快
	E_GAME_TYPE_E_GAMR_TYPE_MHAB E_GAME_TYPE = 3 // 明皇暗保
)

// Enum value maps for E_GAME_TYPE.
var (
	E_GAME_TYPE_name = map[int32]string{
		0: "E_GAMR_TYPE_MJ",
		1: "E_GAMR_TYPE_DDZ",
		2: "E_GAMR_TYPE_PDK",
		3: "E_GAMR_TYPE_MHAB",
	}
	E_GAME_TYPE_value = map[string]int32{
		"E_GAMR_TYPE_MJ":   0,
		"E_GAMR_TYPE_DDZ":  1,
		"E_GAMR_TYPE_PDK":  2,
		"E_GAMR_TYPE_MHAB": 3,
	}
)

func (x E_GAME_TYPE) Enum() *E_GAME_TYPE {
	p := new(E_GAME_TYPE)
	*p = x
	return p
}

func (x E_GAME_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_GAME_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[1].Descriptor()
}

func (E_GAME_TYPE) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[1]
}

func (x E_GAME_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_GAME_TYPE.Descriptor instead.
func (E_GAME_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{1}
}

// 玩法场次ID定义（玩法类型）
type E_GAME_KIND int32

const (
	E_GAME_KIND_E_GAMR_INVALID           E_GAME_KIND = 0
	E_GAME_KIND_E_GAME_MJ_STAND          E_GAME_KIND = 1000 // 标准麻将
	E_GAME_KIND_E_GAME_MJ_FU_XIN         E_GAME_KIND = 1001 // 阜新麻将(市区场 = area_id)
	E_GAME_KIND_E_GAME_MJ_SI_CHUAN       E_GAME_KIND = 1002 // 四川麻将(xx = area_id)
	E_GAME_KIND_E_GAME_MJ_BAO_DING       E_GAME_KIND = 1003 // 保定麻将(任丘场 = area_id)
	E_GAME_KIND_E_GAME_MJ_YING_KOU       E_GAME_KIND = 1004 // 营口麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_BAI_CHENG      E_GAME_KIND = 1005 // 白城麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_CHANG_CHUN     E_GAME_KIND = 1006 // 长春麻将(长春场 = area_id)
	E_GAME_KIND_E_GAME_MJ_SHUANG_YA_SHAN E_GAME_KIND = 1007 // 双鸭山麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_MU_DAN_JIANG   E_GAME_KIND = 1008 // 牡丹江麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_PAN_JIN        E_GAME_KIND = 1009 // 盘锦麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_TIE_LING       E_GAME_KIND = 1010 // 铁岭麻将(铁岭场 = area_id)
	E_GAME_KIND_E_GAME_MJ_ZHAO_DONG      E_GAME_KIND = 1011 // 肇东麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_SONG_YUAN      E_GAME_KIND = 1012 // 松原麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_DA_QING        E_GAME_KIND = 1013 // 大庆麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_JIN_ZHOU       E_GAME_KIND = 1019 // 锦州麻将(锦州场= area_id)
	E_GAME_KIND_E_GAME_MJ_JI_XI          E_GAME_KIND = 1020 // 鸡西麻将(三家拐场 = area_id)
	E_GAME_KIND_E_GAME_MJ_TAI_LAI        E_GAME_KIND = 1021 // 泰来麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_QQHAER         E_GAME_KIND = 1022 // 齐齐哈尔麻将(齐齐哈尔场 = area_id)
	E_GAME_KIND_E_GAME_MJ_JIAO_ZUO       E_GAME_KIND = 1023 // 焦作麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_SUI_HUA        E_GAME_KIND = 1024 // 绥化麻将(带漏场= area_id)
	E_GAME_KIND_E_GAME_MJ_DIAO_BIN_SHAN  E_GAME_KIND = 1025 // 调兵山麻将(xx场= area_id)
	E_GAME_KIND_E_GAME_MJ_HEI_SHAN       E_GAME_KIND = 1026 // 黑山麻将(= area_id)
	E_GAME_KIND_E_GAME_MJ_HAI_MAN        E_GAME_KIND = 1027 // 海满麻将(海满场 = area_id)
	E_GAME_KIND_E_GAME_MJ_HU_LU_DAO      E_GAME_KIND = 1028 // 葫芦岛麻将(xx = area_id)
	E_GAME_KIND_E_GAME_MJ_HA_ER_BIN      E_GAME_KIND = 1029 // 哈尔滨麻将(xx场 = area_id)
	E_GAME_KIND_E_GAME_MJ_QI_TAI_HE      E_GAME_KIND = 1030 // 七台河麻将(带会场 = area_id)
	E_GAME_KIND_E_GAME_MJ_JIA_MU_SI      E_GAME_KIND = 1035 // 佳木斯麻将(佳木斯场 = area_id)
	E_GAME_KIND_E_GAME_MJ_KAI_YUAN       E_GAME_KIND = 1039 // 开原麻将(满天飞场 = area_id)
	E_GAME_KIND_E_GAME_MJ_XING_AN_MENG   E_GAME_KIND = 1040 // 兴安盟麻将(推倒胡场 = area_id)
	E_GAME_KIND_E_GAME_MJ_DA_LIAN        E_GAME_KIND = 1089 // 大连麻将(穷胡场 = area_id)
	// 湖北地市
	E_GAME_KIND_E_GAME_MJ_HU_BEI   E_GAME_KIND = 1200 // 襄阳麻将(通用卡五星 = area_id)
	E_GAME_KIND_E_GAME_MJ_JING_MEN E_GAME_KIND = 1201 // 荆门麻将(荆门双开 = area_id)
	// ** 新加场次往后定义**
	E_GAME_KIND_E_GAME_MJ_XXX         E_GAME_KIND = 2000 // XXX麻将(XXX场)
	E_GAME_KIND_E_GAME_MJ_HE_BEI      E_GAME_KIND = 2001 // 保定麻将(河北场)
	E_GAME_KIND_E_GAME_MJ_DA_LIAN_TDH E_GAME_KIND = 2002 // 大连麻将(推倒胡)
	E_GAME_KIND_E_GAME_MJ_DA_LIAN_HZ  E_GAME_KIND = 2003 // 大连麻将(红中)
	E_GAME_KIND_E_GAME_MJ_DA_LIAN_DW  E_GAME_KIND = 2004 // 大连麻将(大瓦推倒胡)
	E_GAME_KIND_E_GAME_MJ_KAI_YUAN_CJ E_GAME_KIND = 2005 // 开原麻将(纯夹场)
	E_GAME_KIND_E_GAME_MJ_KAI_YUAN_DS E_GAME_KIND = 2006 // 开原麻将(大神场)
	E_GAME_KIND_E_GAME_MJ_ZHANG_WU    E_GAME_KIND = 2007 // 阜新麻将(彰武场)
	E_GAME_KIND_E_GAME_MJ_MO_QI       E_GAME_KIND = 2008 // 海满麻将(莫旗场)
	// 湖北场次
	E_GAME_KIND_E_GAME_MJ_XY_KWX   E_GAME_KIND = 2009 // 襄阳麻将(襄阳卡五星)
	E_GAME_KIND_E_GAME_MJ_JM_HH    E_GAME_KIND = 2010 // 荆门麻将(荆门晃晃)
	E_GAME_KIND_E_GAME_MJ_YI_CHENG E_GAME_KIND = 2011 // 宜城卡五星
	E_GAME_KIND_E_GAME_MJ_SUI_ZHOU E_GAME_KIND = 2012 // 随州卡五星
	E_GAME_KIND_E_GAME_MJ_XIAO_GAN E_GAME_KIND = 2013 // 孝感卡五星
	E_GAME_KIND_E_GAME_MJ_SHI_YAN  E_GAME_KIND = 2014 // 十堰卡五星
	E_GAME_KIND_E_GAME_MJ_HS_HH    E_GAME_KIND = 2020 // 黄石麻将(黄石晃晃)
	E_GAME_KIND_E_GAME_MJ_HS_ES    E_GAME_KIND = 2021 // 恩施麻将(一痞二赖)
	E_GAME_KIND_E_GAME_MJ_YN_ZT    E_GAME_KIND = 2031 // 云南昭通麻将
	E_GAME_KIND_E_GAME_MJ_YN_QJ    E_GAME_KIND = 2032 // 云南曲靖麻将
	E_GAME_KIND_E_GAME_MJ_YN_WS    E_GAME_KIND = 2033 // 云南文山麻将
	E_GAME_KIND_E_GAME_MJ_YN_HH    E_GAME_KIND = 2034 // 云南红河麻将
	E_GAME_KIND_E_GAME_MJ_END      E_GAME_KIND = 7999 // 麻将定义结束
	E_GAME_KIND_E_GAME_POKER_DDZ   E_GAME_KIND = 8000 // 斗地主-经典场
	E_GAME_KIND_E_GAME_POKER_PDK   E_GAME_KIND = 8010 // 跑得快
	E_GAME_KIND_E_GAME_POKER_MHAB  E_GAME_KIND = 8020 // 明皇暗保
	E_GAME_KIND_E_GAME_POKER_END   E_GAME_KIND = 9999 // 扑克定义结束
)

// Enum value maps for E_GAME_KIND.
var (
	E_GAME_KIND_name = map[int32]string{
		0:    "E_GAMR_INVALID",
		1000: "E_GAME_MJ_STAND",
		1001: "E_GAME_MJ_FU_XIN",
		1002: "E_GAME_MJ_SI_CHUAN",
		1003: "E_GAME_MJ_BAO_DING",
		1004: "E_GAME_MJ_YING_KOU",
		1005: "E_GAME_MJ_BAI_CHENG",
		1006: "E_GAME_MJ_CHANG_CHUN",
		1007: "E_GAME_MJ_SHUANG_YA_SHAN",
		1008: "E_GAME_MJ_MU_DAN_JIANG",
		1009: "E_GAME_MJ_PAN_JIN",
		1010: "E_GAME_MJ_TIE_LING",
		1011: "E_GAME_MJ_ZHAO_DONG",
		1012: "E_GAME_MJ_SONG_YUAN",
		1013: "E_GAME_MJ_DA_QING",
		1019: "E_GAME_MJ_JIN_ZHOU",
		1020: "E_GAME_MJ_JI_XI",
		1021: "E_GAME_MJ_TAI_LAI",
		1022: "E_GAME_MJ_QQHAER",
		1023: "E_GAME_MJ_JIAO_ZUO",
		1024: "E_GAME_MJ_SUI_HUA",
		1025: "E_GAME_MJ_DIAO_BIN_SHAN",
		1026: "E_GAME_MJ_HEI_SHAN",
		1027: "E_GAME_MJ_HAI_MAN",
		1028: "E_GAME_MJ_HU_LU_DAO",
		1029: "E_GAME_MJ_HA_ER_BIN",
		1030: "E_GAME_MJ_QI_TAI_HE",
		1035: "E_GAME_MJ_JIA_MU_SI",
		1039: "E_GAME_MJ_KAI_YUAN",
		1040: "E_GAME_MJ_XING_AN_MENG",
		1089: "E_GAME_MJ_DA_LIAN",
		1200: "E_GAME_MJ_HU_BEI",
		1201: "E_GAME_MJ_JING_MEN",
		2000: "E_GAME_MJ_XXX",
		2001: "E_GAME_MJ_HE_BEI",
		2002: "E_GAME_MJ_DA_LIAN_TDH",
		2003: "E_GAME_MJ_DA_LIAN_HZ",
		2004: "E_GAME_MJ_DA_LIAN_DW",
		2005: "E_GAME_MJ_KAI_YUAN_CJ",
		2006: "E_GAME_MJ_KAI_YUAN_DS",
		2007: "E_GAME_MJ_ZHANG_WU",
		2008: "E_GAME_MJ_MO_QI",
		2009: "E_GAME_MJ_XY_KWX",
		2010: "E_GAME_MJ_JM_HH",
		2011: "E_GAME_MJ_YI_CHENG",
		2012: "E_GAME_MJ_SUI_ZHOU",
		2013: "E_GAME_MJ_XIAO_GAN",
		2014: "E_GAME_MJ_SHI_YAN",
		2020: "E_GAME_MJ_HS_HH",
		2021: "E_GAME_MJ_HS_ES",
		2031: "E_GAME_MJ_YN_ZT",
		2032: "E_GAME_MJ_YN_QJ",
		2033: "E_GAME_MJ_YN_WS",
		2034: "E_GAME_MJ_YN_HH",
		7999: "E_GAME_MJ_END",
		8000: "E_GAME_POKER_DDZ",
		8010: "E_GAME_POKER_PDK",
		8020: "E_GAME_POKER_MHAB",
		9999: "E_GAME_POKER_END",
	}
	E_GAME_KIND_value = map[string]int32{
		"E_GAMR_INVALID":           0,
		"E_GAME_MJ_STAND":          1000,
		"E_GAME_MJ_FU_XIN":         1001,
		"E_GAME_MJ_SI_CHUAN":       1002,
		"E_GAME_MJ_BAO_DING":       1003,
		"E_GAME_MJ_YING_KOU":       1004,
		"E_GAME_MJ_BAI_CHENG":      1005,
		"E_GAME_MJ_CHANG_CHUN":     1006,
		"E_GAME_MJ_SHUANG_YA_SHAN": 1007,
		"E_GAME_MJ_MU_DAN_JIANG":   1008,
		"E_GAME_MJ_PAN_JIN":        1009,
		"E_GAME_MJ_TIE_LING":       1010,
		"E_GAME_MJ_ZHAO_DONG":      1011,
		"E_GAME_MJ_SONG_YUAN":      1012,
		"E_GAME_MJ_DA_QING":        1013,
		"E_GAME_MJ_JIN_ZHOU":       1019,
		"E_GAME_MJ_JI_XI":          1020,
		"E_GAME_MJ_TAI_LAI":        1021,
		"E_GAME_MJ_QQHAER":         1022,
		"E_GAME_MJ_JIAO_ZUO":       1023,
		"E_GAME_MJ_SUI_HUA":        1024,
		"E_GAME_MJ_DIAO_BIN_SHAN":  1025,
		"E_GAME_MJ_HEI_SHAN":       1026,
		"E_GAME_MJ_HAI_MAN":        1027,
		"E_GAME_MJ_HU_LU_DAO":      1028,
		"E_GAME_MJ_HA_ER_BIN":      1029,
		"E_GAME_MJ_QI_TAI_HE":      1030,
		"E_GAME_MJ_JIA_MU_SI":      1035,
		"E_GAME_MJ_KAI_YUAN":       1039,
		"E_GAME_MJ_XING_AN_MENG":   1040,
		"E_GAME_MJ_DA_LIAN":        1089,
		"E_GAME_MJ_HU_BEI":         1200,
		"E_GAME_MJ_JING_MEN":       1201,
		"E_GAME_MJ_XXX":            2000,
		"E_GAME_MJ_HE_BEI":         2001,
		"E_GAME_MJ_DA_LIAN_TDH":    2002,
		"E_GAME_MJ_DA_LIAN_HZ":     2003,
		"E_GAME_MJ_DA_LIAN_DW":     2004,
		"E_GAME_MJ_KAI_YUAN_CJ":    2005,
		"E_GAME_MJ_KAI_YUAN_DS":    2006,
		"E_GAME_MJ_ZHANG_WU":       2007,
		"E_GAME_MJ_MO_QI":          2008,
		"E_GAME_MJ_XY_KWX":         2009,
		"E_GAME_MJ_JM_HH":          2010,
		"E_GAME_MJ_YI_CHENG":       2011,
		"E_GAME_MJ_SUI_ZHOU":       2012,
		"E_GAME_MJ_XIAO_GAN":       2013,
		"E_GAME_MJ_SHI_YAN":        2014,
		"E_GAME_MJ_HS_HH":          2020,
		"E_GAME_MJ_HS_ES":          2021,
		"E_GAME_MJ_YN_ZT":          2031,
		"E_GAME_MJ_YN_QJ":          2032,
		"E_GAME_MJ_YN_WS":          2033,
		"E_GAME_MJ_YN_HH":          2034,
		"E_GAME_MJ_END":            7999,
		"E_GAME_POKER_DDZ":         8000,
		"E_GAME_POKER_PDK":         8010,
		"E_GAME_POKER_MHAB":        8020,
		"E_GAME_POKER_END":         9999,
	}
)

func (x E_GAME_KIND) Enum() *E_GAME_KIND {
	p := new(E_GAME_KIND)
	*p = x
	return p
}

func (x E_GAME_KIND) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_GAME_KIND) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[2].Descriptor()
}

func (E_GAME_KIND) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[2]
}

func (x E_GAME_KIND) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_GAME_KIND.Descriptor instead.
func (E_GAME_KIND) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{2}
}

type E_ROOM_STATUS int32

const (
	E_ROOM_STATUS_E_WAITING E_ROOM_STATUS = 0 // 未开始
	E_ROOM_STATUS_E_GAMEING E_ROOM_STATUS = 1 // 已开始
	E_ROOM_STATUS_E_GAMEEND E_ROOM_STATUS = 2
)

// Enum value maps for E_ROOM_STATUS.
var (
	E_ROOM_STATUS_name = map[int32]string{
		0: "E_WAITING",
		1: "E_GAMEING",
		2: "E_GAMEEND",
	}
	E_ROOM_STATUS_value = map[string]int32{
		"E_WAITING": 0,
		"E_GAMEING": 1,
		"E_GAMEEND": 2,
	}
)

func (x E_ROOM_STATUS) Enum() *E_ROOM_STATUS {
	p := new(E_ROOM_STATUS)
	*p = x
	return p
}

func (x E_ROOM_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_ROOM_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[3].Descriptor()
}

func (E_ROOM_STATUS) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[3]
}

func (x E_ROOM_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_ROOM_STATUS.Descriptor instead.
func (E_ROOM_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{3}
}

type CLUB_ROOM_TYPE int32

const (
	CLUB_ROOM_TYPE_CRT_CLUB_ROOM     CLUB_ROOM_TYPE = 0 // 俱乐部玩家开房
	CLUB_ROOM_TYPE_CRT_AGENT_ROOM    CLUB_ROOM_TYPE = 1 // 代理商后台开房
	CLUB_ROOM_TYPE_CRT_CLUB_AUTO_TOP CLUB_ROOM_TYPE = 3 // 俱乐部自动开房置顶
	CLUB_ROOM_TYPE_CRT_PLAYER_ROOM   CLUB_ROOM_TYPE = 5 // 客户端开房
	CLUB_ROOM_TYPE_CRT_MATCH_ROOM    CLUB_ROOM_TYPE = 6 // 比赛房间
)

// Enum value maps for CLUB_ROOM_TYPE.
var (
	CLUB_ROOM_TYPE_name = map[int32]string{
		0: "CRT_CLUB_ROOM",
		1: "CRT_AGENT_ROOM",
		3: "CRT_CLUB_AUTO_TOP",
		5: "CRT_PLAYER_ROOM",
		6: "CRT_MATCH_ROOM",
	}
	CLUB_ROOM_TYPE_value = map[string]int32{
		"CRT_CLUB_ROOM":     0,
		"CRT_AGENT_ROOM":    1,
		"CRT_CLUB_AUTO_TOP": 3,
		"CRT_PLAYER_ROOM":   5,
		"CRT_MATCH_ROOM":    6,
	}
)

func (x CLUB_ROOM_TYPE) Enum() *CLUB_ROOM_TYPE {
	p := new(CLUB_ROOM_TYPE)
	*p = x
	return p
}

func (x CLUB_ROOM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CLUB_ROOM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[4].Descriptor()
}

func (CLUB_ROOM_TYPE) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[4]
}

func (x CLUB_ROOM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CLUB_ROOM_TYPE.Descriptor instead.
func (CLUB_ROOM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{4}
}

type E_DISMISS_ROOM_TYPE int32

const (
	E_DISMISS_ROOM_TYPE_DRT_DEFAULT         E_DISMISS_ROOM_TYPE = 0  // 默认初始值（房间正常结束或未解散）
	E_DISMISS_ROOM_TYPE_DRT_ADMIN           E_DISMISS_ROOM_TYPE = 1  // 管理员解散
	E_DISMISS_ROOM_TYPE_DRT_GAME_OVER       E_DISMISS_ROOM_TYPE = 2  // 游戏正常结束解散
	E_DISMISS_ROOM_TYPE_DRT_HOST_OP         E_DISMISS_ROOM_TYPE = 3  // 房主解散
	E_DISMISS_ROOM_TYPE_DRT_VOTE            E_DISMISS_ROOM_TYPE = 4  // 玩家投票解散
	E_DISMISS_ROOM_TYPE_DRT_TIME_OUT        E_DISMISS_ROOM_TYPE = 5  // 超时无操作解散
	E_DISMISS_ROOM_TYPE_DRT_AGENT_OP        E_DISMISS_ROOM_TYPE = 6  // 代理商操作解散
	E_DISMISS_ROOM_TYPE_DRT_TY_TIME_OUT     E_DISMISS_ROOM_TYPE = 7  // 单次拖延解散
	E_DISMISS_ROOM_TYPE_DRT_LJTY_TIME_OUT   E_DISMISS_ROOM_TYPE = 8  // 累计拖延解散
	E_DISMISS_ROOM_TYPE_DRT_OFFLINE_TIMEOUT E_DISMISS_ROOM_TYPE = 9  // 开局玩家离线超时
	E_DISMISS_ROOM_TYPE_DRT_DEPOSIT_OUT     E_DISMISS_ROOM_TYPE = 10 // 托管解散
)

// Enum value maps for E_DISMISS_ROOM_TYPE.
var (
	E_DISMISS_ROOM_TYPE_name = map[int32]string{
		0:  "DRT_DEFAULT",
		1:  "DRT_ADMIN",
		2:  "DRT_GAME_OVER",
		3:  "DRT_HOST_OP",
		4:  "DRT_VOTE",
		5:  "DRT_TIME_OUT",
		6:  "DRT_AGENT_OP",
		7:  "DRT_TY_TIME_OUT",
		8:  "DRT_LJTY_TIME_OUT",
		9:  "DRT_OFFLINE_TIMEOUT",
		10: "DRT_DEPOSIT_OUT",
	}
	E_DISMISS_ROOM_TYPE_value = map[string]int32{
		"DRT_DEFAULT":         0,
		"DRT_ADMIN":           1,
		"DRT_GAME_OVER":       2,
		"DRT_HOST_OP":         3,
		"DRT_VOTE":            4,
		"DRT_TIME_OUT":        5,
		"DRT_AGENT_OP":        6,
		"DRT_TY_TIME_OUT":     7,
		"DRT_LJTY_TIME_OUT":   8,
		"DRT_OFFLINE_TIMEOUT": 9,
		"DRT_DEPOSIT_OUT":     10,
	}
)

func (x E_DISMISS_ROOM_TYPE) Enum() *E_DISMISS_ROOM_TYPE {
	p := new(E_DISMISS_ROOM_TYPE)
	*p = x
	return p
}

func (x E_DISMISS_ROOM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_DISMISS_ROOM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[5].Descriptor()
}

func (E_DISMISS_ROOM_TYPE) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[5]
}

func (x E_DISMISS_ROOM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_DISMISS_ROOM_TYPE.Descriptor instead.
func (E_DISMISS_ROOM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{5}
}

type E_KICKED_BY_WHO int32

const (
	E_KICKED_BY_WHO_KB_AGENT  E_KICKED_BY_WHO = 0 // 代理商踢人
	E_KICKED_BY_WHO_KB_ADMIN  E_KICKED_BY_WHO = 1 // 管理员踢人
	E_KICKED_BY_WHO_KB_SELF   E_KICKED_BY_WHO = 2 // 玩家退出
	E_KICKED_BY_WHO_KB_PLAYER E_KICKED_BY_WHO = 3 // 玩家踢人
	E_KICKED_BY_WHO_KB_HOST   E_KICKED_BY_WHO = 4 // 房主踢人
	E_KICKED_BY_WHO_KB_SYS    E_KICKED_BY_WHO = 5 // 系统踢出
)

// Enum value maps for E_KICKED_BY_WHO.
var (
	E_KICKED_BY_WHO_name = map[int32]string{
		0: "KB_AGENT",
		1: "KB_ADMIN",
		2: "KB_SELF",
		3: "KB_PLAYER",
		4: "KB_HOST",
		5: "KB_SYS",
	}
	E_KICKED_BY_WHO_value = map[string]int32{
		"KB_AGENT":  0,
		"KB_ADMIN":  1,
		"KB_SELF":   2,
		"KB_PLAYER": 3,
		"KB_HOST":   4,
		"KB_SYS":    5,
	}
)

func (x E_KICKED_BY_WHO) Enum() *E_KICKED_BY_WHO {
	p := new(E_KICKED_BY_WHO)
	*p = x
	return p
}

func (x E_KICKED_BY_WHO) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_KICKED_BY_WHO) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[6].Descriptor()
}

func (E_KICKED_BY_WHO) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[6]
}

func (x E_KICKED_BY_WHO) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_KICKED_BY_WHO.Descriptor instead.
func (E_KICKED_BY_WHO) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{6}
}

// 赛事类型
type E_MATCH_TYPE int32

const (
	E_MATCH_TYPE_MT_DEFAULT E_MATCH_TYPE = 0 // 默认自由赛
	E_MATCH_TYPE_MT_PRIX    E_MATCH_TYPE = 1 // 大奖赛(大师赛)
	E_MATCH_TYPE_MT_GOLD    E_MATCH_TYPE = 2 // 训练赛(新手场、大师场)
)

// Enum value maps for E_MATCH_TYPE.
var (
	E_MATCH_TYPE_name = map[int32]string{
		0: "MT_DEFAULT",
		1: "MT_PRIX",
		2: "MT_GOLD",
	}
	E_MATCH_TYPE_value = map[string]int32{
		"MT_DEFAULT": 0,
		"MT_PRIX":    1,
		"MT_GOLD":    2,
	}
)

func (x E_MATCH_TYPE) Enum() *E_MATCH_TYPE {
	p := new(E_MATCH_TYPE)
	*p = x
	return p
}

func (x E_MATCH_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_MATCH_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[7].Descriptor()
}

func (E_MATCH_TYPE) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[7]
}

func (x E_MATCH_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_MATCH_TYPE.Descriptor instead.
func (E_MATCH_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{7}
}

// 赛事奖励类型
type E_REWARD_TYPE int32

const (
	E_REWARD_TYPE_RT_UNKNOWN    E_REWARD_TYPE = 0 // 无意义
	E_REWARD_TYPE_RT_GOLD       E_REWARD_TYPE = 1 // 咖豆
	E_REWARD_TYPE_RT_FUKA       E_REWARD_TYPE = 2 // 家卡
	E_REWARD_TYPE_RT_MATCH_CARD E_REWARD_TYPE = 3 // 比赛卡
)

// Enum value maps for E_REWARD_TYPE.
var (
	E_REWARD_TYPE_name = map[int32]string{
		0: "RT_UNKNOWN",
		1: "RT_GOLD",
		2: "RT_FUKA",
		3: "RT_MATCH_CARD",
	}
	E_REWARD_TYPE_value = map[string]int32{
		"RT_UNKNOWN":    0,
		"RT_GOLD":       1,
		"RT_FUKA":       2,
		"RT_MATCH_CARD": 3,
	}
)

func (x E_REWARD_TYPE) Enum() *E_REWARD_TYPE {
	p := new(E_REWARD_TYPE)
	*p = x
	return p
}

func (x E_REWARD_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_REWARD_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[8].Descriptor()
}

func (E_REWARD_TYPE) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[8]
}

func (x E_REWARD_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_REWARD_TYPE.Descriptor instead.
func (E_REWARD_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{8}
}

// 玩家赛事状态
type E_PLAYER_MATCH int32

const (
	E_PLAYER_MATCH_PM_NOT_MATCH  E_PLAYER_MATCH = 0  // 未参加任何比赛
	E_PLAYER_MATCH_PM_MATCH      E_PLAYER_MATCH = 10 // 参与了大奖赛(大师赛)
	E_PLAYER_MATCH_PM_GOLD_MATCH E_PLAYER_MATCH = 20 // 参与了咖豆赛
)

// Enum value maps for E_PLAYER_MATCH.
var (
	E_PLAYER_MATCH_name = map[int32]string{
		0:  "PM_NOT_MATCH",
		10: "PM_MATCH",
		20: "PM_GOLD_MATCH",
	}
	E_PLAYER_MATCH_value = map[string]int32{
		"PM_NOT_MATCH":  0,
		"PM_MATCH":      10,
		"PM_GOLD_MATCH": 20,
	}
)

func (x E_PLAYER_MATCH) Enum() *E_PLAYER_MATCH {
	p := new(E_PLAYER_MATCH)
	*p = x
	return p
}

func (x E_PLAYER_MATCH) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_PLAYER_MATCH) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[9].Descriptor()
}

func (E_PLAYER_MATCH) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[9]
}

func (x E_PLAYER_MATCH) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_PLAYER_MATCH.Descriptor instead.
func (E_PLAYER_MATCH) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{9}
}

// 房间支付规则
type E_PAY_TYPE int32

const (
	E_PAY_TYPE_HOST_CARD E_PAY_TYPE = 0 // 默认房主支付（个人房间为创建者，比赛方为推广员）
	E_PAY_TYPE_AA_CARD   E_PAY_TYPE = 1 // AA房卡/均摊支付
	E_PAY_TYPE_WIN_CARD  E_PAY_TYPE = 2 // 赢家支付
)

// Enum value maps for E_PAY_TYPE.
var (
	E_PAY_TYPE_name = map[int32]string{
		0: "HOST_CARD",
		1: "AA_CARD",
		2: "WIN_CARD",
	}
	E_PAY_TYPE_value = map[string]int32{
		"HOST_CARD": 0,
		"AA_CARD":   1,
		"WIN_CARD":  2,
	}
)

func (x E_PAY_TYPE) Enum() *E_PAY_TYPE {
	p := new(E_PAY_TYPE)
	*p = x
	return p
}

func (x E_PAY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_PAY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[10].Descriptor()
}

func (E_PAY_TYPE) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[10]
}

func (x E_PAY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_PAY_TYPE.Descriptor instead.
func (E_PAY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{10}
}

// 场馆模式
type E_VENUE_MODE int32

const (
	// 圈模式
	E_VENUE_MODE_BOARD E_VENUE_MODE = 0
	// 局模式
	E_VENUE_MODE_INNINGS E_VENUE_MODE = 1
)

// Enum value maps for E_VENUE_MODE.
var (
	E_VENUE_MODE_name = map[int32]string{
		0: "BOARD",
		1: "INNINGS",
	}
	E_VENUE_MODE_value = map[string]int32{
		"BOARD":   0,
		"INNINGS": 1,
	}
)

func (x E_VENUE_MODE) Enum() *E_VENUE_MODE {
	p := new(E_VENUE_MODE)
	*p = x
	return p
}

func (x E_VENUE_MODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_VENUE_MODE) Descriptor() protoreflect.EnumDescriptor {
	return file_ra_platform_proto_enumTypes[11].Descriptor()
}

func (E_VENUE_MODE) Type() protoreflect.EnumType {
	return &file_ra_platform_proto_enumTypes[11]
}

func (x E_VENUE_MODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_VENUE_MODE.Descriptor instead.
func (E_VENUE_MODE) EnumDescriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{11}
}

type MSG_REQ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MSG_REQ) Reset() {
	*x = MSG_REQ{}
	mi := &file_ra_platform_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MSG_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_REQ) ProtoMessage() {}

func (x *MSG_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_REQ.ProtoReflect.Descriptor instead.
func (*MSG_REQ) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{0}
}

type MSG_RESP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        uint32                 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MSG_RESP) Reset() {
	*x = MSG_RESP{}
	mi := &file_ra_platform_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MSG_RESP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSG_RESP) ProtoMessage() {}

func (x *MSG_RESP) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSG_RESP.ProtoReflect.Descriptor instead.
func (*MSG_RESP) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{1}
}

func (x *MSG_RESP) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type GameUser struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Uid   uint32                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 0:真人；1：机器人
	IsRobot  uint32 `protobuf:"varint,2,opt,name=is_robot,json=isRobot,proto3" json:"is_robot,omitempty"`
	UserNick string `protobuf:"bytes,4,opt,name=user_nick,json=userNick,proto3" json:"user_nick,omitempty"` // 昵称
	UserHead string `protobuf:"bytes,5,opt,name=user_head,json=userHead,proto3" json:"user_head,omitempty"` // 头像地址
	// 在线状态 0 离线 1 在线
	Online        uint32 `protobuf:"varint,6,opt,name=online,proto3" json:"online,omitempty"`
	Sex           uint32 `protobuf:"varint,7,opt,name=sex,proto3" json:"sex,omitempty"` // 性别
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameUser) Reset() {
	*x = GameUser{}
	mi := &file_ra_platform_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUser) ProtoMessage() {}

func (x *GameUser) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUser.ProtoReflect.Descriptor instead.
func (*GameUser) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{2}
}

func (x *GameUser) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GameUser) GetIsRobot() uint32 {
	if x != nil {
		return x.IsRobot
	}
	return 0
}

func (x *GameUser) GetUserNick() string {
	if x != nil {
		return x.UserNick
	}
	return ""
}

func (x *GameUser) GetUserHead() string {
	if x != nil {
		return x.UserHead
	}
	return ""
}

func (x *GameUser) GetOnline() uint32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *GameUser) GetSex() uint32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

// 桌子的配置（通用规则定义）
type StCommonRuleDesc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 人数限制
	PlayerLimit uint32 `protobuf:"varint,1,opt,name=player_limit,json=playerLimit,proto3" json:"player_limit,omitempty"`
	// 手动准备
	HandReady uint32 `protobuf:"varint,2,opt,name=hand_ready,json=handReady,proto3" json:"hand_ready,omitempty"`
	// 禁止同IP
	LimitSameIp uint32 `protobuf:"varint,4,opt,name=limit_same_ip,json=limitSameIp,proto3" json:"limit_same_ip,omitempty"`
	// 少人成局(人数2或3)
	GameSrcj uint32 `protobuf:"varint,6,opt,name=game_srcj,json=gameSrcj,proto3" json:"game_srcj,omitempty"`
	// 继续组局（继续下一局）
	ContinueGame uint32 `protobuf:"varint,7,opt,name=continue_game,json=continueGame,proto3" json:"continue_game,omitempty"`
	// 倒计时几秒自动开始游戏
	StartLeftTime uint32 `protobuf:"varint,8,opt,name=start_left_time,json=startLeftTime,proto3" json:"start_left_time,omitempty"`
	// 强制开启定位（三合一：防作弊）
	ShareGps uint32 `protobuf:"varint,9,opt,name=share_gps,json=shareGps,proto3" json:"share_gps,omitempty"`
	// 禁止语音
	YuYin uint32 `protobuf:"varint,10,opt,name=yu_yin,json=yuYin,proto3" json:"yu_yin,omitempty"`
	// 离线踢人
	OfflineKick uint32 `protobuf:"varint,13,opt,name=offline_kick,json=offlineKick,proto3" json:"offline_kick,omitempty"`
	// 禁止解散
	CannotDismiss uint32 `protobuf:"varint,14,opt,name=cannot_dismiss,json=cannotDismiss,proto3" json:"cannot_dismiss,omitempty"`
	// 离线解散(结合离线不发牌使用)
	OfflineDismiss uint32 `protobuf:"varint,15,opt,name=offline_dismiss,json=offlineDismiss,proto3" json:"offline_dismiss,omitempty"`
	// 拖延解散：1、是
	DelayDismiss uint32 `protobuf:"varint,16,opt,name=delay_dismiss,json=delayDismiss,proto3" json:"delay_dismiss,omitempty"`
	// 累计拖延解散：1、是
	TotalDelayDismiss uint32 `protobuf:"varint,17,opt,name=total_delay_dismiss,json=totalDelayDismiss,proto3" json:"total_delay_dismiss,omitempty"`
	// 圈局模式 0 圈 1 局
	BoardType uint32 `protobuf:"varint,18,opt,name=board_type,json=boardType,proto3" json:"board_type,omitempty"`
	// 圈或局总数
	Board uint32 `protobuf:"varint,19,opt,name=board,proto3" json:"board,omitempty"`
	// √ 托管类型 0不托管 1单局托管 2全局托管
	DepositedType uint32 `protobuf:"varint,20,opt,name=deposited_type,json=depositedType,proto3" json:"deposited_type,omitempty"`
	// 托管设置：0 不托管 30秒/50秒
	Deposited uint32 `protobuf:"varint,21,opt,name=deposited,proto3" json:"deposited,omitempty"`
	// 操作倒计时默认10秒
	OvertimeOp uint32 `protobuf:"varint,22,opt,name=overtime_op,json=overtimeOp,proto3" json:"overtime_op,omitempty"`
	// √ 超时解散时间
	OvertimeDismiss uint32 `protobuf:"varint,23,opt,name=overtime_dismiss,json=overtimeDismiss,proto3" json:"overtime_dismiss,omitempty"`
	// 禁止互动表情（二合一：禁止互动）
	CloseEmoji uint32 `protobuf:"varint,24,opt,name=close_emoji,json=closeEmoji,proto3" json:"close_emoji,omitempty"`
	// 解散扣分
	DismissFen uint32 `protobuf:"varint,25,opt,name=dismiss_fen,json=dismissFen,proto3" json:"dismiss_fen,omitempty"`
	// 首局解散扣分
	FirstDismissFen uint32 `protobuf:"varint,26,opt,name=first_dismiss_fen,json=firstDismissFen,proto3" json:"first_dismiss_fen,omitempty"`
	// 底分（默认1）
	DiFen float32 `protobuf:"fixed32,27,opt,name=di_fen,json=diFen,proto3" json:"di_fen,omitempty"`
	// 观战：1、开启
	WatchBattle uint32 `protobuf:"varint,28,opt,name=watch_battle,json=watchBattle,proto3" json:"watch_battle,omitempty"`
	// 房间支付规则
	PayRule E_PAY_TYPE `protobuf:"varint,29,opt,name=pay_rule,json=payRule,proto3,enum=new_chess.E_PAY_TYPE" json:"pay_rule,omitempty"`
	// 底分系数
	RuleDiFenRatio float32 `protobuf:"fixed32,30,opt,name=rule_di_fen_ratio,json=ruleDiFenRatio,proto3" json:"rule_di_fen_ratio,omitempty"`
	// √ 离线不开牌
	OfflineNoDeal uint32 `protobuf:"varint,31,opt,name=offline_no_deal,json=offlineNoDeal,proto3" json:"offline_no_deal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StCommonRuleDesc) Reset() {
	*x = StCommonRuleDesc{}
	mi := &file_ra_platform_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StCommonRuleDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StCommonRuleDesc) ProtoMessage() {}

func (x *StCommonRuleDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StCommonRuleDesc.ProtoReflect.Descriptor instead.
func (*StCommonRuleDesc) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{3}
}

func (x *StCommonRuleDesc) GetPlayerLimit() uint32 {
	if x != nil {
		return x.PlayerLimit
	}
	return 0
}

func (x *StCommonRuleDesc) GetHandReady() uint32 {
	if x != nil {
		return x.HandReady
	}
	return 0
}

func (x *StCommonRuleDesc) GetLimitSameIp() uint32 {
	if x != nil {
		return x.LimitSameIp
	}
	return 0
}

func (x *StCommonRuleDesc) GetGameSrcj() uint32 {
	if x != nil {
		return x.GameSrcj
	}
	return 0
}

func (x *StCommonRuleDesc) GetContinueGame() uint32 {
	if x != nil {
		return x.ContinueGame
	}
	return 0
}

func (x *StCommonRuleDesc) GetStartLeftTime() uint32 {
	if x != nil {
		return x.StartLeftTime
	}
	return 0
}

func (x *StCommonRuleDesc) GetShareGps() uint32 {
	if x != nil {
		return x.ShareGps
	}
	return 0
}

func (x *StCommonRuleDesc) GetYuYin() uint32 {
	if x != nil {
		return x.YuYin
	}
	return 0
}

func (x *StCommonRuleDesc) GetOfflineKick() uint32 {
	if x != nil {
		return x.OfflineKick
	}
	return 0
}

func (x *StCommonRuleDesc) GetCannotDismiss() uint32 {
	if x != nil {
		return x.CannotDismiss
	}
	return 0
}

func (x *StCommonRuleDesc) GetOfflineDismiss() uint32 {
	if x != nil {
		return x.OfflineDismiss
	}
	return 0
}

func (x *StCommonRuleDesc) GetDelayDismiss() uint32 {
	if x != nil {
		return x.DelayDismiss
	}
	return 0
}

func (x *StCommonRuleDesc) GetTotalDelayDismiss() uint32 {
	if x != nil {
		return x.TotalDelayDismiss
	}
	return 0
}

func (x *StCommonRuleDesc) GetBoardType() uint32 {
	if x != nil {
		return x.BoardType
	}
	return 0
}

func (x *StCommonRuleDesc) GetBoard() uint32 {
	if x != nil {
		return x.Board
	}
	return 0
}

func (x *StCommonRuleDesc) GetDepositedType() uint32 {
	if x != nil {
		return x.DepositedType
	}
	return 0
}

func (x *StCommonRuleDesc) GetDeposited() uint32 {
	if x != nil {
		return x.Deposited
	}
	return 0
}

func (x *StCommonRuleDesc) GetOvertimeOp() uint32 {
	if x != nil {
		return x.OvertimeOp
	}
	return 0
}

func (x *StCommonRuleDesc) GetOvertimeDismiss() uint32 {
	if x != nil {
		return x.OvertimeDismiss
	}
	return 0
}

func (x *StCommonRuleDesc) GetCloseEmoji() uint32 {
	if x != nil {
		return x.CloseEmoji
	}
	return 0
}

func (x *StCommonRuleDesc) GetDismissFen() uint32 {
	if x != nil {
		return x.DismissFen
	}
	return 0
}

func (x *StCommonRuleDesc) GetFirstDismissFen() uint32 {
	if x != nil {
		return x.FirstDismissFen
	}
	return 0
}

func (x *StCommonRuleDesc) GetDiFen() float32 {
	if x != nil {
		return x.DiFen
	}
	return 0
}

func (x *StCommonRuleDesc) GetWatchBattle() uint32 {
	if x != nil {
		return x.WatchBattle
	}
	return 0
}

func (x *StCommonRuleDesc) GetPayRule() E_PAY_TYPE {
	if x != nil {
		return x.PayRule
	}
	return E_PAY_TYPE_HOST_CARD
}

func (x *StCommonRuleDesc) GetRuleDiFenRatio() float32 {
	if x != nil {
		return x.RuleDiFenRatio
	}
	return 0
}

func (x *StCommonRuleDesc) GetOfflineNoDeal() uint32 {
	if x != nil {
		return x.OfflineNoDeal
	}
	return 0
}

type StDismissDesc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DismissType   E_DISMISS_ROOM_TYPE    `protobuf:"varint,1,opt,name=dismiss_type,json=dismissType,proto3,enum=new_chess.E_DISMISS_ROOM_TYPE" json:"dismiss_type,omitempty"` // 解散类型
	DismissUid    uint32                 `protobuf:"varint,2,opt,name=dismiss_uid,json=dismissUid,proto3" json:"dismiss_uid,omitempty"`                                       // 发起解散的uid
	DismissTime   uint32                 `protobuf:"varint,3,opt,name=dismiss_time,json=dismissTime,proto3" json:"dismiss_time,omitempty"`                                    // 发起解散的时间戳
	TurnUid       uint32                 `protobuf:"varint,4,opt,name=turn_uid,json=turnUid,proto3" json:"turn_uid,omitempty"`                                                // 引起拖延/离线解散用户
	ClientTimerId int64                  `protobuf:"varint,5,opt,name=client_timer_id,json=clientTimerId,proto3" json:"client_timer_id,omitempty"`                            // 客户端解散定时器id
	DelayTimerId  int64                  `protobuf:"varint,6,opt,name=delay_timer_id,json=delayTimerId,proto3" json:"delay_timer_id,omitempty"`                               // 拖延解散定时器id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StDismissDesc) Reset() {
	*x = StDismissDesc{}
	mi := &file_ra_platform_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StDismissDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StDismissDesc) ProtoMessage() {}

func (x *StDismissDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StDismissDesc.ProtoReflect.Descriptor instead.
func (*StDismissDesc) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{4}
}

func (x *StDismissDesc) GetDismissType() E_DISMISS_ROOM_TYPE {
	if x != nil {
		return x.DismissType
	}
	return E_DISMISS_ROOM_TYPE_DRT_DEFAULT
}

func (x *StDismissDesc) GetDismissUid() uint32 {
	if x != nil {
		return x.DismissUid
	}
	return 0
}

func (x *StDismissDesc) GetDismissTime() uint32 {
	if x != nil {
		return x.DismissTime
	}
	return 0
}

func (x *StDismissDesc) GetTurnUid() uint32 {
	if x != nil {
		return x.TurnUid
	}
	return 0
}

func (x *StDismissDesc) GetClientTimerId() int64 {
	if x != nil {
		return x.ClientTimerId
	}
	return 0
}

func (x *StDismissDesc) GetDelayTimerId() int64 {
	if x != nil {
		return x.DelayTimerId
	}
	return 0
}

// 桌子的配置
type StGameRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameKind      uint32                 `protobuf:"varint,1,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`       // 玩法类型-场次ID---- E_GAME_KIND 定义
	RoomTicket    uint32                 `protobuf:"varint,2,opt,name=room_ticket,json=roomTicket,proto3" json:"room_ticket,omitempty"` // 消耗比赛卡
	WanfaId       uint32                 `protobuf:"varint,3,opt,name=wanfa_id,json=wanfaId,proto3" json:"wanfa_id,omitempty"`          // 玩法id
	GameType      uint32                 `protobuf:"varint,4,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`       // 游戏类型----E_GAME_TYPE定义（0麻将 1斗地主 2跑得快）
	CommonRule    *StCommonRuleDesc      `protobuf:"bytes,5,opt,name=common_rule,json=commonRule,proto3" json:"common_rule,omitempty"`  // 通用规则定义
	RoomRule      []byte                 `protobuf:"bytes,6,opt,name=room_rule,json=roomRule,proto3" json:"room_rule,omitempty"`        // 场馆配置文件，各地市差异较多，自定义玩法结构com.xddev.rule.st_rule_desc_xxx
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StGameRule) Reset() {
	*x = StGameRule{}
	mi := &file_ra_platform_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StGameRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StGameRule) ProtoMessage() {}

func (x *StGameRule) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StGameRule.ProtoReflect.Descriptor instead.
func (*StGameRule) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{5}
}

func (x *StGameRule) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *StGameRule) GetRoomTicket() uint32 {
	if x != nil {
		return x.RoomTicket
	}
	return 0
}

func (x *StGameRule) GetWanfaId() uint32 {
	if x != nil {
		return x.WanfaId
	}
	return 0
}

func (x *StGameRule) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *StGameRule) GetCommonRule() *StCommonRuleDesc {
	if x != nil {
		return x.CommonRule
	}
	return nil
}

func (x *StGameRule) GetRoomRule() []byte {
	if x != nil {
		return x.RoomRule
	}
	return nil
}

// 游戏中的状态（桌子显示部分）
type StGameingDesc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Banker        uint32                 `protobuf:"varint,1,opt,name=banker,proto3" json:"banker,omitempty"`                              // 庄家
	CurBoard      uint32                 `protobuf:"varint,2,opt,name=cur_board,json=curBoard,proto3" json:"cur_board,omitempty"`          // 当前圈或局数
	BeginTime     uint32                 `protobuf:"varint,3,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`       // 开始时间
	ServerTime    uint32                 `protobuf:"varint,4,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`    // 当前服务器时间
	StartBanker   uint32                 `protobuf:"varint,5,opt,name=start_banker,json=startBanker,proto3" json:"start_banker,omitempty"` // 起始庄家（圈模式恢复牌局使用）
	LastBanker    uint32                 `protobuf:"varint,6,opt,name=last_banker,json=lastBanker,proto3" json:"last_banker,omitempty"`    // 上一局庄家
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StGameingDesc) Reset() {
	*x = StGameingDesc{}
	mi := &file_ra_platform_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StGameingDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StGameingDesc) ProtoMessage() {}

func (x *StGameingDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StGameingDesc.ProtoReflect.Descriptor instead.
func (*StGameingDesc) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{6}
}

func (x *StGameingDesc) GetBanker() uint32 {
	if x != nil {
		return x.Banker
	}
	return 0
}

func (x *StGameingDesc) GetCurBoard() uint32 {
	if x != nil {
		return x.CurBoard
	}
	return 0
}

func (x *StGameingDesc) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *StGameingDesc) GetServerTime() uint32 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *StGameingDesc) GetStartBanker() uint32 {
	if x != nil {
		return x.StartBanker
	}
	return 0
}

func (x *StGameingDesc) GetLastBanker() uint32 {
	if x != nil {
		return x.LastBanker
	}
	return 0
}

// 用户位置信息
type StGpsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoginIp       string                 `protobuf:"bytes,1,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"` // 登录ip
	Location      string                 `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`              // 位置信息
	Longitude     float64                `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`          // 经度
	Latitude      float64                `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`            // 纬度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StGpsInfo) Reset() {
	*x = StGpsInfo{}
	mi := &file_ra_platform_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StGpsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StGpsInfo) ProtoMessage() {}

func (x *StGpsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StGpsInfo.ProtoReflect.Descriptor instead.
func (*StGpsInfo) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{7}
}

func (x *StGpsInfo) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *StGpsInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *StGpsInfo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *StGpsInfo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

// 房间玩家状态（显示部分）
type StCommonUserDesc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeatNo        uint32                 `protobuf:"varint,1,opt,name=seat_no,json=seatNo,proto3" json:"seat_no,omitempty"`                     // 座位号
	Ready         uint32                 `protobuf:"varint,2,opt,name=ready,proto3" json:"ready,omitempty"`                                     // 是否准备
	ZhuClub       uint32                 `protobuf:"varint,3,opt,name=zhu_club,json=zhuClub,proto3" json:"zhu_club,omitempty"`                  // 主战队ID	加入房间时候记录一次
	JoinClub      uint32                 `protobuf:"varint,4,opt,name=join_club,json=joinClub,proto3" json:"join_club,omitempty"`               // 加入战队ID: 0表示主战队成员 加入房间时候记录一次
	Score         float32                `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`                                    // 当前游戏输赢分数
	Gps           *StGpsInfo             `protobuf:"bytes,6,opt,name=gps,proto3" json:"gps,omitempty"`                                          // 位置信息
	SpeakStatus   uint32                 `protobuf:"varint,8,opt,name=speak_status,json=speakStatus,proto3" json:"speak_status,omitempty"`      // 语音状态 1正在录音
	Srcj          uint32                 `protobuf:"varint,9,opt,name=srcj,proto3" json:"srcj,omitempty"`                                       // 少人成局（房间如果配置了少人成局，用户需再度确认）
	ZhuClubName   string                 `protobuf:"bytes,10,opt,name=zhu_club_name,json=zhuClubName,proto3" json:"zhu_club_name,omitempty"`    // 主战队名称
	JoinClubName  string                 `protobuf:"bytes,11,opt,name=join_club_name,json=joinClubName,proto3" json:"join_club_name,omitempty"` // 加入战队名称
	PayCid        uint32                 `protobuf:"varint,12,opt,name=pay_cid,json=payCid,proto3" json:"pay_cid,omitempty"`                    // 耗卡战队ID
	RoomTicket    float32                `protobuf:"fixed32,13,opt,name=room_ticket,json=roomTicket,proto3" json:"room_ticket,omitempty"`       // 耗卡数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StCommonUserDesc) Reset() {
	*x = StCommonUserDesc{}
	mi := &file_ra_platform_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StCommonUserDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StCommonUserDesc) ProtoMessage() {}

func (x *StCommonUserDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StCommonUserDesc.ProtoReflect.Descriptor instead.
func (*StCommonUserDesc) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{8}
}

func (x *StCommonUserDesc) GetSeatNo() uint32 {
	if x != nil {
		return x.SeatNo
	}
	return 0
}

func (x *StCommonUserDesc) GetReady() uint32 {
	if x != nil {
		return x.Ready
	}
	return 0
}

func (x *StCommonUserDesc) GetZhuClub() uint32 {
	if x != nil {
		return x.ZhuClub
	}
	return 0
}

func (x *StCommonUserDesc) GetJoinClub() uint32 {
	if x != nil {
		return x.JoinClub
	}
	return 0
}

func (x *StCommonUserDesc) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *StCommonUserDesc) GetGps() *StGpsInfo {
	if x != nil {
		return x.Gps
	}
	return nil
}

func (x *StCommonUserDesc) GetSpeakStatus() uint32 {
	if x != nil {
		return x.SpeakStatus
	}
	return 0
}

func (x *StCommonUserDesc) GetSrcj() uint32 {
	if x != nil {
		return x.Srcj
	}
	return 0
}

func (x *StCommonUserDesc) GetZhuClubName() string {
	if x != nil {
		return x.ZhuClubName
	}
	return ""
}

func (x *StCommonUserDesc) GetJoinClubName() string {
	if x != nil {
		return x.JoinClubName
	}
	return ""
}

func (x *StCommonUserDesc) GetPayCid() uint32 {
	if x != nil {
		return x.PayCid
	}
	return 0
}

func (x *StCommonUserDesc) GetRoomTicket() float32 {
	if x != nil {
		return x.RoomTicket
	}
	return 0
}

// 一个桌子的完整描叙
type StRoomDesc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        uint32                 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                    // room_id：房间显示用（生成规则：每日循环，从10000起始）
	AgentUid      uint32                 `protobuf:"varint,2,opt,name=agent_uid,json=agentUid,proto3" json:"agent_uid,omitempty"`                              // 经销商uid (包括代开房)
	Cid           uint32                 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty"`                                                        // 战队id
	UnionId       uint32                 `protobuf:"varint,4,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`                                 // 大联盟id
	EGameing      E_ROOM_STATUS          `protobuf:"varint,6,opt,name=e_gameing,json=eGameing,proto3,enum=new_chess.E_ROOM_STATUS" json:"e_gameing,omitempty"` // 是否已经开始
	GameRule      *StGameRule            `protobuf:"bytes,8,opt,name=game_rule,json=gameRule,proto3" json:"game_rule,omitempty"`                               // 场馆配置（同一个游戏配置ID）
	GameingDesc   *StGameingDesc         `protobuf:"bytes,9,opt,name=gameing_desc,json=gameingDesc,proto3" json:"gameing_desc,omitempty"`                      // 游戏中的数据
	CreateTime    uint32                 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                       // 创建时间
	LastJoinUid   uint32                 `protobuf:"varint,11,opt,name=last_join_uid,json=lastJoinUid,proto3" json:"last_join_uid,omitempty"`                  // 最后加入用户可以快速开始，否则等N秒后坐满开始
	OwnerUid      uint32                 `protobuf:"varint,12,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`                             // 个人开房 房主uid
	ClubName      string                 `protobuf:"bytes,13,opt,name=club_name,json=clubName,proto3" json:"club_name,omitempty"`                              // 俱乐部名称
	AreaId        uint32                 `protobuf:"varint,14,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`                                   // 地市id
	PayType       uint32                 `protobuf:"varint,15,opt,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"`                                // 耗卡类型：1、通用耗卡，2、分开耗卡
	MatchInfo     *StMatchInfo           `protobuf:"bytes,16,opt,name=match_info,json=matchInfo,proto3" json:"match_info,omitempty"`                           // 比赛信息
	MatchMode     uint32                 `protobuf:"varint,17,opt,name=match_mode,json=matchMode,proto3" json:"match_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StRoomDesc) Reset() {
	*x = StRoomDesc{}
	mi := &file_ra_platform_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StRoomDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StRoomDesc) ProtoMessage() {}

func (x *StRoomDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StRoomDesc.ProtoReflect.Descriptor instead.
func (*StRoomDesc) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{9}
}

func (x *StRoomDesc) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *StRoomDesc) GetAgentUid() uint32 {
	if x != nil {
		return x.AgentUid
	}
	return 0
}

func (x *StRoomDesc) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *StRoomDesc) GetUnionId() uint32 {
	if x != nil {
		return x.UnionId
	}
	return 0
}

func (x *StRoomDesc) GetEGameing() E_ROOM_STATUS {
	if x != nil {
		return x.EGameing
	}
	return E_ROOM_STATUS_E_WAITING
}

func (x *StRoomDesc) GetGameRule() *StGameRule {
	if x != nil {
		return x.GameRule
	}
	return nil
}

func (x *StRoomDesc) GetGameingDesc() *StGameingDesc {
	if x != nil {
		return x.GameingDesc
	}
	return nil
}

func (x *StRoomDesc) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *StRoomDesc) GetLastJoinUid() uint32 {
	if x != nil {
		return x.LastJoinUid
	}
	return 0
}

func (x *StRoomDesc) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

func (x *StRoomDesc) GetClubName() string {
	if x != nil {
		return x.ClubName
	}
	return ""
}

func (x *StRoomDesc) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *StRoomDesc) GetPayType() uint32 {
	if x != nil {
		return x.PayType
	}
	return 0
}

func (x *StRoomDesc) GetMatchInfo() *StMatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *StRoomDesc) GetMatchMode() uint32 {
	if x != nil {
		return x.MatchMode
	}
	return 0
}

type StGameingUserDesc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AutoHu        uint32                 `protobuf:"varint,1,opt,name=auto_hu,json=autoHu,proto3" json:"auto_hu,omitempty"`                   // 自动胡状态(废弃)
	Status        uint32                 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                                 // 玩家牌局状态
	Deposited     uint32                 `protobuf:"varint,3,opt,name=deposited,proto3" json:"deposited,omitempty"`                           // 托管
	DelayTime     uint32                 `protobuf:"varint,4,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`          // 当前拖延开始时间,包括10倒计时秒（根据服务器时间计算当前拖延时间）
	OfflineTime   uint32                 `protobuf:"varint,5,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"`    // 当前离线开始时间（根据服务器时间计算当前离线时间）
	TotalDelay    uint32                 `protobuf:"varint,6,opt,name=total_delay,json=totalDelay,proto3" json:"total_delay,omitempty"`       // 拖延累计时间(不包括当前拖延)
	TotalOffline  uint32                 `protobuf:"varint,7,opt,name=total_offline,json=totalOffline,proto3" json:"total_offline,omitempty"` // 累计离线时间(不包括当前离线)
	ContinueGame  uint32                 `protobuf:"varint,8,opt,name=continue_game,json=continueGame,proto3" json:"continue_game,omitempty"` // 继续游戏 1 同意 2 取消
	IDismiss      uint32                 `protobuf:"varint,9,opt,name=i_dismiss,json=iDismiss,proto3" json:"i_dismiss,omitempty"`             // 解散操作
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StGameingUserDesc) Reset() {
	*x = StGameingUserDesc{}
	mi := &file_ra_platform_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StGameingUserDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StGameingUserDesc) ProtoMessage() {}

func (x *StGameingUserDesc) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StGameingUserDesc.ProtoReflect.Descriptor instead.
func (*StGameingUserDesc) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{10}
}

func (x *StGameingUserDesc) GetAutoHu() uint32 {
	if x != nil {
		return x.AutoHu
	}
	return 0
}

func (x *StGameingUserDesc) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StGameingUserDesc) GetDeposited() uint32 {
	if x != nil {
		return x.Deposited
	}
	return 0
}

func (x *StGameingUserDesc) GetDelayTime() uint32 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *StGameingUserDesc) GetOfflineTime() uint32 {
	if x != nil {
		return x.OfflineTime
	}
	return 0
}

func (x *StGameingUserDesc) GetTotalDelay() uint32 {
	if x != nil {
		return x.TotalDelay
	}
	return 0
}

func (x *StGameingUserDesc) GetTotalOffline() uint32 {
	if x != nil {
		return x.TotalOffline
	}
	return 0
}

func (x *StGameingUserDesc) GetContinueGame() uint32 {
	if x != nil {
		return x.ContinueGame
	}
	return 0
}

func (x *StGameingUserDesc) GetIDismiss() uint32 {
	if x != nil {
		return x.IDismiss
	}
	return 0
}

type StRoomUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameUser      *GameUser              `protobuf:"bytes,1,opt,name=game_user,json=gameUser,proto3" json:"game_user,omitempty"`
	CommonUser    *StCommonUserDesc      `protobuf:"bytes,2,opt,name=common_user,json=commonUser,proto3" json:"common_user,omitempty"`
	GameingUser   *StGameingUserDesc     `protobuf:"bytes,3,opt,name=gameing_user,json=gameingUser,proto3" json:"gameing_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StRoomUser) Reset() {
	*x = StRoomUser{}
	mi := &file_ra_platform_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StRoomUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StRoomUser) ProtoMessage() {}

func (x *StRoomUser) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StRoomUser.ProtoReflect.Descriptor instead.
func (*StRoomUser) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{11}
}

func (x *StRoomUser) GetGameUser() *GameUser {
	if x != nil {
		return x.GameUser
	}
	return nil
}

func (x *StRoomUser) GetCommonUser() *StCommonUserDesc {
	if x != nil {
		return x.CommonUser
	}
	return nil
}

func (x *StRoomUser) GetGameingUser() *StGameingUserDesc {
	if x != nil {
		return x.GameingUser
	}
	return nil
}

type StRoomInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomDesc      *StRoomDesc            `protobuf:"bytes,1,opt,name=room_desc,json=roomDesc,proto3" json:"room_desc,omitempty"`          // 房间信息
	RoomUsers     []*StRoomUser          `protobuf:"bytes,2,rep,name=room_users,json=roomUsers,proto3" json:"room_users,omitempty"`       // 游戏玩家
	WatchUsers    []*GameUser            `protobuf:"bytes,3,rep,name=watch_users,json=watchUsers,proto3" json:"watch_users,omitempty"`    // 观战玩家
	GameRecover   []byte                 `protobuf:"bytes,4,opt,name=game_recover,json=gameRecover,proto3" json:"game_recover,omitempty"` // 牌局恢复数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StRoomInfo) Reset() {
	*x = StRoomInfo{}
	mi := &file_ra_platform_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StRoomInfo) ProtoMessage() {}

func (x *StRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StRoomInfo.ProtoReflect.Descriptor instead.
func (*StRoomInfo) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{12}
}

func (x *StRoomInfo) GetRoomDesc() *StRoomDesc {
	if x != nil {
		return x.RoomDesc
	}
	return nil
}

func (x *StRoomInfo) GetRoomUsers() []*StRoomUser {
	if x != nil {
		return x.RoomUsers
	}
	return nil
}

func (x *StRoomInfo) GetWatchUsers() []*GameUser {
	if x != nil {
		return x.WatchUsers
	}
	return nil
}

func (x *StRoomInfo) GetGameRecover() []byte {
	if x != nil {
		return x.GameRecover
	}
	return nil
}

// 房间信息索引redis: (room_type:room_id)
type StRoomType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomType      CLUB_ROOM_TYPE         `protobuf:"varint,1,opt,name=room_type,json=roomType,proto3,enum=new_chess.CLUB_ROOM_TYPE" json:"room_type,omitempty"`
	Cid           uint32                 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`                                                        // 战队id。“个人自建房信息” 未使用本字段
	SrvId         uint32                 `protobuf:"varint,3,opt,name=srv_id,json=srvId,proto3" json:"srv_id,omitempty"`                                       // 当前房间所在服务ID E_Server_Type(客户端使用)
	GameKind      uint32                 `protobuf:"varint,4,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`                              // 玩法类型-场次ID--- E_GAME_KIND 定义
	Servant       string                 `protobuf:"bytes,5,opt,name=servant,proto3" json:"servant,omitempty"`                                                 // 游戏服：tars Servant
	EGameing      E_ROOM_STATUS          `protobuf:"varint,6,opt,name=e_gameing,json=eGameing,proto3,enum=new_chess.E_ROOM_STATUS" json:"e_gameing,omitempty"` // 是否已经开始
	AgentUid      uint32                 `protobuf:"varint,7,opt,name=agent_uid,json=agentUid,proto3" json:"agent_uid,omitempty"`                              // 代理商uid，俱乐部房间 = 俱乐部创建者uid，个人房间 = 0
	WanfaId       uint32                 `protobuf:"varint,8,opt,name=wanfa_id,json=wanfaId,proto3" json:"wanfa_id,omitempty"`                                 // 玩法id
	GameType      uint32                 `protobuf:"varint,9,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`                              // 游戏类型----E_GAME_TYPE定义（0麻将 1斗地主 2跑得快）
	AreaId        uint32                 `protobuf:"varint,10,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`                                   // 地市id
	MatchInfo     *StMatchInfo           `protobuf:"bytes,11,opt,name=match_info,json=matchInfo,proto3" json:"match_info,omitempty"`                           // 比赛信息
	OwnerUid      uint32                 `protobuf:"varint,12,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`                             // 房间创建者的uid（等于耗卡者的uid）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StRoomType) Reset() {
	*x = StRoomType{}
	mi := &file_ra_platform_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StRoomType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StRoomType) ProtoMessage() {}

func (x *StRoomType) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StRoomType.ProtoReflect.Descriptor instead.
func (*StRoomType) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{13}
}

func (x *StRoomType) GetRoomType() CLUB_ROOM_TYPE {
	if x != nil {
		return x.RoomType
	}
	return CLUB_ROOM_TYPE_CRT_CLUB_ROOM
}

func (x *StRoomType) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *StRoomType) GetSrvId() uint32 {
	if x != nil {
		return x.SrvId
	}
	return 0
}

func (x *StRoomType) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *StRoomType) GetServant() string {
	if x != nil {
		return x.Servant
	}
	return ""
}

func (x *StRoomType) GetEGameing() E_ROOM_STATUS {
	if x != nil {
		return x.EGameing
	}
	return E_ROOM_STATUS_E_WAITING
}

func (x *StRoomType) GetAgentUid() uint32 {
	if x != nil {
		return x.AgentUid
	}
	return 0
}

func (x *StRoomType) GetWanfaId() uint32 {
	if x != nil {
		return x.WanfaId
	}
	return 0
}

func (x *StRoomType) GetGameType() uint32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *StRoomType) GetAreaId() uint32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *StRoomType) GetMatchInfo() *StMatchInfo {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *StRoomType) GetOwnerUid() uint32 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

type StMatchInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchType     E_MATCH_TYPE           `protobuf:"varint,1,opt,name=match_type,json=matchType,proto3,enum=new_chess.E_MATCH_TYPE" json:"match_type,omitempty"` // 比赛类型：0、默认自由赛，1、大奖赛，2、训练赛(新手场、大师场)
	MatchId       uint32                 `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                   // 比赛id
	MatchName     string                 `protobuf:"bytes,3,opt,name=match_name,json=matchName,proto3" json:"match_name,omitempty"`                              // 比赛名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StMatchInfo) Reset() {
	*x = StMatchInfo{}
	mi := &file_ra_platform_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StMatchInfo) ProtoMessage() {}

func (x *StMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StMatchInfo.ProtoReflect.Descriptor instead.
func (*StMatchInfo) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{14}
}

func (x *StMatchInfo) GetMatchType() E_MATCH_TYPE {
	if x != nil {
		return x.MatchType
	}
	return E_MATCH_TYPE_MT_DEFAULT
}

func (x *StMatchInfo) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *StMatchInfo) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

// 场次信息
type StGameKindInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 游戏类型
	GameType E_GAME_TYPE `protobuf:"varint,1,opt,name=game_type,json=gameType,proto3,enum=new_chess.E_GAME_TYPE" json:"game_type,omitempty"`
	// 场次编号
	GameKind uint32 `protobuf:"varint,2,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`
	// 玩法规则序列化后的内容
	PlayRule []byte `protobuf:"bytes,3,opt,name=play_rule,json=playRule,proto3" json:"play_rule,omitempty"`
	// 场次名字
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StGameKindInfo) Reset() {
	*x = StGameKindInfo{}
	mi := &file_ra_platform_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StGameKindInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StGameKindInfo) ProtoMessage() {}

func (x *StGameKindInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StGameKindInfo.ProtoReflect.Descriptor instead.
func (*StGameKindInfo) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{15}
}

func (x *StGameKindInfo) GetGameType() E_GAME_TYPE {
	if x != nil {
		return x.GameType
	}
	return E_GAME_TYPE_E_GAMR_TYPE_MJ
}

func (x *StGameKindInfo) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *StGameKindInfo) GetPlayRule() []byte {
	if x != nil {
		return x.PlayRule
	}
	return nil
}

func (x *StGameKindInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// st_user_match 用户大奖赛比赛参赛状态
type StUserMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnrollStatus  uint32                 `protobuf:"varint,1,opt,name=enroll_status,json=enrollStatus,proto3" json:"enroll_status,omitempty"`   // 参数状态；0=未报名，1=已报名，2=牌局中，3=一局结束等待中
	SeriesPlayId  uint32                 `protobuf:"varint,2,opt,name=series_play_id,json=seriesPlayId,proto3" json:"series_play_id,omitempty"` // 比赛场次id；0=未参与比赛
	MatchId       uint32                 `protobuf:"varint,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                  // 比赛场次开赛id
	GameKind      uint32                 `protobuf:"varint,4,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`               // 玩法类型-场次ID
	RoomId        uint32                 `protobuf:"varint,5,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                     // 当前所在的房间id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StUserMatch) Reset() {
	*x = StUserMatch{}
	mi := &file_ra_platform_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StUserMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StUserMatch) ProtoMessage() {}

func (x *StUserMatch) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StUserMatch.ProtoReflect.Descriptor instead.
func (*StUserMatch) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{16}
}

func (x *StUserMatch) GetEnrollStatus() uint32 {
	if x != nil {
		return x.EnrollStatus
	}
	return 0
}

func (x *StUserMatch) GetSeriesPlayId() uint32 {
	if x != nil {
		return x.SeriesPlayId
	}
	return 0
}

func (x *StUserMatch) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *StUserMatch) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *StUserMatch) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

// st_user_gold_match 用户咖豆赛比赛参赛状态
type StUserGoldMatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerStatus  uint32                 `protobuf:"varint,1,opt,name=player_status,json=playerStatus,proto3" json:"player_status,omitempty"` // 参数状态；0=未报名，1=匹配中，2=牌局中
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StUserGoldMatch) Reset() {
	*x = StUserGoldMatch{}
	mi := &file_ra_platform_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StUserGoldMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StUserGoldMatch) ProtoMessage() {}

func (x *StUserGoldMatch) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StUserGoldMatch.ProtoReflect.Descriptor instead.
func (*StUserGoldMatch) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{17}
}

func (x *StUserGoldMatch) GetPlayerStatus() uint32 {
	if x != nil {
		return x.PlayerStatus
	}
	return 0
}

// 奖励数据
type StRewardData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardType    E_REWARD_TYPE          `protobuf:"varint,1,opt,name=reward_type,json=rewardType,proto3,enum=new_chess.E_REWARD_TYPE" json:"reward_type,omitempty"` // 任务奖励类型
	RewardNum     uint32                 `protobuf:"varint,2,opt,name=reward_num,json=rewardNum,proto3" json:"reward_num,omitempty"`                                 // 奖励数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StRewardData) Reset() {
	*x = StRewardData{}
	mi := &file_ra_platform_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StRewardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StRewardData) ProtoMessage() {}

func (x *StRewardData) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StRewardData.ProtoReflect.Descriptor instead.
func (*StRewardData) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{18}
}

func (x *StRewardData) GetRewardType() E_REWARD_TYPE {
	if x != nil {
		return x.RewardType
	}
	return E_REWARD_TYPE_RT_UNKNOWN
}

func (x *StRewardData) GetRewardNum() uint32 {
	if x != nil {
		return x.RewardNum
	}
	return 0
}

// 玩家游戏输赢数据
type StPlayerGameInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalBoard    uint32                 `protobuf:"varint,1,opt,name=total_board,json=totalBoard,proto3" json:"total_board,omitempty"` // 累计游戏局数
	TotalScore    int32                  `protobuf:"varint,2,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"` // 累计总输赢
	MonthScore    int32                  `protobuf:"varint,3,opt,name=month_score,json=monthScore,proto3" json:"month_score,omitempty"` // 当月总输赢
	WeekScore     int32                  `protobuf:"varint,4,opt,name=week_score,json=weekScore,proto3" json:"week_score,omitempty"`    // 本周总输赢
	DayScore      int32                  `protobuf:"varint,5,opt,name=day_score,json=dayScore,proto3" json:"day_score,omitempty"`       // 当天总输赢
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StPlayerGameInfo) Reset() {
	*x = StPlayerGameInfo{}
	mi := &file_ra_platform_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StPlayerGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StPlayerGameInfo) ProtoMessage() {}

func (x *StPlayerGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StPlayerGameInfo.ProtoReflect.Descriptor instead.
func (*StPlayerGameInfo) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{19}
}

func (x *StPlayerGameInfo) GetTotalBoard() uint32 {
	if x != nil {
		return x.TotalBoard
	}
	return 0
}

func (x *StPlayerGameInfo) GetTotalScore() int32 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *StPlayerGameInfo) GetMonthScore() int32 {
	if x != nil {
		return x.MonthScore
	}
	return 0
}

func (x *StPlayerGameInfo) GetWeekScore() int32 {
	if x != nil {
		return x.WeekScore
	}
	return 0
}

func (x *StPlayerGameInfo) GetDayScore() int32 {
	if x != nil {
		return x.DayScore
	}
	return 0
}

// 局数数据
type StBoardData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 桌子模式，0圈， 1局
	Mode E_VENUE_MODE `protobuf:"varint,1,opt,name=mode,proto3,enum=new_chess.E_VENUE_MODE" json:"mode,omitempty"`
	// 总的圈数
	Board uint32 `protobuf:"varint,2,opt,name=board,proto3" json:"board,omitempty"`
	// 当前圈数
	CurBoard uint32 `protobuf:"varint,3,opt,name=cur_board,json=curBoard,proto3" json:"cur_board,omitempty"`
	// 剩余圈数
	RestBoard uint32 `protobuf:"varint,4,opt,name=rest_board,json=restBoard,proto3" json:"rest_board,omitempty"`
	// 总的局数
	Innings uint32 `protobuf:"varint,5,opt,name=innings,proto3" json:"innings,omitempty"`
	// 当前局数,房间中场馆真实走局
	CurInnings uint32 `protobuf:"varint,6,opt,name=cur_innings,json=curInnings,proto3" json:"cur_innings,omitempty"`
	// 剩余局数
	RestInnings uint32 `protobuf:"varint,7,opt,name=rest_innings,json=restInnings,proto3" json:"rest_innings,omitempty"`
	// 当前场馆局数统计
	VenueInnings uint32 `protobuf:"varint,8,opt,name=venue_innings,json=venueInnings,proto3" json:"venue_innings,omitempty"`
	// 游戏结束
	GameEnd       bool `protobuf:"varint,9,opt,name=game_end,json=gameEnd,proto3" json:"game_end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StBoardData) Reset() {
	*x = StBoardData{}
	mi := &file_ra_platform_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StBoardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StBoardData) ProtoMessage() {}

func (x *StBoardData) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StBoardData.ProtoReflect.Descriptor instead.
func (*StBoardData) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{20}
}

func (x *StBoardData) GetMode() E_VENUE_MODE {
	if x != nil {
		return x.Mode
	}
	return E_VENUE_MODE_BOARD
}

func (x *StBoardData) GetBoard() uint32 {
	if x != nil {
		return x.Board
	}
	return 0
}

func (x *StBoardData) GetCurBoard() uint32 {
	if x != nil {
		return x.CurBoard
	}
	return 0
}

func (x *StBoardData) GetRestBoard() uint32 {
	if x != nil {
		return x.RestBoard
	}
	return 0
}

func (x *StBoardData) GetInnings() uint32 {
	if x != nil {
		return x.Innings
	}
	return 0
}

func (x *StBoardData) GetCurInnings() uint32 {
	if x != nil {
		return x.CurInnings
	}
	return 0
}

func (x *StBoardData) GetRestInnings() uint32 {
	if x != nil {
		return x.RestInnings
	}
	return 0
}

func (x *StBoardData) GetVenueInnings() uint32 {
	if x != nil {
		return x.VenueInnings
	}
	return 0
}

func (x *StBoardData) GetGameEnd() bool {
	if x != nil {
		return x.GameEnd
	}
	return false
}

// 拖延数据
type TuoYanInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SeatNo            int32                  `protobuf:"varint,1,opt,name=seat_no,json=seatNo,proto3" json:"seat_no,omitempty"`
	BeginTime         int64                  `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	DelayTime         int64                  `protobuf:"varint,3,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	OfflineTime       int64                  `protobuf:"varint,4,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"`
	LastOfflineTime   int64                  `protobuf:"varint,5,opt,name=last_offline_time,json=lastOfflineTime,proto3" json:"last_offline_time,omitempty"`
	StartOfflineCount bool                   `protobuf:"varint,6,opt,name=start_offline_count,json=startOfflineCount,proto3" json:"start_offline_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TuoYanInfo) Reset() {
	*x = TuoYanInfo{}
	mi := &file_ra_platform_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TuoYanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuoYanInfo) ProtoMessage() {}

func (x *TuoYanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuoYanInfo.ProtoReflect.Descriptor instead.
func (*TuoYanInfo) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{21}
}

func (x *TuoYanInfo) GetSeatNo() int32 {
	if x != nil {
		return x.SeatNo
	}
	return 0
}

func (x *TuoYanInfo) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TuoYanInfo) GetDelayTime() int64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

func (x *TuoYanInfo) GetOfflineTime() int64 {
	if x != nil {
		return x.OfflineTime
	}
	return 0
}

func (x *TuoYanInfo) GetLastOfflineTime() int64 {
	if x != nil {
		return x.LastOfflineTime
	}
	return 0
}

func (x *TuoYanInfo) GetStartOfflineCount() bool {
	if x != nil {
		return x.StartOfflineCount
	}
	return false
}

type StDelayData struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	SeatList []*TuoYanInfo          `protobuf:"bytes,1,rep,name=seat_list,json=seatList,proto3" json:"seat_list,omitempty"`
	// 拖延时间
	DelayTime     int64 `protobuf:"varint,2,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StDelayData) Reset() {
	*x = StDelayData{}
	mi := &file_ra_platform_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StDelayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StDelayData) ProtoMessage() {}

func (x *StDelayData) ProtoReflect() protoreflect.Message {
	mi := &file_ra_platform_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StDelayData.ProtoReflect.Descriptor instead.
func (*StDelayData) Descriptor() ([]byte, []int) {
	return file_ra_platform_proto_rawDescGZIP(), []int{22}
}

func (x *StDelayData) GetSeatList() []*TuoYanInfo {
	if x != nil {
		return x.SeatList
	}
	return nil
}

func (x *StDelayData) GetDelayTime() int64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

var File_ra_platform_proto protoreflect.FileDescriptor

var file_ra_platform_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x22, 0x09,
	0x0a, 0x07, 0x4d, 0x53, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x22, 0x0a, 0x08, 0x4d, 0x53, 0x47,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9b, 0x01,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x69, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73, 0x65, 0x78, 0x22, 0xd4, 0x07, 0x0a, 0x13,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x61, 0x6d, 0x65, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x72, 0x63, 0x6a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x72, 0x63, 0x6a, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x67, 0x70, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x47, 0x70, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x79, 0x75, 0x5f, 0x79, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x79, 0x75, 0x59, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x66, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x46, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x66, 0x65, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x46, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x69, 0x5f, 0x66, 0x65, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x69, 0x46, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x70, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x70, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x11, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x5f, 0x66, 0x65, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65,
	0x44, 0x69, 0x46, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x44, 0x65,
	0x61, 0x6c, 0x22, 0x81, 0x02, 0x0a, 0x0f, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49,
	0x53, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x66, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x66, 0x61, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0f,
	0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x0b, 0x73, 0x74, 0x5f, 0x67,
	0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x13, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x7a, 0x68, 0x75, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x7a, 0x68, 0x75, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a,
	0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a,
	0x03, 0x67, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x5f, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x72,
	0x63, 0x6a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x72, 0x63, 0x6a, 0x12, 0x22,
	0x0a, 0x0d, 0x7a, 0x68, 0x75, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x7a, 0x68, 0x75, 0x43, 0x6c, 0x75, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e,
	0x43, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x5f,
	0x63, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x79, 0x43, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0xa8, 0x04, 0x0a, 0x0c, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x52, 0x08, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x4a, 0x6f, 0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xaf, 0x02,
	0x0a, 0x14, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x75, 0x74, 0x6f, 0x48, 0x75, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x5f, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x22,
	0xc5, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x36,
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x09, 0x72, 0x6f, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22,
	0xa1, 0x03, 0x0a, 0x0c, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x43, 0x4c, 0x55, 0x42, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x72, 0x76, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x08, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x69, 0x6e, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x77, 0x61, 0x6e, 0x66, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x77, 0x61, 0x6e, 0x66, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x73, 0x74, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xab, 0x01, 0x0a, 0x0d, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x39,
	0x0a, 0x12, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6a, 0x0a, 0x0e, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xac, 0x02, 0x0a,
	0x0d, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x55, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x69,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x0c,
	0x74, 0x75, 0x6f, 0x5f, 0x79, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x74, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x64, 0x0a, 0x0d, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x75, 0x6f, 0x5f, 0x79, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xea, 0x02, 0x0a, 0x0d, 0x45, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x52,
	0x56, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x52, 0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x10, 0x64, 0x12, 0x11, 0x0a, 0x0c,
	0x53, 0x52, 0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0xc8, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xac,
	0x02, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x90, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x53,
	0x32, 0x53, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0xf4, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x52,
	0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0xd8, 0x04, 0x12, 0x11, 0x0a, 0x0c,
	0x53, 0x52, 0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xbc, 0x05, 0x12,
	0x16, 0x0a, 0x11, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x4f, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x10, 0xa0, 0x06, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x52, 0x56, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0xe8, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x52, 0x56,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0xd0, 0x0f, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x52,
	0x56, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xb8, 0x17, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x52, 0x56,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x10, 0xf0, 0x2e, 0x12, 0x1b, 0x0a, 0x16, 0x5f, 0x53, 0x52, 0x56, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x10,
	0xf1, 0x2e, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x52, 0x56, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53,
	0x45, 0x4c, 0x46, 0x10, 0x90, 0x35, 0x12, 0x17, 0x0a, 0x12, 0x5f, 0x53, 0x52, 0x56, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x10, 0xf4, 0x4e, 0x12,
	0x14, 0x0a, 0x0f, 0x5f, 0x53, 0x52, 0x56, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x4b,
	0x45, 0x52, 0x10, 0xe0, 0x5d, 0x2a, 0x61, 0x0a, 0x0b, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4a, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x44, 0x5a, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x44, 0x4b,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x48, 0x41, 0x42, 0x10, 0x03, 0x2a, 0xb4, 0x0b, 0x0a, 0x0b, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x10,
	0xe8, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f,
	0x46, 0x55, 0x5f, 0x58, 0x49, 0x4e, 0x10, 0xe9, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x53, 0x49, 0x5f, 0x43, 0x48, 0x55, 0x41, 0x4e, 0x10,
	0xea, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f,
	0x42, 0x41, 0x4f, 0x5f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xeb, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x4b, 0x4f,
	0x55, 0x10, 0xec, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x4a, 0x5f, 0x42, 0x41, 0x49, 0x5f, 0x43, 0x48, 0x45, 0x4e, 0x47, 0x10, 0xed, 0x07, 0x12, 0x19,
	0x0a, 0x14, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x10, 0xee, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x53, 0x48, 0x55, 0x41, 0x4e, 0x47, 0x5f, 0x59, 0x41,
	0x5f, 0x53, 0x48, 0x41, 0x4e, 0x10, 0xef, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4d, 0x55, 0x5f, 0x44, 0x41, 0x4e, 0x5f, 0x4a, 0x49, 0x41,
	0x4e, 0x47, 0x10, 0xf0, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f,
	0x4d, 0x4a, 0x5f, 0x50, 0x41, 0x4e, 0x5f, 0x4a, 0x49, 0x4e, 0x10, 0xf1, 0x07, 0x12, 0x17, 0x0a,
	0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x54, 0x49, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0xf2, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x4a, 0x5f, 0x5a, 0x48, 0x41, 0x4f, 0x5f, 0x44, 0x4f, 0x4e, 0x47, 0x10, 0xf3, 0x07,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x53, 0x4f,
	0x4e, 0x47, 0x5f, 0x59, 0x55, 0x41, 0x4e, 0x10, 0xf4, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x44, 0x41, 0x5f, 0x51, 0x49, 0x4e, 0x47, 0x10,
	0xf5, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f,
	0x4a, 0x49, 0x4e, 0x5f, 0x5a, 0x48, 0x4f, 0x55, 0x10, 0xfb, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4a, 0x49, 0x5f, 0x58, 0x49, 0x10, 0xfc,
	0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x54,
	0x41, 0x49, 0x5f, 0x4c, 0x41, 0x49, 0x10, 0xfd, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x51, 0x51, 0x48, 0x41, 0x45, 0x52, 0x10, 0xfe, 0x07,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4a, 0x49,
	0x41, 0x4f, 0x5f, 0x5a, 0x55, 0x4f, 0x10, 0xff, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x53, 0x55, 0x49, 0x5f, 0x48, 0x55, 0x41, 0x10, 0x80,
	0x08, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x44,
	0x49, 0x41, 0x4f, 0x5f, 0x42, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x4e, 0x10, 0x81, 0x08, 0x12,
	0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x45, 0x49,
	0x5f, 0x53, 0x48, 0x41, 0x4e, 0x10, 0x82, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x41, 0x49, 0x5f, 0x4d, 0x41, 0x4e, 0x10, 0x83, 0x08,
	0x12, 0x18, 0x0a, 0x13, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x55,
	0x5f, 0x4c, 0x55, 0x5f, 0x44, 0x41, 0x4f, 0x10, 0x84, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x41, 0x5f, 0x45, 0x52, 0x5f, 0x42, 0x49,
	0x4e, 0x10, 0x85, 0x08, 0x12, 0x18, 0x0a, 0x13, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x4a, 0x5f, 0x51, 0x49, 0x5f, 0x54, 0x41, 0x49, 0x5f, 0x48, 0x45, 0x10, 0x86, 0x08, 0x12, 0x18,
	0x0a, 0x13, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4a, 0x49, 0x41, 0x5f,
	0x4d, 0x55, 0x5f, 0x53, 0x49, 0x10, 0x8b, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4b, 0x41, 0x49, 0x5f, 0x59, 0x55, 0x41, 0x4e, 0x10, 0x8f,
	0x08, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x58,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x4e, 0x47, 0x10, 0x90, 0x08, 0x12, 0x16,
	0x0a, 0x11, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x44, 0x41, 0x5f, 0x4c,
	0x49, 0x41, 0x4e, 0x10, 0xc1, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x55, 0x5f, 0x42, 0x45, 0x49, 0x10, 0xb0, 0x09, 0x12, 0x17, 0x0a,
	0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4a, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x45, 0x4e, 0x10, 0xb1, 0x09, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x4a, 0x5f, 0x58, 0x58, 0x58, 0x10, 0xd0, 0x0f, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x45, 0x5f, 0x42, 0x45, 0x49, 0x10, 0xd1,
	0x0f, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x44,
	0x41, 0x5f, 0x4c, 0x49, 0x41, 0x4e, 0x5f, 0x54, 0x44, 0x48, 0x10, 0xd2, 0x0f, 0x12, 0x19, 0x0a,
	0x14, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x44, 0x41, 0x5f, 0x4c, 0x49,
	0x41, 0x4e, 0x5f, 0x48, 0x5a, 0x10, 0xd3, 0x0f, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x44, 0x41, 0x5f, 0x4c, 0x49, 0x41, 0x4e, 0x5f, 0x44, 0x57,
	0x10, 0xd4, 0x0f, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a,
	0x5f, 0x4b, 0x41, 0x49, 0x5f, 0x59, 0x55, 0x41, 0x4e, 0x5f, 0x43, 0x4a, 0x10, 0xd5, 0x0f, 0x12,
	0x1a, 0x0a, 0x15, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4b, 0x41, 0x49,
	0x5f, 0x59, 0x55, 0x41, 0x4e, 0x5f, 0x44, 0x53, 0x10, 0xd6, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x45,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x5a, 0x48, 0x41, 0x4e, 0x47, 0x5f, 0x57,
	0x55, 0x10, 0xd7, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x4a, 0x5f, 0x4d, 0x4f, 0x5f, 0x51, 0x49, 0x10, 0xd8, 0x0f, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x58, 0x59, 0x5f, 0x4b, 0x57, 0x58, 0x10, 0xd9,
	0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x4a,
	0x4d, 0x5f, 0x48, 0x48, 0x10, 0xda, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x59, 0x49, 0x5f, 0x43, 0x48, 0x45, 0x4e, 0x47, 0x10, 0xdb, 0x0f,
	0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x53, 0x55,
	0x49, 0x5f, 0x5a, 0x48, 0x4f, 0x55, 0x10, 0xdc, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x58, 0x49, 0x41, 0x4f, 0x5f, 0x47, 0x41, 0x4e, 0x10,
	0xdd, 0x0f, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f,
	0x53, 0x48, 0x49, 0x5f, 0x59, 0x41, 0x4e, 0x10, 0xde, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x53, 0x5f, 0x48, 0x48, 0x10, 0xe4, 0x0f,
	0x12, 0x14, 0x0a, 0x0f, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x48, 0x53,
	0x5f, 0x45, 0x53, 0x10, 0xe5, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x4a, 0x5f, 0x59, 0x4e, 0x5f, 0x5a, 0x54, 0x10, 0xef, 0x0f, 0x12, 0x14, 0x0a, 0x0f,
	0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x59, 0x4e, 0x5f, 0x51, 0x4a, 0x10,
	0xf0, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f,
	0x59, 0x4e, 0x5f, 0x57, 0x53, 0x10, 0xf1, 0x0f, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x59, 0x4e, 0x5f, 0x48, 0x48, 0x10, 0xf2, 0x0f, 0x12, 0x12,
	0x0a, 0x0d, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4a, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0xbf, 0x3e, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x44, 0x44, 0x5a, 0x10, 0xc0, 0x3e, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x50, 0x44, 0x4b, 0x10, 0xca, 0x3e,
	0x12, 0x16, 0x0a, 0x11, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x4b, 0x45, 0x52,
	0x5f, 0x4d, 0x48, 0x41, 0x42, 0x10, 0xd4, 0x3e, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x8f, 0x4e, 0x2a,
	0x3c, 0x0a, 0x0d, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x77, 0x0a,
	0x0e, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x52, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x54, 0x5f, 0x43, 0x4c,
	0x55, 0x42, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x52, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x06, 0x2a, 0xe5, 0x01, 0x0a, 0x13, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x4d, 0x49, 0x53, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x52, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x54, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x52, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x4f, 0x50, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x52, 0x54,
	0x5f, 0x4c, 0x4a, 0x54, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x08,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x54,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x0a, 0x2a, 0x62,
	0x0a, 0x0f, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x57, 0x48,
	0x4f, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x42, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x42, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x4b, 0x42, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x42,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x42, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x42, 0x5f, 0x53, 0x59, 0x53,
	0x10, 0x05, 0x2a, 0x38, 0x0a, 0x0c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x58, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0d,
	0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x54, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54,
	0x5f, 0x46, 0x55, 0x4b, 0x41, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x0e, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x4d, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x14, 0x2a,
	0x36, 0x0a, 0x0a, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0d, 0x0a,
	0x09, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x41, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x4e,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x26, 0x0a, 0x0c, 0x45, 0x5f, 0x56, 0x45, 0x4e,
	0x55, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x01, 0x42,
	0x1f, 0x5a, 0x1d, 0x2f, 0x6e, 0x65, 0x77, 0x2d, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ra_platform_proto_rawDescOnce sync.Once
	file_ra_platform_proto_rawDescData = file_ra_platform_proto_rawDesc
)

func file_ra_platform_proto_rawDescGZIP() []byte {
	file_ra_platform_proto_rawDescOnce.Do(func() {
		file_ra_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_ra_platform_proto_rawDescData)
	})
	return file_ra_platform_proto_rawDescData
}

var file_ra_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_ra_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_ra_platform_proto_goTypes = []any{
	(E_Server_Type)(0),        // 0: new_chess.E_Server_Type
	(E_GAME_TYPE)(0),          // 1: new_chess.E_GAME_TYPE
	(E_GAME_KIND)(0),          // 2: new_chess.E_GAME_KIND
	(E_ROOM_STATUS)(0),        // 3: new_chess.E_ROOM_STATUS
	(CLUB_ROOM_TYPE)(0),       // 4: new_chess.CLUB_ROOM_TYPE
	(E_DISMISS_ROOM_TYPE)(0),  // 5: new_chess.E_DISMISS_ROOM_TYPE
	(E_KICKED_BY_WHO)(0),      // 6: new_chess.E_KICKED_BY_WHO
	(E_MATCH_TYPE)(0),         // 7: new_chess.E_MATCH_TYPE
	(E_REWARD_TYPE)(0),        // 8: new_chess.E_REWARD_TYPE
	(E_PLAYER_MATCH)(0),       // 9: new_chess.E_PLAYER_MATCH
	(E_PAY_TYPE)(0),           // 10: new_chess.E_PAY_TYPE
	(E_VENUE_MODE)(0),         // 11: new_chess.E_VENUE_MODE
	(*MSG_REQ)(nil),           // 12: new_chess.MSG_REQ
	(*MSG_RESP)(nil),          // 13: new_chess.MSG_RESP
	(*GameUser)(nil),          // 14: new_chess.GameUser
	(*StCommonRuleDesc)(nil),  // 15: new_chess.st_common_rule_desc
	(*StDismissDesc)(nil),     // 16: new_chess.st_dismiss_desc
	(*StGameRule)(nil),        // 17: new_chess.st_game_rule
	(*StGameingDesc)(nil),     // 18: new_chess.st_gameing_desc
	(*StGpsInfo)(nil),         // 19: new_chess.st_gps_info
	(*StCommonUserDesc)(nil),  // 20: new_chess.st_common_user_desc
	(*StRoomDesc)(nil),        // 21: new_chess.st_room_desc
	(*StGameingUserDesc)(nil), // 22: new_chess.st_gameing_user_desc
	(*StRoomUser)(nil),        // 23: new_chess.st_room_user
	(*StRoomInfo)(nil),        // 24: new_chess.st_room_info
	(*StRoomType)(nil),        // 25: new_chess.st_room_type
	(*StMatchInfo)(nil),       // 26: new_chess.st_match_info
	(*StGameKindInfo)(nil),    // 27: new_chess.st_game_kind_info
	(*StUserMatch)(nil),       // 28: new_chess.st_user_match
	(*StUserGoldMatch)(nil),   // 29: new_chess.st_user_gold_match
	(*StRewardData)(nil),      // 30: new_chess.st_reward_data
	(*StPlayerGameInfo)(nil),  // 31: new_chess.st_player_game_info
	(*StBoardData)(nil),       // 32: new_chess.st_board_data
	(*TuoYanInfo)(nil),        // 33: new_chess.tuo_yan_info
	(*StDelayData)(nil),       // 34: new_chess.st_delay_data
}
var file_ra_platform_proto_depIdxs = []int32{
	10, // 0: new_chess.st_common_rule_desc.pay_rule:type_name -> new_chess.E_PAY_TYPE
	5,  // 1: new_chess.st_dismiss_desc.dismiss_type:type_name -> new_chess.E_DISMISS_ROOM_TYPE
	15, // 2: new_chess.st_game_rule.common_rule:type_name -> new_chess.st_common_rule_desc
	19, // 3: new_chess.st_common_user_desc.gps:type_name -> new_chess.st_gps_info
	3,  // 4: new_chess.st_room_desc.e_gameing:type_name -> new_chess.E_ROOM_STATUS
	17, // 5: new_chess.st_room_desc.game_rule:type_name -> new_chess.st_game_rule
	18, // 6: new_chess.st_room_desc.gameing_desc:type_name -> new_chess.st_gameing_desc
	26, // 7: new_chess.st_room_desc.match_info:type_name -> new_chess.st_match_info
	14, // 8: new_chess.st_room_user.game_user:type_name -> new_chess.GameUser
	20, // 9: new_chess.st_room_user.common_user:type_name -> new_chess.st_common_user_desc
	22, // 10: new_chess.st_room_user.gameing_user:type_name -> new_chess.st_gameing_user_desc
	21, // 11: new_chess.st_room_info.room_desc:type_name -> new_chess.st_room_desc
	23, // 12: new_chess.st_room_info.room_users:type_name -> new_chess.st_room_user
	14, // 13: new_chess.st_room_info.watch_users:type_name -> new_chess.GameUser
	4,  // 14: new_chess.st_room_type.room_type:type_name -> new_chess.CLUB_ROOM_TYPE
	3,  // 15: new_chess.st_room_type.e_gameing:type_name -> new_chess.E_ROOM_STATUS
	26, // 16: new_chess.st_room_type.match_info:type_name -> new_chess.st_match_info
	7,  // 17: new_chess.st_match_info.match_type:type_name -> new_chess.E_MATCH_TYPE
	1,  // 18: new_chess.st_game_kind_info.game_type:type_name -> new_chess.E_GAME_TYPE
	8,  // 19: new_chess.st_reward_data.reward_type:type_name -> new_chess.E_REWARD_TYPE
	11, // 20: new_chess.st_board_data.mode:type_name -> new_chess.E_VENUE_MODE
	33, // 21: new_chess.st_delay_data.seat_list:type_name -> new_chess.tuo_yan_info
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_ra_platform_proto_init() }
func file_ra_platform_proto_init() {
	if File_ra_platform_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ra_platform_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ra_platform_proto_goTypes,
		DependencyIndexes: file_ra_platform_proto_depIdxs,
		EnumInfos:         file_ra_platform_proto_enumTypes,
		MessageInfos:      file_ra_platform_proto_msgTypes,
	}.Build()
	File_ra_platform_proto = out.File
	file_ra_platform_proto_rawDesc = nil
	file_ra_platform_proto_goTypes = nil
	file_ra_platform_proto_depIdxs = nil
}
