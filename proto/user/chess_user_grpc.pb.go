// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: chess_user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserServer_SmsSendLogin_FullMethodName           = "/new_chess.UserServer/SmsSendLogin"
	UserServer_UserLogin_FullMethodName              = "/new_chess.UserServer/UserLogin"
	UserServer_UserRegister_FullMethodName           = "/new_chess.UserServer/UserRegister"
	UserServer_OpenIDBind_FullMethodName             = "/new_chess.UserServer/OpenIDBind"
	UserServer_UserUploadGeographic_FullMethodName   = "/new_chess.UserServer/UserUploadGeographic"
	UserServer_FeedbackUpload_FullMethodName         = "/new_chess.UserServer/FeedbackUpload"
	UserServer_GetUserPhonesByUidList_FullMethodName = "/new_chess.UserServer/GetUserPhonesByUidList"
	UserServer_UpdateUserInfo_FullMethodName         = "/new_chess.UserServer/UpdateUserInfo"
	UserServer_GetUserInfo_FullMethodName            = "/new_chess.UserServer/GetUserInfo"
	UserServer_BatchGetUserInfo_FullMethodName       = "/new_chess.UserServer/BatchGetUserInfo"
	UserServer_UserCertification_FullMethodName      = "/new_chess.UserServer/UserCertification"
	UserServer_AddOrgTree_FullMethodName             = "/new_chess.UserServer/AddOrgTree"
	UserServer_SetOrgTree_FullMethodName             = "/new_chess.UserServer/SetOrgTree"
	UserServer_DelOrgTree_FullMethodName             = "/new_chess.UserServer/DelOrgTree"
	UserServer_GetOrgTree_FullMethodName             = "/new_chess.UserServer/GetOrgTree"
	UserServer_GetOrgTreeChildren_FullMethodName     = "/new_chess.UserServer/GetOrgTreeChildren"
	UserServer_GetOrgTreeUser_FullMethodName         = "/new_chess.UserServer/GetOrgTreeUser"
	UserServer_BindOrgTreeUser_FullMethodName        = "/new_chess.UserServer/BindOrgTreeUser"
	UserServer_UnBindOrgTreeUser_FullMethodName      = "/new_chess.UserServer/UnBindOrgTreeUser"
)

// UserServerClient is the client API for UserServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServerClient interface {
	SmsSendLogin(ctx context.Context, in *SMSSendLoginReq, opts ...grpc.CallOption) (*SMSSendLoginResp, error)
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	OpenIDBind(ctx context.Context, in *OpenIDBindReq, opts ...grpc.CallOption) (*OpenIDBindResp, error)
	UserUploadGeographic(ctx context.Context, in *UserUploadGeographicReq, opts ...grpc.CallOption) (*UserUploadGeographicResp, error)
	FeedbackUpload(ctx context.Context, in *FeedbackUploadReq, opts ...grpc.CallOption) (*FeedbackUploadResp, error)
	GetUserPhonesByUidList(ctx context.Context, in *GetUserPhonesReq, opts ...grpc.CallOption) (*GetUserPhonesResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoReq, opts ...grpc.CallOption) (*BatchGetUserInfoResp, error)
	UserCertification(ctx context.Context, in *UserCertificationReq, opts ...grpc.CallOption) (*UserCertificationResp, error)
	AddOrgTree(ctx context.Context, in *CreateOrganizationReq, opts ...grpc.CallOption) (*CreateOrganizationResp, error)
	SetOrgTree(ctx context.Context, in *UpdateOrganizationReq, opts ...grpc.CallOption) (*UpdateOrganizationResp, error)
	DelOrgTree(ctx context.Context, in *DeleteOrganizationReq, opts ...grpc.CallOption) (*DeleteOrganizationResp, error)
	GetOrgTree(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error)
	GetOrgTreeChildren(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationChildrenResp, error)
	GetOrgTreeUser(ctx context.Context, in *GetOrgTreeUserReq, opts ...grpc.CallOption) (*GetOrgTreeUserResp, error)
	BindOrgTreeUser(ctx context.Context, in *BindUserToOrganizationReq, opts ...grpc.CallOption) (*BindUserToOrganizationResp, error)
	UnBindOrgTreeUser(ctx context.Context, in *UnbindUserToOrganizationReq, opts ...grpc.CallOption) (*UnbindUserToOrganizationResp, error)
}

type userServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServerClient(cc grpc.ClientConnInterface) UserServerClient {
	return &userServerClient{cc}
}

func (c *userServerClient) SmsSendLogin(ctx context.Context, in *SMSSendLoginReq, opts ...grpc.CallOption) (*SMSSendLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMSSendLoginResp)
	err := c.cc.Invoke(ctx, UserServer_SmsSendLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UserServer_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, UserServer_UserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) OpenIDBind(ctx context.Context, in *OpenIDBindReq, opts ...grpc.CallOption) (*OpenIDBindResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenIDBindResp)
	err := c.cc.Invoke(ctx, UserServer_OpenIDBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserUploadGeographic(ctx context.Context, in *UserUploadGeographicReq, opts ...grpc.CallOption) (*UserUploadGeographicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserUploadGeographicResp)
	err := c.cc.Invoke(ctx, UserServer_UserUploadGeographic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) FeedbackUpload(ctx context.Context, in *FeedbackUploadReq, opts ...grpc.CallOption) (*FeedbackUploadResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackUploadResp)
	err := c.cc.Invoke(ctx, UserServer_FeedbackUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserPhonesByUidList(ctx context.Context, in *GetUserPhonesReq, opts ...grpc.CallOption) (*GetUserPhonesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPhonesResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserPhonesByUidList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, UserServer_UpdateUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoReq, opts ...grpc.CallOption) (*BatchGetUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserInfoResp)
	err := c.cc.Invoke(ctx, UserServer_BatchGetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserCertification(ctx context.Context, in *UserCertificationReq, opts ...grpc.CallOption) (*UserCertificationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCertificationResp)
	err := c.cc.Invoke(ctx, UserServer_UserCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddOrgTree(ctx context.Context, in *CreateOrganizationReq, opts ...grpc.CallOption) (*CreateOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_AddOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) SetOrgTree(ctx context.Context, in *UpdateOrganizationReq, opts ...grpc.CallOption) (*UpdateOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_SetOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) DelOrgTree(ctx context.Context, in *DeleteOrganizationReq, opts ...grpc.CallOption) (*DeleteOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_DelOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTree(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTreeChildren(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationChildrenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationChildrenResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTreeChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTreeUser(ctx context.Context, in *GetOrgTreeUserReq, opts ...grpc.CallOption) (*GetOrgTreeUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgTreeUserResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTreeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) BindOrgTreeUser(ctx context.Context, in *BindUserToOrganizationReq, opts ...grpc.CallOption) (*BindUserToOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindUserToOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_BindOrgTreeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UnBindOrgTreeUser(ctx context.Context, in *UnbindUserToOrganizationReq, opts ...grpc.CallOption) (*UnbindUserToOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindUserToOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_UnBindOrgTreeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServerServer is the server API for UserServer service.
// All implementations must embed UnimplementedUserServerServer
// for forward compatibility
type UserServerServer interface {
	SmsSendLogin(context.Context, *SMSSendLoginReq) (*SMSSendLoginResp, error)
	UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error)
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	OpenIDBind(context.Context, *OpenIDBindReq) (*OpenIDBindResp, error)
	UserUploadGeographic(context.Context, *UserUploadGeographicReq) (*UserUploadGeographicResp, error)
	FeedbackUpload(context.Context, *FeedbackUploadReq) (*FeedbackUploadResp, error)
	GetUserPhonesByUidList(context.Context, *GetUserPhonesReq) (*GetUserPhonesResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	BatchGetUserInfo(context.Context, *BatchGetUserInfoReq) (*BatchGetUserInfoResp, error)
	UserCertification(context.Context, *UserCertificationReq) (*UserCertificationResp, error)
	AddOrgTree(context.Context, *CreateOrganizationReq) (*CreateOrganizationResp, error)
	SetOrgTree(context.Context, *UpdateOrganizationReq) (*UpdateOrganizationResp, error)
	DelOrgTree(context.Context, *DeleteOrganizationReq) (*DeleteOrganizationResp, error)
	GetOrgTree(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error)
	GetOrgTreeChildren(context.Context, *GetOrganizationReq) (*GetOrganizationChildrenResp, error)
	GetOrgTreeUser(context.Context, *GetOrgTreeUserReq) (*GetOrgTreeUserResp, error)
	BindOrgTreeUser(context.Context, *BindUserToOrganizationReq) (*BindUserToOrganizationResp, error)
	UnBindOrgTreeUser(context.Context, *UnbindUserToOrganizationReq) (*UnbindUserToOrganizationResp, error)
	mustEmbedUnimplementedUserServerServer()
}

// UnimplementedUserServerServer must be embedded to have forward compatible implementations.
type UnimplementedUserServerServer struct {
}

func (UnimplementedUserServerServer) SmsSendLogin(context.Context, *SMSSendLoginReq) (*SMSSendLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsSendLogin not implemented")
}
func (UnimplementedUserServerServer) UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServerServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServerServer) OpenIDBind(context.Context, *OpenIDBindReq) (*OpenIDBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenIDBind not implemented")
}
func (UnimplementedUserServerServer) UserUploadGeographic(context.Context, *UserUploadGeographicReq) (*UserUploadGeographicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploadGeographic not implemented")
}
func (UnimplementedUserServerServer) FeedbackUpload(context.Context, *FeedbackUploadReq) (*FeedbackUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedbackUpload not implemented")
}
func (UnimplementedUserServerServer) GetUserPhonesByUidList(context.Context, *GetUserPhonesReq) (*GetUserPhonesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPhonesByUidList not implemented")
}
func (UnimplementedUserServerServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServerServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServerServer) BatchGetUserInfo(context.Context, *BatchGetUserInfoReq) (*BatchGetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserInfo not implemented")
}
func (UnimplementedUserServerServer) UserCertification(context.Context, *UserCertificationReq) (*UserCertificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCertification not implemented")
}
func (UnimplementedUserServerServer) AddOrgTree(context.Context, *CreateOrganizationReq) (*CreateOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgTree not implemented")
}
func (UnimplementedUserServerServer) SetOrgTree(context.Context, *UpdateOrganizationReq) (*UpdateOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgTree not implemented")
}
func (UnimplementedUserServerServer) DelOrgTree(context.Context, *DeleteOrganizationReq) (*DeleteOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrgTree not implemented")
}
func (UnimplementedUserServerServer) GetOrgTree(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTree not implemented")
}
func (UnimplementedUserServerServer) GetOrgTreeChildren(context.Context, *GetOrganizationReq) (*GetOrganizationChildrenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTreeChildren not implemented")
}
func (UnimplementedUserServerServer) GetOrgTreeUser(context.Context, *GetOrgTreeUserReq) (*GetOrgTreeUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTreeUser not implemented")
}
func (UnimplementedUserServerServer) BindOrgTreeUser(context.Context, *BindUserToOrganizationReq) (*BindUserToOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOrgTreeUser not implemented")
}
func (UnimplementedUserServerServer) UnBindOrgTreeUser(context.Context, *UnbindUserToOrganizationReq) (*UnbindUserToOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindOrgTreeUser not implemented")
}
func (UnimplementedUserServerServer) mustEmbedUnimplementedUserServerServer() {}

// UnsafeUserServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServerServer will
// result in compilation errors.
type UnsafeUserServerServer interface {
	mustEmbedUnimplementedUserServerServer()
}

func RegisterUserServerServer(s grpc.ServiceRegistrar, srv UserServerServer) {
	s.RegisterService(&UserServer_ServiceDesc, srv)
}

func _UserServer_SmsSendLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSSendLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).SmsSendLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_SmsSendLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).SmsSendLogin(ctx, req.(*SMSSendLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserLogin(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_OpenIDBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIDBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).OpenIDBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_OpenIDBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).OpenIDBind(ctx, req.(*OpenIDBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserUploadGeographic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUploadGeographicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserUploadGeographic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserUploadGeographic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserUploadGeographic(ctx, req.(*UserUploadGeographicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_FeedbackUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).FeedbackUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_FeedbackUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).FeedbackUpload(ctx, req.(*FeedbackUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserPhonesByUidList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPhonesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserPhonesByUidList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserPhonesByUidList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserPhonesByUidList(ctx, req.(*GetUserPhonesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_BatchGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).BatchGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_BatchGetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).BatchGetUserInfo(ctx, req.(*BatchGetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCertificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserCertification(ctx, req.(*UserCertificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddOrgTree(ctx, req.(*CreateOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_SetOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).SetOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_SetOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).SetOrgTree(ctx, req.(*UpdateOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_DelOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).DelOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_DelOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).DelOrgTree(ctx, req.(*DeleteOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTree(ctx, req.(*GetOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTreeChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTreeChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTreeChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTreeChildren(ctx, req.(*GetOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTreeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgTreeUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTreeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTreeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTreeUser(ctx, req.(*GetOrgTreeUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_BindOrgTreeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserToOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).BindOrgTreeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_BindOrgTreeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).BindOrgTreeUser(ctx, req.(*BindUserToOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UnBindOrgTreeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserToOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UnBindOrgTreeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UnBindOrgTreeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UnBindOrgTreeUser(ctx, req.(*UnbindUserToOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServer_ServiceDesc is the grpc.ServiceDesc for UserServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "new_chess.UserServer",
	HandlerType: (*UserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SmsSendLogin",
			Handler:    _UserServer_SmsSendLogin_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserServer_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _UserServer_UserRegister_Handler,
		},
		{
			MethodName: "OpenIDBind",
			Handler:    _UserServer_OpenIDBind_Handler,
		},
		{
			MethodName: "UserUploadGeographic",
			Handler:    _UserServer_UserUploadGeographic_Handler,
		},
		{
			MethodName: "FeedbackUpload",
			Handler:    _UserServer_FeedbackUpload_Handler,
		},
		{
			MethodName: "GetUserPhonesByUidList",
			Handler:    _UserServer_GetUserPhonesByUidList_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserServer_UpdateUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserServer_GetUserInfo_Handler,
		},
		{
			MethodName: "BatchGetUserInfo",
			Handler:    _UserServer_BatchGetUserInfo_Handler,
		},
		{
			MethodName: "UserCertification",
			Handler:    _UserServer_UserCertification_Handler,
		},
		{
			MethodName: "AddOrgTree",
			Handler:    _UserServer_AddOrgTree_Handler,
		},
		{
			MethodName: "SetOrgTree",
			Handler:    _UserServer_SetOrgTree_Handler,
		},
		{
			MethodName: "DelOrgTree",
			Handler:    _UserServer_DelOrgTree_Handler,
		},
		{
			MethodName: "GetOrgTree",
			Handler:    _UserServer_GetOrgTree_Handler,
		},
		{
			MethodName: "GetOrgTreeChildren",
			Handler:    _UserServer_GetOrgTreeChildren_Handler,
		},
		{
			MethodName: "GetOrgTreeUser",
			Handler:    _UserServer_GetOrgTreeUser_Handler,
		},
		{
			MethodName: "BindOrgTreeUser",
			Handler:    _UserServer_BindOrgTreeUser_Handler,
		},
		{
			MethodName: "UnBindOrgTreeUser",
			Handler:    _UserServer_UnBindOrgTreeUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chess_user.proto",
}
