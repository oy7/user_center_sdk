// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: chess_user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserServer_AddPromotionModel_FullMethodName         = "/new_chess.UserServer/AddPromotionModel"
	UserServer_UpdatePromotionModel_FullMethodName      = "/new_chess.UserServer/UpdatePromotionModel"
	UserServer_AddPromotionRole_FullMethodName          = "/new_chess.UserServer/AddPromotionRole"
	UserServer_UpdatePromotionRole_FullMethodName       = "/new_chess.UserServer/UpdatePromotionRole"
	UserServer_AddPromotionRoleRatio_FullMethodName     = "/new_chess.UserServer/AddPromotionRoleRatio"
	UserServer_UpdatePromotionRoleRatio_FullMethodName  = "/new_chess.UserServer/UpdatePromotionRoleRatio"
	UserServer_AddBusinessModel_FullMethodName          = "/new_chess.UserServer/AddBusinessModel"
	UserServer_UpdateBusinessModel_FullMethodName       = "/new_chess.UserServer/UpdateBusinessModel"
	UserServer_AddBusinessModelRights_FullMethodName    = "/new_chess.UserServer/AddBusinessModelRights"
	UserServer_UpdateBusinessModelRights_FullMethodName = "/new_chess.UserServer/UpdateBusinessModelRights"
	UserServer_AddModel_FullMethodName                  = "/new_chess.UserServer/AddModel"
	UserServer_UpdateModel_FullMethodName               = "/new_chess.UserServer/UpdateModel"
	UserServer_AddMultistageModel_FullMethodName        = "/new_chess.UserServer/AddMultistageModel"
	UserServer_AddTemplateModel_FullMethodName          = "/new_chess.UserServer/AddTemplateModel"
	UserServer_GetMultistageModel_FullMethodName        = "/new_chess.UserServer/GetMultistageModel"
	UserServer_AddModelTemplate_FullMethodName          = "/new_chess.UserServer/AddModelTemplate"
	UserServer_GetModelTemplate_FullMethodName          = "/new_chess.UserServer/GetModelTemplate"
	UserServer_GetModelTemplateList_FullMethodName      = "/new_chess.UserServer/GetModelTemplateList"
	UserServer_GetModelTemplateGame_FullMethodName      = "/new_chess.UserServer/GetModelTemplateGame"
	UserServer_SmsSendLogin_FullMethodName              = "/new_chess.UserServer/SmsSendLogin"
	UserServer_UserLogin_FullMethodName                 = "/new_chess.UserServer/UserLogin"
	UserServer_UserRegister_FullMethodName              = "/new_chess.UserServer/UserRegister"
	UserServer_OpenIDBind_FullMethodName                = "/new_chess.UserServer/OpenIDBind"
	UserServer_UserUploadGeographic_FullMethodName      = "/new_chess.UserServer/UserUploadGeographic"
	UserServer_FeedbackUpload_FullMethodName            = "/new_chess.UserServer/FeedbackUpload"
	UserServer_GetUserPhonesByUidList_FullMethodName    = "/new_chess.UserServer/GetUserPhonesByUidList"
	UserServer_UpdateUserInfo_FullMethodName            = "/new_chess.UserServer/UpdateUserInfo"
	UserServer_GetUserInfo_FullMethodName               = "/new_chess.UserServer/GetUserInfo"
	UserServer_BatchGetUserInfo_FullMethodName          = "/new_chess.UserServer/BatchGetUserInfo"
	UserServer_GetUserIdByPhone_FullMethodName          = "/new_chess.UserServer/GetUserIdByPhone"
	UserServer_UserCertification_FullMethodName         = "/new_chess.UserServer/UserCertification"
	UserServer_AddOrgTree_FullMethodName                = "/new_chess.UserServer/AddOrgTree"
	UserServer_SetOrgTree_FullMethodName                = "/new_chess.UserServer/SetOrgTree"
	UserServer_DelOrgTree_FullMethodName                = "/new_chess.UserServer/DelOrgTree"
	UserServer_GetOrgTree_FullMethodName                = "/new_chess.UserServer/GetOrgTree"
	UserServer_GetOrgTreeChildren_FullMethodName        = "/new_chess.UserServer/GetOrgTreeChildren"
	UserServer_GetOrgTreeUser_FullMethodName            = "/new_chess.UserServer/GetOrgTreeUser"
	UserServer_GetOrgTreePerm_FullMethodName            = "/new_chess.UserServer/GetOrgTreePerm"
	UserServer_GetOrgTreeBusiness_FullMethodName        = "/new_chess.UserServer/GetOrgTreeBusiness"
	UserServer_BindOrgTreeUser_FullMethodName           = "/new_chess.UserServer/BindOrgTreeUser"
	UserServer_UnBindOrgTreeUser_FullMethodName         = "/new_chess.UserServer/UnBindOrgTreeUser"
	UserServer_UserSearch_FullMethodName                = "/new_chess.UserServer/UserSearch"
	UserServer_GetUserConfig_FullMethodName             = "/new_chess.UserServer/GetUserConfig"
	UserServer_SetUserConfig_FullMethodName             = "/new_chess.UserServer/SetUserConfig"
	UserServer_GetUserRoleList_FullMethodName           = "/new_chess.UserServer/GetUserRoleList"
	UserServer_GetUserSwitchConfig_FullMethodName       = "/new_chess.UserServer/GetUserSwitchConfig"
	UserServer_PhoneBind_FullMethodName                 = "/new_chess.UserServer/PhoneBind"
	UserServer_AgentUpdateUserPassword_FullMethodName   = "/new_chess.UserServer/AgentUpdateUserPassword"
	UserServer_BatchGetUserDevice_FullMethodName        = "/new_chess.UserServer/BatchGetUserDevice"
	UserServer_UserChatRiskCheck_FullMethodName         = "/new_chess.UserServer/UserChatRiskCheck"
	UserServer_GetUserRiskInfo_FullMethodName           = "/new_chess.UserServer/GetUserRiskInfo"
	UserServer_UserBan_FullMethodName                   = "/new_chess.UserServer/UserBan"
	UserServer_UserUnBan_FullMethodName                 = "/new_chess.UserServer/UserUnBan"
)

// UserServerClient is the client API for UserServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServerClient interface {
	// ==========================业务模式相关==========================//
	AddPromotionModel(ctx context.Context, in *AddPromotionModelReq, opts ...grpc.CallOption) (*AddPromotionModelResp, error)
	UpdatePromotionModel(ctx context.Context, in *UpdatePromotionModelReq, opts ...grpc.CallOption) (*UpdatePromotionModelResp, error)
	AddPromotionRole(ctx context.Context, in *AddPromotionRoleReq, opts ...grpc.CallOption) (*AddPromotionRoleResp, error)
	UpdatePromotionRole(ctx context.Context, in *UpdatePromotionRoleReq, opts ...grpc.CallOption) (*UpdatePromotionRoleResp, error)
	AddPromotionRoleRatio(ctx context.Context, in *AddPromotionRoleRatioReq, opts ...grpc.CallOption) (*AddPromotionRoleRatioResp, error)
	UpdatePromotionRoleRatio(ctx context.Context, in *UpdatePromotionRoleRatioReq, opts ...grpc.CallOption) (*UpdatePromotionRoleRatioResp, error)
	AddBusinessModel(ctx context.Context, in *AddBusinessModelReq, opts ...grpc.CallOption) (*AddBusinessModelResp, error)
	UpdateBusinessModel(ctx context.Context, in *UpdateBusinessModelReq, opts ...grpc.CallOption) (*UpdateBusinessModelResp, error)
	AddBusinessModelRights(ctx context.Context, in *AddBusinessModelRightsReq, opts ...grpc.CallOption) (*AddBusinessModelRightsResp, error)
	UpdateBusinessModelRights(ctx context.Context, in *UpdateBusinessModelRightsReq, opts ...grpc.CallOption) (*UpdateBusinessModelRightsResp, error)
	AddModel(ctx context.Context, in *AddModelReq, opts ...grpc.CallOption) (*AddModelResp, error)
	UpdateModel(ctx context.Context, in *UpdateModelReq, opts ...grpc.CallOption) (*UpdateModelResp, error)
	AddMultistageModel(ctx context.Context, in *AddMultistageModelReq, opts ...grpc.CallOption) (*AddMultistageModelResp, error)
	AddTemplateModel(ctx context.Context, in *AddTemplateModelReq, opts ...grpc.CallOption) (*AddTemplateModelResp, error)
	GetMultistageModel(ctx context.Context, in *GetMultistageModelReq, opts ...grpc.CallOption) (*GetMultistageModelResp, error)
	AddModelTemplate(ctx context.Context, in *AddModelTemplateReq, opts ...grpc.CallOption) (*AddModelTemplateResp, error)
	GetModelTemplate(ctx context.Context, in *GetModelTemplateReq, opts ...grpc.CallOption) (*GetModelTemplateResp, error)
	GetModelTemplateList(ctx context.Context, in *GetModelTemplateListReq, opts ...grpc.CallOption) (*GetModelTemplateListResp, error)
	GetModelTemplateGame(ctx context.Context, in *GetModelTemplateGameReq, opts ...grpc.CallOption) (*GetModelTemplateGameResp, error)
	// ==========================用户服务相关==========================//
	SmsSendLogin(ctx context.Context, in *SMSSendLoginReq, opts ...grpc.CallOption) (*SMSSendLoginResp, error)
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	OpenIDBind(ctx context.Context, in *OpenIDBindReq, opts ...grpc.CallOption) (*OpenIDBindResp, error)
	UserUploadGeographic(ctx context.Context, in *UserUploadGeographicReq, opts ...grpc.CallOption) (*UserUploadGeographicResp, error)
	FeedbackUpload(ctx context.Context, in *FeedbackUploadReq, opts ...grpc.CallOption) (*FeedbackUploadResp, error)
	GetUserPhonesByUidList(ctx context.Context, in *GetUserPhonesReq, opts ...grpc.CallOption) (*GetUserPhonesResp, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoReq, opts ...grpc.CallOption) (*BatchGetUserInfoResp, error)
	GetUserIdByPhone(ctx context.Context, in *GetUserIdByPhoneReq, opts ...grpc.CallOption) (*GetUserIdByPhoneResp, error)
	UserCertification(ctx context.Context, in *UserCertificationReq, opts ...grpc.CallOption) (*UserCertificationResp, error)
	AddOrgTree(ctx context.Context, in *CreateOrganizationReq, opts ...grpc.CallOption) (*CreateOrganizationResp, error)
	SetOrgTree(ctx context.Context, in *UpdateOrganizationReq, opts ...grpc.CallOption) (*UpdateOrganizationResp, error)
	DelOrgTree(ctx context.Context, in *DeleteOrganizationReq, opts ...grpc.CallOption) (*DeleteOrganizationResp, error)
	GetOrgTree(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error)
	GetOrgTreeChildren(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationChildrenResp, error)
	GetOrgTreeUser(ctx context.Context, in *GetOrgTreeUserReq, opts ...grpc.CallOption) (*GetOrgTreeUserResp, error)
	GetOrgTreePerm(ctx context.Context, in *GetOrgTreePermReq, opts ...grpc.CallOption) (*GetOrgTreeUserResp, error)
	GetOrgTreeBusiness(ctx context.Context, in *GetOrgTreeBusinessReq, opts ...grpc.CallOption) (*GetOrgTreeBusinessResp, error)
	BindOrgTreeUser(ctx context.Context, in *BindUserToOrganizationReq, opts ...grpc.CallOption) (*BindUserToOrganizationResp, error)
	UnBindOrgTreeUser(ctx context.Context, in *UnbindUserToOrganizationReq, opts ...grpc.CallOption) (*UnbindUserToOrganizationResp, error)
	UserSearch(ctx context.Context, in *UserSearchReq, opts ...grpc.CallOption) (*UserSearchResp, error)
	GetUserConfig(ctx context.Context, in *GetUserConfigReq, opts ...grpc.CallOption) (*GetUserConfigResp, error)
	SetUserConfig(ctx context.Context, in *SetUserConfigReq, opts ...grpc.CallOption) (*SetUserConfigResp, error)
	GetUserRoleList(ctx context.Context, in *UserRoleListReq, opts ...grpc.CallOption) (*UserRoleListResp, error)
	GetUserSwitchConfig(ctx context.Context, in *GetUserSwitchConfigReq, opts ...grpc.CallOption) (*GetUserSwitchConfigResp, error)
	PhoneBind(ctx context.Context, in *PhoneBindReq, opts ...grpc.CallOption) (*PhoneBindResp, error)
	AgentUpdateUserPassword(ctx context.Context, in *AgentUpdateUserPasswordReq, opts ...grpc.CallOption) (*AgentUpdateUserPasswordResp, error)
	BatchGetUserDevice(ctx context.Context, in *BatchGetUserDeviceReq, opts ...grpc.CallOption) (*BatchGetUserDeviceResp, error)
	UserChatRiskCheck(ctx context.Context, in *UserChatRiskCheckReq, opts ...grpc.CallOption) (*UserChatRiskCheckResp, error)
	GetUserRiskInfo(ctx context.Context, in *GetUserRiskInfoReq, opts ...grpc.CallOption) (*GetUserRiskInfoResp, error)
	UserBan(ctx context.Context, in *UserBanReq, opts ...grpc.CallOption) (*UserBanResp, error)
	UserUnBan(ctx context.Context, in *UserUnBanReq, opts ...grpc.CallOption) (*UserUnBanResp, error)
}

type userServerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServerClient(cc grpc.ClientConnInterface) UserServerClient {
	return &userServerClient{cc}
}

func (c *userServerClient) AddPromotionModel(ctx context.Context, in *AddPromotionModelReq, opts ...grpc.CallOption) (*AddPromotionModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPromotionModelResp)
	err := c.cc.Invoke(ctx, UserServer_AddPromotionModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdatePromotionModel(ctx context.Context, in *UpdatePromotionModelReq, opts ...grpc.CallOption) (*UpdatePromotionModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePromotionModelResp)
	err := c.cc.Invoke(ctx, UserServer_UpdatePromotionModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddPromotionRole(ctx context.Context, in *AddPromotionRoleReq, opts ...grpc.CallOption) (*AddPromotionRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPromotionRoleResp)
	err := c.cc.Invoke(ctx, UserServer_AddPromotionRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdatePromotionRole(ctx context.Context, in *UpdatePromotionRoleReq, opts ...grpc.CallOption) (*UpdatePromotionRoleResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePromotionRoleResp)
	err := c.cc.Invoke(ctx, UserServer_UpdatePromotionRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddPromotionRoleRatio(ctx context.Context, in *AddPromotionRoleRatioReq, opts ...grpc.CallOption) (*AddPromotionRoleRatioResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPromotionRoleRatioResp)
	err := c.cc.Invoke(ctx, UserServer_AddPromotionRoleRatio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdatePromotionRoleRatio(ctx context.Context, in *UpdatePromotionRoleRatioReq, opts ...grpc.CallOption) (*UpdatePromotionRoleRatioResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePromotionRoleRatioResp)
	err := c.cc.Invoke(ctx, UserServer_UpdatePromotionRoleRatio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddBusinessModel(ctx context.Context, in *AddBusinessModelReq, opts ...grpc.CallOption) (*AddBusinessModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBusinessModelResp)
	err := c.cc.Invoke(ctx, UserServer_AddBusinessModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateBusinessModel(ctx context.Context, in *UpdateBusinessModelReq, opts ...grpc.CallOption) (*UpdateBusinessModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessModelResp)
	err := c.cc.Invoke(ctx, UserServer_UpdateBusinessModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddBusinessModelRights(ctx context.Context, in *AddBusinessModelRightsReq, opts ...grpc.CallOption) (*AddBusinessModelRightsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBusinessModelRightsResp)
	err := c.cc.Invoke(ctx, UserServer_AddBusinessModelRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateBusinessModelRights(ctx context.Context, in *UpdateBusinessModelRightsReq, opts ...grpc.CallOption) (*UpdateBusinessModelRightsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBusinessModelRightsResp)
	err := c.cc.Invoke(ctx, UserServer_UpdateBusinessModelRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddModel(ctx context.Context, in *AddModelReq, opts ...grpc.CallOption) (*AddModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddModelResp)
	err := c.cc.Invoke(ctx, UserServer_AddModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateModel(ctx context.Context, in *UpdateModelReq, opts ...grpc.CallOption) (*UpdateModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModelResp)
	err := c.cc.Invoke(ctx, UserServer_UpdateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddMultistageModel(ctx context.Context, in *AddMultistageModelReq, opts ...grpc.CallOption) (*AddMultistageModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMultistageModelResp)
	err := c.cc.Invoke(ctx, UserServer_AddMultistageModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddTemplateModel(ctx context.Context, in *AddTemplateModelReq, opts ...grpc.CallOption) (*AddTemplateModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTemplateModelResp)
	err := c.cc.Invoke(ctx, UserServer_AddTemplateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetMultistageModel(ctx context.Context, in *GetMultistageModelReq, opts ...grpc.CallOption) (*GetMultistageModelResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMultistageModelResp)
	err := c.cc.Invoke(ctx, UserServer_GetMultistageModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddModelTemplate(ctx context.Context, in *AddModelTemplateReq, opts ...grpc.CallOption) (*AddModelTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddModelTemplateResp)
	err := c.cc.Invoke(ctx, UserServer_AddModelTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetModelTemplate(ctx context.Context, in *GetModelTemplateReq, opts ...grpc.CallOption) (*GetModelTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelTemplateResp)
	err := c.cc.Invoke(ctx, UserServer_GetModelTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetModelTemplateList(ctx context.Context, in *GetModelTemplateListReq, opts ...grpc.CallOption) (*GetModelTemplateListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelTemplateListResp)
	err := c.cc.Invoke(ctx, UserServer_GetModelTemplateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetModelTemplateGame(ctx context.Context, in *GetModelTemplateGameReq, opts ...grpc.CallOption) (*GetModelTemplateGameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelTemplateGameResp)
	err := c.cc.Invoke(ctx, UserServer_GetModelTemplateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) SmsSendLogin(ctx context.Context, in *SMSSendLoginReq, opts ...grpc.CallOption) (*SMSSendLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMSSendLoginResp)
	err := c.cc.Invoke(ctx, UserServer_SmsSendLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UserServer_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, UserServer_UserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) OpenIDBind(ctx context.Context, in *OpenIDBindReq, opts ...grpc.CallOption) (*OpenIDBindResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenIDBindResp)
	err := c.cc.Invoke(ctx, UserServer_OpenIDBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserUploadGeographic(ctx context.Context, in *UserUploadGeographicReq, opts ...grpc.CallOption) (*UserUploadGeographicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserUploadGeographicResp)
	err := c.cc.Invoke(ctx, UserServer_UserUploadGeographic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) FeedbackUpload(ctx context.Context, in *FeedbackUploadReq, opts ...grpc.CallOption) (*FeedbackUploadResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackUploadResp)
	err := c.cc.Invoke(ctx, UserServer_FeedbackUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserPhonesByUidList(ctx context.Context, in *GetUserPhonesReq, opts ...grpc.CallOption) (*GetUserPhonesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPhonesResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserPhonesByUidList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, UserServer_UpdateUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) BatchGetUserInfo(ctx context.Context, in *BatchGetUserInfoReq, opts ...grpc.CallOption) (*BatchGetUserInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserInfoResp)
	err := c.cc.Invoke(ctx, UserServer_BatchGetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserIdByPhone(ctx context.Context, in *GetUserIdByPhoneReq, opts ...grpc.CallOption) (*GetUserIdByPhoneResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserIdByPhoneResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserIdByPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserCertification(ctx context.Context, in *UserCertificationReq, opts ...grpc.CallOption) (*UserCertificationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCertificationResp)
	err := c.cc.Invoke(ctx, UserServer_UserCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AddOrgTree(ctx context.Context, in *CreateOrganizationReq, opts ...grpc.CallOption) (*CreateOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_AddOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) SetOrgTree(ctx context.Context, in *UpdateOrganizationReq, opts ...grpc.CallOption) (*UpdateOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_SetOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) DelOrgTree(ctx context.Context, in *DeleteOrganizationReq, opts ...grpc.CallOption) (*DeleteOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_DelOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTree(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTreeChildren(ctx context.Context, in *GetOrganizationReq, opts ...grpc.CallOption) (*GetOrganizationChildrenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationChildrenResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTreeChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTreeUser(ctx context.Context, in *GetOrgTreeUserReq, opts ...grpc.CallOption) (*GetOrgTreeUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgTreeUserResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTreeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTreePerm(ctx context.Context, in *GetOrgTreePermReq, opts ...grpc.CallOption) (*GetOrgTreeUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgTreeUserResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTreePerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetOrgTreeBusiness(ctx context.Context, in *GetOrgTreeBusinessReq, opts ...grpc.CallOption) (*GetOrgTreeBusinessResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrgTreeBusinessResp)
	err := c.cc.Invoke(ctx, UserServer_GetOrgTreeBusiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) BindOrgTreeUser(ctx context.Context, in *BindUserToOrganizationReq, opts ...grpc.CallOption) (*BindUserToOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindUserToOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_BindOrgTreeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UnBindOrgTreeUser(ctx context.Context, in *UnbindUserToOrganizationReq, opts ...grpc.CallOption) (*UnbindUserToOrganizationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindUserToOrganizationResp)
	err := c.cc.Invoke(ctx, UserServer_UnBindOrgTreeUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserSearch(ctx context.Context, in *UserSearchReq, opts ...grpc.CallOption) (*UserSearchResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSearchResp)
	err := c.cc.Invoke(ctx, UserServer_UserSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserConfig(ctx context.Context, in *GetUserConfigReq, opts ...grpc.CallOption) (*GetUserConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserConfigResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) SetUserConfig(ctx context.Context, in *SetUserConfigReq, opts ...grpc.CallOption) (*SetUserConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserConfigResp)
	err := c.cc.Invoke(ctx, UserServer_SetUserConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserRoleList(ctx context.Context, in *UserRoleListReq, opts ...grpc.CallOption) (*UserRoleListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRoleListResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserRoleList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserSwitchConfig(ctx context.Context, in *GetUserSwitchConfigReq, opts ...grpc.CallOption) (*GetUserSwitchConfigResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserSwitchConfigResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserSwitchConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) PhoneBind(ctx context.Context, in *PhoneBindReq, opts ...grpc.CallOption) (*PhoneBindResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneBindResp)
	err := c.cc.Invoke(ctx, UserServer_PhoneBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) AgentUpdateUserPassword(ctx context.Context, in *AgentUpdateUserPasswordReq, opts ...grpc.CallOption) (*AgentUpdateUserPasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentUpdateUserPasswordResp)
	err := c.cc.Invoke(ctx, UserServer_AgentUpdateUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) BatchGetUserDevice(ctx context.Context, in *BatchGetUserDeviceReq, opts ...grpc.CallOption) (*BatchGetUserDeviceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserDeviceResp)
	err := c.cc.Invoke(ctx, UserServer_BatchGetUserDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserChatRiskCheck(ctx context.Context, in *UserChatRiskCheckReq, opts ...grpc.CallOption) (*UserChatRiskCheckResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserChatRiskCheckResp)
	err := c.cc.Invoke(ctx, UserServer_UserChatRiskCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) GetUserRiskInfo(ctx context.Context, in *GetUserRiskInfoReq, opts ...grpc.CallOption) (*GetUserRiskInfoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRiskInfoResp)
	err := c.cc.Invoke(ctx, UserServer_GetUserRiskInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserBan(ctx context.Context, in *UserBanReq, opts ...grpc.CallOption) (*UserBanResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserBanResp)
	err := c.cc.Invoke(ctx, UserServer_UserBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServerClient) UserUnBan(ctx context.Context, in *UserUnBanReq, opts ...grpc.CallOption) (*UserUnBanResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserUnBanResp)
	err := c.cc.Invoke(ctx, UserServer_UserUnBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServerServer is the server API for UserServer service.
// All implementations must embed UnimplementedUserServerServer
// for forward compatibility.
type UserServerServer interface {
	// ==========================业务模式相关==========================//
	AddPromotionModel(context.Context, *AddPromotionModelReq) (*AddPromotionModelResp, error)
	UpdatePromotionModel(context.Context, *UpdatePromotionModelReq) (*UpdatePromotionModelResp, error)
	AddPromotionRole(context.Context, *AddPromotionRoleReq) (*AddPromotionRoleResp, error)
	UpdatePromotionRole(context.Context, *UpdatePromotionRoleReq) (*UpdatePromotionRoleResp, error)
	AddPromotionRoleRatio(context.Context, *AddPromotionRoleRatioReq) (*AddPromotionRoleRatioResp, error)
	UpdatePromotionRoleRatio(context.Context, *UpdatePromotionRoleRatioReq) (*UpdatePromotionRoleRatioResp, error)
	AddBusinessModel(context.Context, *AddBusinessModelReq) (*AddBusinessModelResp, error)
	UpdateBusinessModel(context.Context, *UpdateBusinessModelReq) (*UpdateBusinessModelResp, error)
	AddBusinessModelRights(context.Context, *AddBusinessModelRightsReq) (*AddBusinessModelRightsResp, error)
	UpdateBusinessModelRights(context.Context, *UpdateBusinessModelRightsReq) (*UpdateBusinessModelRightsResp, error)
	AddModel(context.Context, *AddModelReq) (*AddModelResp, error)
	UpdateModel(context.Context, *UpdateModelReq) (*UpdateModelResp, error)
	AddMultistageModel(context.Context, *AddMultistageModelReq) (*AddMultistageModelResp, error)
	AddTemplateModel(context.Context, *AddTemplateModelReq) (*AddTemplateModelResp, error)
	GetMultistageModel(context.Context, *GetMultistageModelReq) (*GetMultistageModelResp, error)
	AddModelTemplate(context.Context, *AddModelTemplateReq) (*AddModelTemplateResp, error)
	GetModelTemplate(context.Context, *GetModelTemplateReq) (*GetModelTemplateResp, error)
	GetModelTemplateList(context.Context, *GetModelTemplateListReq) (*GetModelTemplateListResp, error)
	GetModelTemplateGame(context.Context, *GetModelTemplateGameReq) (*GetModelTemplateGameResp, error)
	// ==========================用户服务相关==========================//
	SmsSendLogin(context.Context, *SMSSendLoginReq) (*SMSSendLoginResp, error)
	UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error)
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	OpenIDBind(context.Context, *OpenIDBindReq) (*OpenIDBindResp, error)
	UserUploadGeographic(context.Context, *UserUploadGeographicReq) (*UserUploadGeographicResp, error)
	FeedbackUpload(context.Context, *FeedbackUploadReq) (*FeedbackUploadResp, error)
	GetUserPhonesByUidList(context.Context, *GetUserPhonesReq) (*GetUserPhonesResp, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	BatchGetUserInfo(context.Context, *BatchGetUserInfoReq) (*BatchGetUserInfoResp, error)
	GetUserIdByPhone(context.Context, *GetUserIdByPhoneReq) (*GetUserIdByPhoneResp, error)
	UserCertification(context.Context, *UserCertificationReq) (*UserCertificationResp, error)
	AddOrgTree(context.Context, *CreateOrganizationReq) (*CreateOrganizationResp, error)
	SetOrgTree(context.Context, *UpdateOrganizationReq) (*UpdateOrganizationResp, error)
	DelOrgTree(context.Context, *DeleteOrganizationReq) (*DeleteOrganizationResp, error)
	GetOrgTree(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error)
	GetOrgTreeChildren(context.Context, *GetOrganizationReq) (*GetOrganizationChildrenResp, error)
	GetOrgTreeUser(context.Context, *GetOrgTreeUserReq) (*GetOrgTreeUserResp, error)
	GetOrgTreePerm(context.Context, *GetOrgTreePermReq) (*GetOrgTreeUserResp, error)
	GetOrgTreeBusiness(context.Context, *GetOrgTreeBusinessReq) (*GetOrgTreeBusinessResp, error)
	BindOrgTreeUser(context.Context, *BindUserToOrganizationReq) (*BindUserToOrganizationResp, error)
	UnBindOrgTreeUser(context.Context, *UnbindUserToOrganizationReq) (*UnbindUserToOrganizationResp, error)
	UserSearch(context.Context, *UserSearchReq) (*UserSearchResp, error)
	GetUserConfig(context.Context, *GetUserConfigReq) (*GetUserConfigResp, error)
	SetUserConfig(context.Context, *SetUserConfigReq) (*SetUserConfigResp, error)
	GetUserRoleList(context.Context, *UserRoleListReq) (*UserRoleListResp, error)
	GetUserSwitchConfig(context.Context, *GetUserSwitchConfigReq) (*GetUserSwitchConfigResp, error)
	PhoneBind(context.Context, *PhoneBindReq) (*PhoneBindResp, error)
	AgentUpdateUserPassword(context.Context, *AgentUpdateUserPasswordReq) (*AgentUpdateUserPasswordResp, error)
	BatchGetUserDevice(context.Context, *BatchGetUserDeviceReq) (*BatchGetUserDeviceResp, error)
	UserChatRiskCheck(context.Context, *UserChatRiskCheckReq) (*UserChatRiskCheckResp, error)
	GetUserRiskInfo(context.Context, *GetUserRiskInfoReq) (*GetUserRiskInfoResp, error)
	UserBan(context.Context, *UserBanReq) (*UserBanResp, error)
	UserUnBan(context.Context, *UserUnBanReq) (*UserUnBanResp, error)
	mustEmbedUnimplementedUserServerServer()
}

// UnimplementedUserServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServerServer struct{}

func (UnimplementedUserServerServer) AddPromotionModel(context.Context, *AddPromotionModelReq) (*AddPromotionModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPromotionModel not implemented")
}
func (UnimplementedUserServerServer) UpdatePromotionModel(context.Context, *UpdatePromotionModelReq) (*UpdatePromotionModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromotionModel not implemented")
}
func (UnimplementedUserServerServer) AddPromotionRole(context.Context, *AddPromotionRoleReq) (*AddPromotionRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPromotionRole not implemented")
}
func (UnimplementedUserServerServer) UpdatePromotionRole(context.Context, *UpdatePromotionRoleReq) (*UpdatePromotionRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromotionRole not implemented")
}
func (UnimplementedUserServerServer) AddPromotionRoleRatio(context.Context, *AddPromotionRoleRatioReq) (*AddPromotionRoleRatioResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPromotionRoleRatio not implemented")
}
func (UnimplementedUserServerServer) UpdatePromotionRoleRatio(context.Context, *UpdatePromotionRoleRatioReq) (*UpdatePromotionRoleRatioResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromotionRoleRatio not implemented")
}
func (UnimplementedUserServerServer) AddBusinessModel(context.Context, *AddBusinessModelReq) (*AddBusinessModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessModel not implemented")
}
func (UnimplementedUserServerServer) UpdateBusinessModel(context.Context, *UpdateBusinessModelReq) (*UpdateBusinessModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessModel not implemented")
}
func (UnimplementedUserServerServer) AddBusinessModelRights(context.Context, *AddBusinessModelRightsReq) (*AddBusinessModelRightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessModelRights not implemented")
}
func (UnimplementedUserServerServer) UpdateBusinessModelRights(context.Context, *UpdateBusinessModelRightsReq) (*UpdateBusinessModelRightsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessModelRights not implemented")
}
func (UnimplementedUserServerServer) AddModel(context.Context, *AddModelReq) (*AddModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModel not implemented")
}
func (UnimplementedUserServerServer) UpdateModel(context.Context, *UpdateModelReq) (*UpdateModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedUserServerServer) AddMultistageModel(context.Context, *AddMultistageModelReq) (*AddMultistageModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultistageModel not implemented")
}
func (UnimplementedUserServerServer) AddTemplateModel(context.Context, *AddTemplateModelReq) (*AddTemplateModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTemplateModel not implemented")
}
func (UnimplementedUserServerServer) GetMultistageModel(context.Context, *GetMultistageModelReq) (*GetMultistageModelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultistageModel not implemented")
}
func (UnimplementedUserServerServer) AddModelTemplate(context.Context, *AddModelTemplateReq) (*AddModelTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModelTemplate not implemented")
}
func (UnimplementedUserServerServer) GetModelTemplate(context.Context, *GetModelTemplateReq) (*GetModelTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelTemplate not implemented")
}
func (UnimplementedUserServerServer) GetModelTemplateList(context.Context, *GetModelTemplateListReq) (*GetModelTemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelTemplateList not implemented")
}
func (UnimplementedUserServerServer) GetModelTemplateGame(context.Context, *GetModelTemplateGameReq) (*GetModelTemplateGameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelTemplateGame not implemented")
}
func (UnimplementedUserServerServer) SmsSendLogin(context.Context, *SMSSendLoginReq) (*SMSSendLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsSendLogin not implemented")
}
func (UnimplementedUserServerServer) UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServerServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserServerServer) OpenIDBind(context.Context, *OpenIDBindReq) (*OpenIDBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenIDBind not implemented")
}
func (UnimplementedUserServerServer) UserUploadGeographic(context.Context, *UserUploadGeographicReq) (*UserUploadGeographicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploadGeographic not implemented")
}
func (UnimplementedUserServerServer) FeedbackUpload(context.Context, *FeedbackUploadReq) (*FeedbackUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedbackUpload not implemented")
}
func (UnimplementedUserServerServer) GetUserPhonesByUidList(context.Context, *GetUserPhonesReq) (*GetUserPhonesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPhonesByUidList not implemented")
}
func (UnimplementedUserServerServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedUserServerServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServerServer) BatchGetUserInfo(context.Context, *BatchGetUserInfoReq) (*BatchGetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserInfo not implemented")
}
func (UnimplementedUserServerServer) GetUserIdByPhone(context.Context, *GetUserIdByPhoneReq) (*GetUserIdByPhoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByPhone not implemented")
}
func (UnimplementedUserServerServer) UserCertification(context.Context, *UserCertificationReq) (*UserCertificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCertification not implemented")
}
func (UnimplementedUserServerServer) AddOrgTree(context.Context, *CreateOrganizationReq) (*CreateOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgTree not implemented")
}
func (UnimplementedUserServerServer) SetOrgTree(context.Context, *UpdateOrganizationReq) (*UpdateOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgTree not implemented")
}
func (UnimplementedUserServerServer) DelOrgTree(context.Context, *DeleteOrganizationReq) (*DeleteOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrgTree not implemented")
}
func (UnimplementedUserServerServer) GetOrgTree(context.Context, *GetOrganizationReq) (*GetOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTree not implemented")
}
func (UnimplementedUserServerServer) GetOrgTreeChildren(context.Context, *GetOrganizationReq) (*GetOrganizationChildrenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTreeChildren not implemented")
}
func (UnimplementedUserServerServer) GetOrgTreeUser(context.Context, *GetOrgTreeUserReq) (*GetOrgTreeUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTreeUser not implemented")
}
func (UnimplementedUserServerServer) GetOrgTreePerm(context.Context, *GetOrgTreePermReq) (*GetOrgTreeUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTreePerm not implemented")
}
func (UnimplementedUserServerServer) GetOrgTreeBusiness(context.Context, *GetOrgTreeBusinessReq) (*GetOrgTreeBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgTreeBusiness not implemented")
}
func (UnimplementedUserServerServer) BindOrgTreeUser(context.Context, *BindUserToOrganizationReq) (*BindUserToOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOrgTreeUser not implemented")
}
func (UnimplementedUserServerServer) UnBindOrgTreeUser(context.Context, *UnbindUserToOrganizationReq) (*UnbindUserToOrganizationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindOrgTreeUser not implemented")
}
func (UnimplementedUserServerServer) UserSearch(context.Context, *UserSearchReq) (*UserSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSearch not implemented")
}
func (UnimplementedUserServerServer) GetUserConfig(context.Context, *GetUserConfigReq) (*GetUserConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConfig not implemented")
}
func (UnimplementedUserServerServer) SetUserConfig(context.Context, *SetUserConfigReq) (*SetUserConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserConfig not implemented")
}
func (UnimplementedUserServerServer) GetUserRoleList(context.Context, *UserRoleListReq) (*UserRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleList not implemented")
}
func (UnimplementedUserServerServer) GetUserSwitchConfig(context.Context, *GetUserSwitchConfigReq) (*GetUserSwitchConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSwitchConfig not implemented")
}
func (UnimplementedUserServerServer) PhoneBind(context.Context, *PhoneBindReq) (*PhoneBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneBind not implemented")
}
func (UnimplementedUserServerServer) AgentUpdateUserPassword(context.Context, *AgentUpdateUserPasswordReq) (*AgentUpdateUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUpdateUserPassword not implemented")
}
func (UnimplementedUserServerServer) BatchGetUserDevice(context.Context, *BatchGetUserDeviceReq) (*BatchGetUserDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserDevice not implemented")
}
func (UnimplementedUserServerServer) UserChatRiskCheck(context.Context, *UserChatRiskCheckReq) (*UserChatRiskCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChatRiskCheck not implemented")
}
func (UnimplementedUserServerServer) GetUserRiskInfo(context.Context, *GetUserRiskInfoReq) (*GetUserRiskInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRiskInfo not implemented")
}
func (UnimplementedUserServerServer) UserBan(context.Context, *UserBanReq) (*UserBanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBan not implemented")
}
func (UnimplementedUserServerServer) UserUnBan(context.Context, *UserUnBanReq) (*UserUnBanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnBan not implemented")
}
func (UnimplementedUserServerServer) mustEmbedUnimplementedUserServerServer() {}
func (UnimplementedUserServerServer) testEmbeddedByValue()                    {}

// UnsafeUserServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServerServer will
// result in compilation errors.
type UnsafeUserServerServer interface {
	mustEmbedUnimplementedUserServerServer()
}

func RegisterUserServerServer(s grpc.ServiceRegistrar, srv UserServerServer) {
	// If the following call pancis, it indicates UnimplementedUserServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserServer_ServiceDesc, srv)
}

func _UserServer_AddPromotionModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPromotionModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddPromotionModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddPromotionModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddPromotionModel(ctx, req.(*AddPromotionModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdatePromotionModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromotionModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdatePromotionModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdatePromotionModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdatePromotionModel(ctx, req.(*UpdatePromotionModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddPromotionRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPromotionRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddPromotionRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddPromotionRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddPromotionRole(ctx, req.(*AddPromotionRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdatePromotionRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromotionRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdatePromotionRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdatePromotionRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdatePromotionRole(ctx, req.(*UpdatePromotionRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddPromotionRoleRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPromotionRoleRatioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddPromotionRoleRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddPromotionRoleRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddPromotionRoleRatio(ctx, req.(*AddPromotionRoleRatioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdatePromotionRoleRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromotionRoleRatioReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdatePromotionRoleRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdatePromotionRoleRatio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdatePromotionRoleRatio(ctx, req.(*UpdatePromotionRoleRatioReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddBusinessModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddBusinessModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddBusinessModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddBusinessModel(ctx, req.(*AddBusinessModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateBusinessModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateBusinessModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdateBusinessModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateBusinessModel(ctx, req.(*UpdateBusinessModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddBusinessModelRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessModelRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddBusinessModelRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddBusinessModelRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddBusinessModelRights(ctx, req.(*AddBusinessModelRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateBusinessModelRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessModelRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateBusinessModelRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdateBusinessModelRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateBusinessModelRights(ctx, req.(*UpdateBusinessModelRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddModel(ctx, req.(*AddModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateModel(ctx, req.(*UpdateModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddMultistageModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMultistageModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddMultistageModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddMultistageModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddMultistageModel(ctx, req.(*AddMultistageModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddTemplateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTemplateModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddTemplateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddTemplateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddTemplateModel(ctx, req.(*AddTemplateModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetMultistageModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultistageModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetMultistageModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetMultistageModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetMultistageModel(ctx, req.(*GetMultistageModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddModelTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddModelTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddModelTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddModelTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddModelTemplate(ctx, req.(*AddModelTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetModelTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetModelTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetModelTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetModelTemplate(ctx, req.(*GetModelTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetModelTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelTemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetModelTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetModelTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetModelTemplateList(ctx, req.(*GetModelTemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetModelTemplateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelTemplateGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetModelTemplateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetModelTemplateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetModelTemplateGame(ctx, req.(*GetModelTemplateGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_SmsSendLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSSendLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).SmsSendLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_SmsSendLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).SmsSendLogin(ctx, req.(*SMSSendLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserLogin(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_OpenIDBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIDBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).OpenIDBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_OpenIDBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).OpenIDBind(ctx, req.(*OpenIDBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserUploadGeographic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUploadGeographicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserUploadGeographic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserUploadGeographic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserUploadGeographic(ctx, req.(*UserUploadGeographicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_FeedbackUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).FeedbackUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_FeedbackUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).FeedbackUpload(ctx, req.(*FeedbackUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserPhonesByUidList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPhonesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserPhonesByUidList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserPhonesByUidList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserPhonesByUidList(ctx, req.(*GetUserPhonesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_BatchGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).BatchGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_BatchGetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).BatchGetUserInfo(ctx, req.(*BatchGetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserIdByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserIdByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserIdByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserIdByPhone(ctx, req.(*GetUserIdByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCertificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserCertification(ctx, req.(*UserCertificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AddOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AddOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AddOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AddOrgTree(ctx, req.(*CreateOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_SetOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).SetOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_SetOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).SetOrgTree(ctx, req.(*UpdateOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_DelOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).DelOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_DelOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).DelOrgTree(ctx, req.(*DeleteOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTree(ctx, req.(*GetOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTreeChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTreeChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTreeChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTreeChildren(ctx, req.(*GetOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTreeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgTreeUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTreeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTreeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTreeUser(ctx, req.(*GetOrgTreeUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTreePerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgTreePermReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTreePerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTreePerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTreePerm(ctx, req.(*GetOrgTreePermReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetOrgTreeBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgTreeBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetOrgTreeBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetOrgTreeBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetOrgTreeBusiness(ctx, req.(*GetOrgTreeBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_BindOrgTreeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindUserToOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).BindOrgTreeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_BindOrgTreeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).BindOrgTreeUser(ctx, req.(*BindUserToOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UnBindOrgTreeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindUserToOrganizationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UnBindOrgTreeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UnBindOrgTreeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UnBindOrgTreeUser(ctx, req.(*UnbindUserToOrganizationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserSearch(ctx, req.(*UserSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserConfig(ctx, req.(*GetUserConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_SetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).SetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_SetUserConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).SetUserConfig(ctx, req.(*SetUserConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserRoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserRoleList(ctx, req.(*UserRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserSwitchConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSwitchConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserSwitchConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserSwitchConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserSwitchConfig(ctx, req.(*GetUserSwitchConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_PhoneBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).PhoneBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_PhoneBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).PhoneBind(ctx, req.(*PhoneBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_AgentUpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUpdateUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).AgentUpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_AgentUpdateUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).AgentUpdateUserPassword(ctx, req.(*AgentUpdateUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_BatchGetUserDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).BatchGetUserDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_BatchGetUserDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).BatchGetUserDevice(ctx, req.(*BatchGetUserDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserChatRiskCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChatRiskCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserChatRiskCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserChatRiskCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserChatRiskCheck(ctx, req.(*UserChatRiskCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_GetUserRiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRiskInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).GetUserRiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_GetUserRiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).GetUserRiskInfo(ctx, req.(*GetUserRiskInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserBan(ctx, req.(*UserBanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServer_UserUnBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUnBanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServerServer).UserUnBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserServer_UserUnBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServerServer).UserUnBan(ctx, req.(*UserUnBanReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServer_ServiceDesc is the grpc.ServiceDesc for UserServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "new_chess.UserServer",
	HandlerType: (*UserServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPromotionModel",
			Handler:    _UserServer_AddPromotionModel_Handler,
		},
		{
			MethodName: "UpdatePromotionModel",
			Handler:    _UserServer_UpdatePromotionModel_Handler,
		},
		{
			MethodName: "AddPromotionRole",
			Handler:    _UserServer_AddPromotionRole_Handler,
		},
		{
			MethodName: "UpdatePromotionRole",
			Handler:    _UserServer_UpdatePromotionRole_Handler,
		},
		{
			MethodName: "AddPromotionRoleRatio",
			Handler:    _UserServer_AddPromotionRoleRatio_Handler,
		},
		{
			MethodName: "UpdatePromotionRoleRatio",
			Handler:    _UserServer_UpdatePromotionRoleRatio_Handler,
		},
		{
			MethodName: "AddBusinessModel",
			Handler:    _UserServer_AddBusinessModel_Handler,
		},
		{
			MethodName: "UpdateBusinessModel",
			Handler:    _UserServer_UpdateBusinessModel_Handler,
		},
		{
			MethodName: "AddBusinessModelRights",
			Handler:    _UserServer_AddBusinessModelRights_Handler,
		},
		{
			MethodName: "UpdateBusinessModelRights",
			Handler:    _UserServer_UpdateBusinessModelRights_Handler,
		},
		{
			MethodName: "AddModel",
			Handler:    _UserServer_AddModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _UserServer_UpdateModel_Handler,
		},
		{
			MethodName: "AddMultistageModel",
			Handler:    _UserServer_AddMultistageModel_Handler,
		},
		{
			MethodName: "AddTemplateModel",
			Handler:    _UserServer_AddTemplateModel_Handler,
		},
		{
			MethodName: "GetMultistageModel",
			Handler:    _UserServer_GetMultistageModel_Handler,
		},
		{
			MethodName: "AddModelTemplate",
			Handler:    _UserServer_AddModelTemplate_Handler,
		},
		{
			MethodName: "GetModelTemplate",
			Handler:    _UserServer_GetModelTemplate_Handler,
		},
		{
			MethodName: "GetModelTemplateList",
			Handler:    _UserServer_GetModelTemplateList_Handler,
		},
		{
			MethodName: "GetModelTemplateGame",
			Handler:    _UserServer_GetModelTemplateGame_Handler,
		},
		{
			MethodName: "SmsSendLogin",
			Handler:    _UserServer_SmsSendLogin_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserServer_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _UserServer_UserRegister_Handler,
		},
		{
			MethodName: "OpenIDBind",
			Handler:    _UserServer_OpenIDBind_Handler,
		},
		{
			MethodName: "UserUploadGeographic",
			Handler:    _UserServer_UserUploadGeographic_Handler,
		},
		{
			MethodName: "FeedbackUpload",
			Handler:    _UserServer_FeedbackUpload_Handler,
		},
		{
			MethodName: "GetUserPhonesByUidList",
			Handler:    _UserServer_GetUserPhonesByUidList_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserServer_UpdateUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserServer_GetUserInfo_Handler,
		},
		{
			MethodName: "BatchGetUserInfo",
			Handler:    _UserServer_BatchGetUserInfo_Handler,
		},
		{
			MethodName: "GetUserIdByPhone",
			Handler:    _UserServer_GetUserIdByPhone_Handler,
		},
		{
			MethodName: "UserCertification",
			Handler:    _UserServer_UserCertification_Handler,
		},
		{
			MethodName: "AddOrgTree",
			Handler:    _UserServer_AddOrgTree_Handler,
		},
		{
			MethodName: "SetOrgTree",
			Handler:    _UserServer_SetOrgTree_Handler,
		},
		{
			MethodName: "DelOrgTree",
			Handler:    _UserServer_DelOrgTree_Handler,
		},
		{
			MethodName: "GetOrgTree",
			Handler:    _UserServer_GetOrgTree_Handler,
		},
		{
			MethodName: "GetOrgTreeChildren",
			Handler:    _UserServer_GetOrgTreeChildren_Handler,
		},
		{
			MethodName: "GetOrgTreeUser",
			Handler:    _UserServer_GetOrgTreeUser_Handler,
		},
		{
			MethodName: "GetOrgTreePerm",
			Handler:    _UserServer_GetOrgTreePerm_Handler,
		},
		{
			MethodName: "GetOrgTreeBusiness",
			Handler:    _UserServer_GetOrgTreeBusiness_Handler,
		},
		{
			MethodName: "BindOrgTreeUser",
			Handler:    _UserServer_BindOrgTreeUser_Handler,
		},
		{
			MethodName: "UnBindOrgTreeUser",
			Handler:    _UserServer_UnBindOrgTreeUser_Handler,
		},
		{
			MethodName: "UserSearch",
			Handler:    _UserServer_UserSearch_Handler,
		},
		{
			MethodName: "GetUserConfig",
			Handler:    _UserServer_GetUserConfig_Handler,
		},
		{
			MethodName: "SetUserConfig",
			Handler:    _UserServer_SetUserConfig_Handler,
		},
		{
			MethodName: "GetUserRoleList",
			Handler:    _UserServer_GetUserRoleList_Handler,
		},
		{
			MethodName: "GetUserSwitchConfig",
			Handler:    _UserServer_GetUserSwitchConfig_Handler,
		},
		{
			MethodName: "PhoneBind",
			Handler:    _UserServer_PhoneBind_Handler,
		},
		{
			MethodName: "AgentUpdateUserPassword",
			Handler:    _UserServer_AgentUpdateUserPassword_Handler,
		},
		{
			MethodName: "BatchGetUserDevice",
			Handler:    _UserServer_BatchGetUserDevice_Handler,
		},
		{
			MethodName: "UserChatRiskCheck",
			Handler:    _UserServer_UserChatRiskCheck_Handler,
		},
		{
			MethodName: "GetUserRiskInfo",
			Handler:    _UserServer_GetUserRiskInfo_Handler,
		},
		{
			MethodName: "UserBan",
			Handler:    _UserServer_UserBan_Handler,
		},
		{
			MethodName: "UserUnBan",
			Handler:    _UserServer_UserUnBan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chess_user.proto",
}
