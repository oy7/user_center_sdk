// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: chess_user.proto

package user

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	platform "github.com/oy7/user_center_sdk/proto/platform"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserRegisterType int32

const (
	UserRegisterType_DEFAULT   UserRegisterType = 0 // 默认值
	UserRegisterType_ONE_CLICK UserRegisterType = 1 // 一键注册
)

// Enum value maps for UserRegisterType.
var (
	UserRegisterType_name = map[int32]string{
		0: "DEFAULT",
		1: "ONE_CLICK",
	}
	UserRegisterType_value = map[string]int32{
		"DEFAULT":   0,
		"ONE_CLICK": 1,
	}
)

func (x UserRegisterType) Enum() *UserRegisterType {
	p := new(UserRegisterType)
	*p = x
	return p
}

func (x UserRegisterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRegisterType) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[0].Descriptor()
}

func (UserRegisterType) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[0]
}

func (x UserRegisterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRegisterType.Descriptor instead.
func (UserRegisterType) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{0}
}

// 手机验证码类型
type E_SMS_CODE_TYPE int32

const (
	E_SMS_CODE_TYPE_SMS_CODE_ERROR_INVALID   E_SMS_CODE_TYPE = 0 // 无效
	E_SMS_CODE_TYPE_SMS_CODE_REGISTER        E_SMS_CODE_TYPE = 1 // 注册验证码
	E_SMS_CODE_TYPE_SMS_CODE_LOGIN           E_SMS_CODE_TYPE = 2 // 登录验证码
	E_SMS_CODE_TYPE_SMS_CODE_REBIND_PHONE    E_SMS_CODE_TYPE = 3 // 重新绑定手机号码
	E_SMS_CODE_TYPE_SMS_CODE_UPDATE_PASSWORD E_SMS_CODE_TYPE = 4 // 修改密码
)

// Enum value maps for E_SMS_CODE_TYPE.
var (
	E_SMS_CODE_TYPE_name = map[int32]string{
		0: "SMS_CODE_ERROR_INVALID",
		1: "SMS_CODE_REGISTER",
		2: "SMS_CODE_LOGIN",
		3: "SMS_CODE_REBIND_PHONE",
		4: "SMS_CODE_UPDATE_PASSWORD",
	}
	E_SMS_CODE_TYPE_value = map[string]int32{
		"SMS_CODE_ERROR_INVALID":   0,
		"SMS_CODE_REGISTER":        1,
		"SMS_CODE_LOGIN":           2,
		"SMS_CODE_REBIND_PHONE":    3,
		"SMS_CODE_UPDATE_PASSWORD": 4,
	}
)

func (x E_SMS_CODE_TYPE) Enum() *E_SMS_CODE_TYPE {
	p := new(E_SMS_CODE_TYPE)
	*p = x
	return p
}

func (x E_SMS_CODE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_SMS_CODE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[1].Descriptor()
}

func (E_SMS_CODE_TYPE) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[1]
}

func (x E_SMS_CODE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_SMS_CODE_TYPE.Descriptor instead.
func (E_SMS_CODE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{1}
}

// 修改个人信息
type UserModifyType int32

const (
	UserModifyType_ERROR_INVALID   UserModifyType = 0 // 无效
	UserModifyType_REBIND_PHONE    UserModifyType = 1 // 重新绑定手机号
	UserModifyType_UPDATE_GENDER   UserModifyType = 2 // 修改性别
	UserModifyType_UPDATE_PASSWORD UserModifyType = 3 // 修改密码
	UserModifyType_UPDATE_NICKNAME UserModifyType = 4 // 修改昵称头像
)

// Enum value maps for UserModifyType.
var (
	UserModifyType_name = map[int32]string{
		0: "ERROR_INVALID",
		1: "REBIND_PHONE",
		2: "UPDATE_GENDER",
		3: "UPDATE_PASSWORD",
		4: "UPDATE_NICKNAME",
	}
	UserModifyType_value = map[string]int32{
		"ERROR_INVALID":   0,
		"REBIND_PHONE":    1,
		"UPDATE_GENDER":   2,
		"UPDATE_PASSWORD": 3,
		"UPDATE_NICKNAME": 4,
	}
)

func (x UserModifyType) Enum() *UserModifyType {
	p := new(UserModifyType)
	*p = x
	return p
}

func (x UserModifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserModifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[2].Descriptor()
}

func (UserModifyType) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[2]
}

func (x UserModifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserModifyType.Descriptor instead.
func (UserModifyType) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{2}
}

// 用户状态
type UserStatusType int32

const (
	UserStatusType_USER_STATUS_INVALID UserStatusType = 0 // 无效
	UserStatusType_USER_STATUS_NORMAL  UserStatusType = 1 // 正常
	UserStatusType_USER_STATUS_DISABLE UserStatusType = 2 // 禁用
	UserStatusType_USER_STATUS_DELETE  UserStatusType = 3 // 删除
)

// Enum value maps for UserStatusType.
var (
	UserStatusType_name = map[int32]string{
		0: "USER_STATUS_INVALID",
		1: "USER_STATUS_NORMAL",
		2: "USER_STATUS_DISABLE",
		3: "USER_STATUS_DELETE",
	}
	UserStatusType_value = map[string]int32{
		"USER_STATUS_INVALID": 0,
		"USER_STATUS_NORMAL":  1,
		"USER_STATUS_DISABLE": 2,
		"USER_STATUS_DELETE":  3,
	}
)

func (x UserStatusType) Enum() *UserStatusType {
	p := new(UserStatusType)
	*p = x
	return p
}

func (x UserStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[3].Descriptor()
}

func (UserStatusType) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[3]
}

func (x UserStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatusType.Descriptor instead.
func (UserStatusType) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{3}
}

// 用户登陆/注册 请求
type UserLoginReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LoginType          string                 `protobuf:"bytes,1,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`                               // 登陆类型
	UserId             int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 位置信息
	Password           string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                                  // 密码
	PhoneNumber        string                 `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                         // 手机号
	NickName           string                 `protobuf:"bytes,5,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                  // 昵称
	AvatarUrl          string                 `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                               // 头像
	SmsCode            string                 `protobuf:"bytes,7,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`                                     // 验证码
	WechatOpenId       string                 `protobuf:"bytes,8,opt,name=wechat_open_id,json=wechatOpenId,proto3" json:"wechat_open_id,omitempty"`                    // 微信openid
	WechatCode         string                 `protobuf:"bytes,9,opt,name=wechat_code,json=wechatCode,proto3" json:"wechat_code,omitempty"`                            // 微信code
	Ip                 string                 `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`                                                             // ip地址
	AppVersion         string                 `protobuf:"bytes,11,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`                           // app版本
	MachineCode        string                 `protobuf:"bytes,12,opt,name=machine_code,json=machineCode,proto3" json:"machine_code,omitempty"`                        // 机器码
	PhoneType          string                 `protobuf:"bytes,13,opt,name=phone_type,json=phoneType,proto3" json:"phone_type,omitempty"`                              // 手机类型
	PhoneVersion       string                 `protobuf:"bytes,14,opt,name=phone_version,json=phoneVersion,proto3" json:"phone_version,omitempty"`                     // 手机版本
	PhoneSystemVersion string                 `protobuf:"bytes,15,opt,name=phone_system_version,json=phoneSystemVersion,proto3" json:"phone_system_version,omitempty"` // 手机系统版本
	ProjectSource      string                 `protobuf:"bytes,16,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"`                  // 项目来源
	Token              string                 `protobuf:"bytes,17,opt,name=token,proto3" json:"token,omitempty"`                                                       // token
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserLoginReq) Reset() {
	*x = UserLoginReq{}
	mi := &file_chess_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginReq) ProtoMessage() {}

func (x *UserLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginReq.ProtoReflect.Descriptor instead.
func (*UserLoginReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserLoginReq) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *UserLoginReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserLoginReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserLoginReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserLoginReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserLoginReq) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *UserLoginReq) GetWechatOpenId() string {
	if x != nil {
		return x.WechatOpenId
	}
	return ""
}

func (x *UserLoginReq) GetWechatCode() string {
	if x != nil {
		return x.WechatCode
	}
	return ""
}

func (x *UserLoginReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserLoginReq) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *UserLoginReq) GetMachineCode() string {
	if x != nil {
		return x.MachineCode
	}
	return ""
}

func (x *UserLoginReq) GetPhoneType() string {
	if x != nil {
		return x.PhoneType
	}
	return ""
}

func (x *UserLoginReq) GetPhoneVersion() string {
	if x != nil {
		return x.PhoneVersion
	}
	return ""
}

func (x *UserLoginReq) GetPhoneSystemVersion() string {
	if x != nil {
		return x.PhoneSystemVersion
	}
	return ""
}

func (x *UserLoginReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

func (x *UserLoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BusinessModel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 商业模式id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BusinessModel) Reset() {
	*x = BusinessModel{}
	mi := &file_chess_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusinessModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessModel) ProtoMessage() {}

func (x *BusinessModel) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessModel.ProtoReflect.Descriptor instead.
func (*BusinessModel) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserLoginRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfo      *UserInfo              `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Openid        string                 `protobuf:"bytes,3,opt,name=openid,proto3" json:"openid,omitempty"`
	BusinessModel *BusinessModel         `protobuf:"bytes,4,opt,name=business_model,json=businessModel,proto3" json:"business_model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLoginRespData) Reset() {
	*x = UserLoginRespData{}
	mi := &file_chess_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginRespData) ProtoMessage() {}

func (x *UserLoginRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginRespData.ProtoReflect.Descriptor instead.
func (*UserLoginRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserLoginRespData) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UserLoginRespData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserLoginRespData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *UserLoginRespData) GetBusinessModel() *BusinessModel {
	if x != nil {
		return x.BusinessModel
	}
	return nil
}

// 用户登陆/注册 回执
type UserLoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserLoginRespData     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 用户信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLoginResp) Reset() {
	*x = UserLoginResp{}
	mi := &file_chess_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginResp) ProtoMessage() {}

func (x *UserLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginResp.ProtoReflect.Descriptor instead.
func (*UserLoginResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{3}
}

func (x *UserLoginResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserLoginResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserLoginResp) GetData() *UserLoginRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 用户注册
type UserRegisterReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegisterType  string                 `protobuf:"bytes,1,opt,name=register_type,json=registerType,proto3" json:"register_type,omitempty"`    // 注册类型:one_click
	PhoneNumber   string                 `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`       // 手机号
	ProjectSource string                 `protobuf:"bytes,3,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"` // 项目来源
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRegisterReq) Reset() {
	*x = UserRegisterReq{}
	mi := &file_chess_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterReq) ProtoMessage() {}

func (x *UserRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterReq.ProtoReflect.Descriptor instead.
func (*UserRegisterReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{4}
}

func (x *UserRegisterReq) GetRegisterType() string {
	if x != nil {
		return x.RegisterType
	}
	return ""
}

func (x *UserRegisterReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserRegisterReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

type UserRegisterResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserRegisterData      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  //用户信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRegisterResp) Reset() {
	*x = UserRegisterResp{}
	mi := &file_chess_user_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterResp) ProtoMessage() {}

func (x *UserRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterResp.ProtoReflect.Descriptor instead.
func (*UserRegisterResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{5}
}

func (x *UserRegisterResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserRegisterResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserRegisterResp) GetData() *UserRegisterData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserRegisterData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRegisterData) Reset() {
	*x = UserRegisterData{}
	mi := &file_chess_user_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRegisterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterData) ProtoMessage() {}

func (x *UserRegisterData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterData.ProtoReflect.Descriptor instead.
func (*UserRegisterData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{6}
}

func (x *UserRegisterData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 手机验证码发送 请求
type SMSSendLoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhoneNumber   string                 `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                                   // 手机号
	SmsCodeType   E_SMS_CODE_TYPE        `protobuf:"varint,2,opt,name=sms_code_type,json=smsCodeType,proto3,enum=new_chess.E_SMS_CODE_TYPE" json:"sms_code_type,omitempty"` // 短信类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SMSSendLoginReq) Reset() {
	*x = SMSSendLoginReq{}
	mi := &file_chess_user_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SMSSendLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSSendLoginReq) ProtoMessage() {}

func (x *SMSSendLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSSendLoginReq.ProtoReflect.Descriptor instead.
func (*SMSSendLoginReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{7}
}

func (x *SMSSendLoginReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SMSSendLoginReq) GetSmsCodeType() E_SMS_CODE_TYPE {
	if x != nil {
		return x.SmsCodeType
	}
	return E_SMS_CODE_TYPE_SMS_CODE_ERROR_INVALID
}

// 手机验证码发送 回执
type SMSSendLoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SMSSendLoginResp) Reset() {
	*x = SMSSendLoginResp{}
	mi := &file_chess_user_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SMSSendLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSSendLoginResp) ProtoMessage() {}

func (x *SMSSendLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSSendLoginResp.ProtoReflect.Descriptor instead.
func (*SMSSendLoginResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{8}
}

func (x *SMSSendLoginResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SMSSendLoginResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 绑定微信 请求
type OpenIDBindReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            // 用户id
	WechatCode    string                 `protobuf:"bytes,2,opt,name=wechat_code,json=wechatCode,proto3" json:"wechat_code,omitempty"` // 微信code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenIDBindReq) Reset() {
	*x = OpenIDBindReq{}
	mi := &file_chess_user_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenIDBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDBindReq) ProtoMessage() {}

func (x *OpenIDBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDBindReq.ProtoReflect.Descriptor instead.
func (*OpenIDBindReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{9}
}

func (x *OpenIDBindReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OpenIDBindReq) GetWechatCode() string {
	if x != nil {
		return x.WechatCode
	}
	return ""
}

// 绑定微信 回执
type OpenIDBindResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenIDBindResp) Reset() {
	*x = OpenIDBindResp{}
	mi := &file_chess_user_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenIDBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDBindResp) ProtoMessage() {}

func (x *OpenIDBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDBindResp.ProtoReflect.Descriptor instead.
func (*OpenIDBindResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{10}
}

func (x *OpenIDBindResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpenIDBindResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 上传用户信息
type UserUploadGeographicReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoginIp       string                 `protobuf:"bytes,1,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"` // 登录ip
	Location      string                 `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`              // 位置信息
	Longitude     float64                `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`          // 经度
	Latitude      float64                `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`            // 纬度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUploadGeographicReq) Reset() {
	*x = UserUploadGeographicReq{}
	mi := &file_chess_user_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUploadGeographicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUploadGeographicReq) ProtoMessage() {}

func (x *UserUploadGeographicReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUploadGeographicReq.ProtoReflect.Descriptor instead.
func (*UserUploadGeographicReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{11}
}

func (x *UserUploadGeographicReq) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *UserUploadGeographicReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserUploadGeographicReq) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UserUploadGeographicReq) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type UserUploadGeographicResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUploadGeographicResp) Reset() {
	*x = UserUploadGeographicResp{}
	mi := &file_chess_user_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUploadGeographicResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUploadGeographicResp) ProtoMessage() {}

func (x *UserUploadGeographicResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUploadGeographicResp.ProtoReflect.Descriptor instead.
func (*UserUploadGeographicResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{12}
}

func (x *UserUploadGeographicResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserUploadGeographicResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户反馈信息请求
type FeedbackUploadReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 反馈问题类型 0 分数问题，2 功能问题，3 违法举报，4 反馈建议，5 其他
	Desc           string                 `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Contact        string                 `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
	ScreenshotUrls string                 `protobuf:"bytes,4,opt,name=screenshot_urls,json=screenshotUrls,proto3" json:"screenshot_urls,omitempty"`
	ReportedUid    uint64                 `protobuf:"varint,5,opt,name=reported_uid,json=reportedUid,proto3" json:"reported_uid,omitempty"` // 被举报玩家uid
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FeedbackUploadReq) Reset() {
	*x = FeedbackUploadReq{}
	mi := &file_chess_user_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackUploadReq) ProtoMessage() {}

func (x *FeedbackUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackUploadReq.ProtoReflect.Descriptor instead.
func (*FeedbackUploadReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{13}
}

func (x *FeedbackUploadReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FeedbackUploadReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FeedbackUploadReq) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *FeedbackUploadReq) GetScreenshotUrls() string {
	if x != nil {
		return x.ScreenshotUrls
	}
	return ""
}

func (x *FeedbackUploadReq) GetReportedUid() uint64 {
	if x != nil {
		return x.ReportedUid
	}
	return 0
}

// 用户反馈信息响应
type FeedbackUploadResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedbackUploadResp) Reset() {
	*x = FeedbackUploadResp{}
	mi := &file_chess_user_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackUploadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackUploadResp) ProtoMessage() {}

func (x *FeedbackUploadResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackUploadResp.ProtoReflect.Descriptor instead.
func (*FeedbackUploadResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{14}
}

func (x *FeedbackUploadResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FeedbackUploadResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 获取用户手机号列表请求
type GetUserPhonesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UidList       []uint64               `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserPhonesReq) Reset() {
	*x = GetUserPhonesReq{}
	mi := &file_chess_user_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPhonesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhonesReq) ProtoMessage() {}

func (x *GetUserPhonesReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhonesReq.ProtoReflect.Descriptor instead.
func (*GetUserPhonesReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{15}
}

func (x *GetUserPhonesReq) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

// 用户手机信息
type UserPhone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Phone         string                 `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPhone) Reset() {
	*x = UserPhone{}
	mi := &file_chess_user_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhone) ProtoMessage() {}

func (x *UserPhone) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhone.ProtoReflect.Descriptor instead.
func (*UserPhone) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{16}
}

func (x *UserPhone) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type GetUserPhonesRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*UserPhone           `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserPhonesRespData) Reset() {
	*x = GetUserPhonesRespData{}
	mi := &file_chess_user_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPhonesRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhonesRespData) ProtoMessage() {}

func (x *GetUserPhonesRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhonesRespData.ProtoReflect.Descriptor instead.
func (*GetUserPhonesRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserPhonesRespData) GetList() []*UserPhone {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取用户手机号列表响应
type GetUserPhonesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *GetUserPhonesRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserPhonesResp) Reset() {
	*x = GetUserPhonesResp{}
	mi := &file_chess_user_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPhonesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhonesResp) ProtoMessage() {}

func (x *GetUserPhonesResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhonesResp.ProtoReflect.Descriptor instead.
func (*GetUserPhonesResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{18}
}

func (x *GetUserPhonesResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserPhonesResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserPhonesResp) GetData() *GetUserPhonesRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 修改个人信息
type UpdateUserInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModifyType    UserModifyType         `protobuf:"varint,1,opt,name=modify_type,json=modifyType,proto3,enum=new_chess.UserModifyType" json:"modify_type,omitempty"` // 修改类型：1 重新绑定手机号码；2 修改性别 3 修改密码
	Phone         string                 `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`                                                            // 新手机号码
	VerifyCode    string                 `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`                                // 验证码
	Gender        int32                  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`                                                         // 性别: 1 表示男，2 表示女
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                                                      // 密码
	Nickname      string                 `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                      // 昵称
	AvatarUrl     string                 `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                   // 头像
	Uid           uint64                 `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`                                                               // 用户id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	mi := &file_chess_user_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateUserInfoReq) GetModifyType() UserModifyType {
	if x != nil {
		return x.ModifyType
	}
	return UserModifyType_ERROR_INVALID
}

func (x *UpdateUserInfoReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateUserInfoReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *UpdateUserInfoReq) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UpdateUserInfoReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserInfoReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdateUserInfoReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateUserInfoReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type UpdateUserInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserInfoResp) Reset() {
	*x = UpdateUserInfoResp{}
	mi := &file_chess_user_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResp) ProtoMessage() {}

func (x *UpdateUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetUserInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInfoReq) Reset() {
	*x = GetUserInfoReq{}
	mi := &file_chess_user_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoReq) ProtoMessage() {}

func (x *GetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserInfoReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetUserInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserInfo              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInfoResp) Reset() {
	*x = GetUserInfoResp{}
	mi := &file_chess_user_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResp) ProtoMessage() {}

func (x *GetUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResp.ProtoReflect.Descriptor instead.
func (*GetUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserInfoResp) GetData() *UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchGetUserInfoReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UidList           []uint64               `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	QueryFields       []string               `protobuf:"bytes,2,rep,name=query_fields,json=queryFields,proto3" json:"query_fields,omitempty"`                     // 查询字段
	GetRealAuth       bool                   `protobuf:"varint,3,opt,name=get_real_auth,json=getRealAuth,proto3" json:"get_real_auth,omitempty"`                  // 是否查询实名信息 默认false
	StartRegisterTime string                 `protobuf:"bytes,4,opt,name=start_register_time,json=startRegisterTime,proto3" json:"start_register_time,omitempty"` // 注册开始时间 (格式：2020-01-01)
	EndRegisterTime   string                 `protobuf:"bytes,5,opt,name=end_register_time,json=endRegisterTime,proto3" json:"end_register_time,omitempty"`       // 注册结束时间 (格式：2020-01-02)
	Page              int32                  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`                                                     // 页码
	PageSize          int32                  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                             // 每页数量
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BatchGetUserInfoReq) Reset() {
	*x = BatchGetUserInfoReq{}
	mi := &file_chess_user_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoReq) ProtoMessage() {}

func (x *BatchGetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoReq.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{23}
}

func (x *BatchGetUserInfoReq) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *BatchGetUserInfoReq) GetQueryFields() []string {
	if x != nil {
		return x.QueryFields
	}
	return nil
}

func (x *BatchGetUserInfoReq) GetGetRealAuth() bool {
	if x != nil {
		return x.GetRealAuth
	}
	return false
}

func (x *BatchGetUserInfoReq) GetStartRegisterTime() string {
	if x != nil {
		return x.StartRegisterTime
	}
	return ""
}

func (x *BatchGetUserInfoReq) GetEndRegisterTime() string {
	if x != nil {
		return x.EndRegisterTime
	}
	return ""
}

func (x *BatchGetUserInfoReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BatchGetUserInfoReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type BatchGetUserInfoRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfoList  []*UserInfo            `protobuf:"bytes,1,rep,name=user_info_list,json=userInfoList,proto3" json:"user_info_list,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserInfoRespData) Reset() {
	*x = BatchGetUserInfoRespData{}
	mi := &file_chess_user_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserInfoRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoRespData) ProtoMessage() {}

func (x *BatchGetUserInfoRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoRespData.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{24}
}

func (x *BatchGetUserInfoRespData) GetUserInfoList() []*UserInfo {
	if x != nil {
		return x.UserInfoList
	}
	return nil
}

func (x *BatchGetUserInfoRespData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type BatchGetUserInfoResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Code          int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *BatchGetUserInfoRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserInfoResp) Reset() {
	*x = BatchGetUserInfoResp{}
	mi := &file_chess_user_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoResp) ProtoMessage() {}

func (x *BatchGetUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoResp.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{25}
}

func (x *BatchGetUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchGetUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BatchGetUserInfoResp) GetData() *BatchGetUserInfoRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserIdByPhoneReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Phone         string                 `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserIdByPhoneReq) Reset() {
	*x = GetUserIdByPhoneReq{}
	mi := &file_chess_user_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserIdByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIdByPhoneReq) ProtoMessage() {}

func (x *GetUserIdByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIdByPhoneReq.ProtoReflect.Descriptor instead.
func (*GetUserIdByPhoneReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{26}
}

func (x *GetUserIdByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type GetUserIdByPhoneResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserInfo              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserIdByPhoneResp) Reset() {
	*x = GetUserIdByPhoneResp{}
	mi := &file_chess_user_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserIdByPhoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIdByPhoneResp) ProtoMessage() {}

func (x *GetUserIdByPhoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIdByPhoneResp.ProtoReflect.Descriptor instead.
func (*GetUserIdByPhoneResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{27}
}

func (x *GetUserIdByPhoneResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserIdByPhoneResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserIdByPhoneResp) GetData() *UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                // 用户uid
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                                       // 账户名
	Nickname      string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                       // 用户昵称
	AvatarUrl     string                 `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                    // 头像
	PhoneNumber   string                 `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                              // 绑定手机号码
	IsRealAuth    int64                  `protobuf:"varint,6,opt,name=is_real_auth,json=isRealAuth,proto3" json:"is_real_auth,omitempty"`                              // 是否实名
	RealName      string                 `protobuf:"bytes,7,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                                       // 真实姓名
	IdCard        string                 `protobuf:"bytes,8,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`                                             // 身份证号
	RegisterTime  string                 `protobuf:"bytes,9,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`                           // 注册时间
	Gender        int64                  `protobuf:"varint,10,opt,name=gender,proto3" json:"gender,omitempty"`                                                         // 性别1男2女
	UserStatus    UserStatusType         `protobuf:"varint,11,opt,name=user_status,json=userStatus,proto3,enum=new_chess.UserStatusType" json:"user_status,omitempty"` // 用户状态 1、正常，2、禁用 3、删除
	LastLoginTime string                 `protobuf:"bytes,12,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`                     // 最后登录时间
	CreateTime    string                 `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                // 记录创建时间无业务意义
	UpdateTime    string                 `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                // 记录更新时间无业务意义
	IsWatch       int64                  `protobuf:"varint,15,opt,name=is_watch,json=isWatch,proto3" json:"is_watch,omitempty"`                                        // 是否观战中：1、是
	Token         string                 `protobuf:"bytes,16,opt,name=token,proto3" json:"token,omitempty"`                                                            // token
	IfGame        int64                  `protobuf:"varint,17,opt,name=if_game,json=ifGame,proto3" json:"if_game,omitempty"`                                           // 是否游戏中
	HallOnline    int64                  `protobuf:"varint,18,opt,name=hall_online,json=hallOnline,proto3" json:"hall_online,omitempty"`                               // 大厅在线状态
	RoomInfo      *platform.StRoomType   `protobuf:"bytes,19,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`                                      // 房间信息（如果用户在房间中）
	GameAddr      string                 `protobuf:"bytes,20,opt,name=game_addr,json=gameAddr,proto3" json:"game_addr,omitempty"`                                      // 游戏长连接地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_chess_user_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{28}
}

func (x *UserInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserInfo) GetIsRealAuth() int64 {
	if x != nil {
		return x.IsRealAuth
	}
	return 0
}

func (x *UserInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserInfo) GetRegisterTime() string {
	if x != nil {
		return x.RegisterTime
	}
	return ""
}

func (x *UserInfo) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UserInfo) GetUserStatus() UserStatusType {
	if x != nil {
		return x.UserStatus
	}
	return UserStatusType_USER_STATUS_INVALID
}

func (x *UserInfo) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *UserInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *UserInfo) GetIsWatch() int64 {
	if x != nil {
		return x.IsWatch
	}
	return 0
}

func (x *UserInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserInfo) GetIfGame() int64 {
	if x != nil {
		return x.IfGame
	}
	return 0
}

func (x *UserInfo) GetHallOnline() int64 {
	if x != nil {
		return x.HallOnline
	}
	return 0
}

func (x *UserInfo) GetRoomInfo() *platform.StRoomType {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *UserInfo) GetGameAddr() string {
	if x != nil {
		return x.GameAddr
	}
	return ""
}

// 用户实名认证
type UserCertificationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`               // 姓名
	UserIdNumber  string                 `protobuf:"bytes,2,opt,name=user_id_number,json=userIdNumber,proto3" json:"user_id_number,omitempty"` // 身份证号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCertificationReq) Reset() {
	*x = UserCertificationReq{}
	mi := &file_chess_user_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCertificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCertificationReq) ProtoMessage() {}

func (x *UserCertificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCertificationReq.ProtoReflect.Descriptor instead.
func (*UserCertificationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{29}
}

func (x *UserCertificationReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserCertificationReq) GetUserIdNumber() string {
	if x != nil {
		return x.UserIdNumber
	}
	return ""
}

type UserCertificationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCertificationResp) Reset() {
	*x = UserCertificationResp{}
	mi := &file_chess_user_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCertificationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCertificationResp) ProtoMessage() {}

func (x *UserCertificationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCertificationResp.ProtoReflect.Descriptor instead.
func (*UserCertificationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{30}
}

func (x *UserCertificationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserCertificationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户权限组织关系相关
type CreateOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                          // 组织名
	ParentId      uint32                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganizationReq) Reset() {
	*x = CreateOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationReq) ProtoMessage() {}

func (x *CreateOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationReq.ProtoReflect.Descriptor instead.
func (*CreateOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{31}
}

func (x *CreateOrganizationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationReq) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type CreateOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganizationResp) Reset() {
	*x = CreateOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationResp) ProtoMessage() {}

func (x *CreateOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationResp.ProtoReflect.Descriptor instead.
func (*CreateOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{32}
}

func (x *CreateOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UpdateOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // 组织id
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                          // 组织名称
	ParentId      uint32                 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationReq) Reset() {
	*x = UpdateOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationReq) ProtoMessage() {}

func (x *UpdateOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationReq.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateOrganizationReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrganizationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationReq) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type UpdateOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationResp) Reset() {
	*x = UpdateOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationResp) ProtoMessage() {}

func (x *UpdateOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationResp.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeleteOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrganizationReq) Reset() {
	*x = DeleteOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationReq) ProtoMessage() {}

func (x *DeleteOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationReq.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteOrganizationReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrganizationResp) Reset() {
	*x = DeleteOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationResp) ProtoMessage() {}

func (x *DeleteOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationResp.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Organization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // uid
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                          // 组织名称
	ParentId      uint32                 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Organization) Reset() {
	*x = Organization{}
	mi := &file_chess_user_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{37}
}

func (x *Organization) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type GetOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationReq) Reset() {
	*x = GetOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationReq) ProtoMessage() {}

func (x *GetOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationReq.ProtoReflect.Descriptor instead.
func (*GetOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{38}
}

func (x *GetOrganizationReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *Organization          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 组织信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationResp) Reset() {
	*x = GetOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationResp) ProtoMessage() {}

func (x *GetOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationResp.ProtoReflect.Descriptor instead.
func (*GetOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{39}
}

func (x *GetOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetOrganizationResp) GetData() *Organization {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrganizationChildrenRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*Organization        `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationChildrenRespData) Reset() {
	*x = GetOrganizationChildrenRespData{}
	mi := &file_chess_user_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationChildrenRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationChildrenRespData) ProtoMessage() {}

func (x *GetOrganizationChildrenRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationChildrenRespData.ProtoReflect.Descriptor instead.
func (*GetOrganizationChildrenRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{40}
}

func (x *GetOrganizationChildrenRespData) GetList() []*Organization {
	if x != nil {
		return x.List
	}
	return nil
}

type GetOrganizationChildrenResp struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Code          int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *GetOrganizationChildrenRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 组织信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationChildrenResp) Reset() {
	*x = GetOrganizationChildrenResp{}
	mi := &file_chess_user_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationChildrenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationChildrenResp) ProtoMessage() {}

func (x *GetOrganizationChildrenResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationChildrenResp.ProtoReflect.Descriptor instead.
func (*GetOrganizationChildrenResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{41}
}

func (x *GetOrganizationChildrenResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrganizationChildrenResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetOrganizationChildrenResp) GetData() *GetOrganizationChildrenRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BindUserToOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	OrgId         uint32                 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`    // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindUserToOrganizationReq) Reset() {
	*x = BindUserToOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindUserToOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserToOrganizationReq) ProtoMessage() {}

func (x *BindUserToOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserToOrganizationReq.ProtoReflect.Descriptor instead.
func (*BindUserToOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{42}
}

func (x *BindUserToOrganizationReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BindUserToOrganizationReq) GetOrgId() uint32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type BindUserToOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindUserToOrganizationResp) Reset() {
	*x = BindUserToOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindUserToOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserToOrganizationResp) ProtoMessage() {}

func (x *BindUserToOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserToOrganizationResp.ProtoReflect.Descriptor instead.
func (*BindUserToOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{43}
}

func (x *BindUserToOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BindUserToOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UnbindUserToOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	OrgId         uint32                 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`    // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnbindUserToOrganizationReq) Reset() {
	*x = UnbindUserToOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbindUserToOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindUserToOrganizationReq) ProtoMessage() {}

func (x *UnbindUserToOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindUserToOrganizationReq.ProtoReflect.Descriptor instead.
func (*UnbindUserToOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{44}
}

func (x *UnbindUserToOrganizationReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UnbindUserToOrganizationReq) GetOrgId() uint32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type UnbindUserToOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnbindUserToOrganizationResp) Reset() {
	*x = UnbindUserToOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbindUserToOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindUserToOrganizationResp) ProtoMessage() {}

func (x *UnbindUserToOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindUserToOrganizationResp.ProtoReflect.Descriptor instead.
func (*UnbindUserToOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{45}
}

func (x *UnbindUserToOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UnbindUserToOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 权限树
type PermTree struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`            // 权限id
	Label         string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`       // 标识
	Type          uint32                 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`        // 权限类型：1页面，2路由，3数据
	Node          string                 `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`         // 节点序列码：如：system:HealthManage:list:view
	Children      []*PermTree            `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"` // 子节点
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermTree) Reset() {
	*x = PermTree{}
	mi := &file_chess_user_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermTree) ProtoMessage() {}

func (x *PermTree) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermTree.ProtoReflect.Descriptor instead.
func (*PermTree) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{46}
}

func (x *PermTree) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PermTree) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PermTree) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PermTree) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *PermTree) GetChildren() []*PermTree {
	if x != nil {
		return x.Children
	}
	return nil
}

// 用户组织关系结构，多个
type OrgTreeUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         []uint32               `protobuf:"varint,1,rep,packed,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`          // 组织id集合
	ParentId      []uint32               `protobuf:"varint,2,rep,packed,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id集合
	OrgName       []string               `protobuf:"bytes,3,rep,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`            // 组织名称集合
	Perm          *PermTree              `protobuf:"bytes,4,opt,name=perm,proto3" json:"perm,omitempty"`                                 // 权限树
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrgTreeUser) Reset() {
	*x = OrgTreeUser{}
	mi := &file_chess_user_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgTreeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgTreeUser) ProtoMessage() {}

func (x *OrgTreeUser) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgTreeUser.ProtoReflect.Descriptor instead.
func (*OrgTreeUser) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{47}
}

func (x *OrgTreeUser) GetOrgId() []uint32 {
	if x != nil {
		return x.OrgId
	}
	return nil
}

func (x *OrgTreeUser) GetParentId() []uint32 {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *OrgTreeUser) GetOrgName() []string {
	if x != nil {
		return x.OrgName
	}
	return nil
}

func (x *OrgTreeUser) GetPerm() *PermTree {
	if x != nil {
		return x.Perm
	}
	return nil
}

type GetOrgTreeUserReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 用户id
	ProjectSource string                 `protobuf:"bytes,2,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"` // 项目来源
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreeUserReq) Reset() {
	*x = GetOrgTreeUserReq{}
	mi := &file_chess_user_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreeUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreeUserReq) ProtoMessage() {}

func (x *GetOrgTreeUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreeUserReq.ProtoReflect.Descriptor instead.
func (*GetOrgTreeUserReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{48}
}

func (x *GetOrgTreeUserReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetOrgTreeUserReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

type GetOrgTreeUserResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *OrgTreeUser           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreeUserResp) Reset() {
	*x = GetOrgTreeUserResp{}
	mi := &file_chess_user_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreeUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreeUserResp) ProtoMessage() {}

func (x *GetOrgTreeUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreeUserResp.ProtoReflect.Descriptor instead.
func (*GetOrgTreeUserResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{49}
}

func (x *GetOrgTreeUserResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgTreeUserResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetOrgTreeUserResp) GetData() *OrgTreeUser {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgTreePermReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgIds        []uint32               `protobuf:"varint,1,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`              // 组织id集合
	ProjectSource string                 `protobuf:"bytes,2,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"` // 项目来源
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreePermReq) Reset() {
	*x = GetOrgTreePermReq{}
	mi := &file_chess_user_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreePermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreePermReq) ProtoMessage() {}

func (x *GetOrgTreePermReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreePermReq.ProtoReflect.Descriptor instead.
func (*GetOrgTreePermReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{50}
}

func (x *GetOrgTreePermReq) GetOrgIds() []uint32 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *GetOrgTreePermReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

// 权限水平集合
type PermsArr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Api           []uint32               `protobuf:"varint,1,rep,packed,name=api,proto3" json:"api,omitempty"` // API权限
	View          []string               `protobuf:"bytes,2,rep,name=view,proto3" json:"view,omitempty"`       // view权限
	Data          []string               `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`       // 数据权限
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermsArr) Reset() {
	*x = PermsArr{}
	mi := &file_chess_user_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermsArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermsArr) ProtoMessage() {}

func (x *PermsArr) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermsArr.ProtoReflect.Descriptor instead.
func (*PermsArr) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{51}
}

func (x *PermsArr) GetApi() []uint32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *PermsArr) GetView() []string {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *PermsArr) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 用户搜索
type UserSearchReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Keyword            string                 `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`                                                    // 关键字 // 手机号、昵称、身份证号搜索（昵称模糊搜索，手机号、身份证号精确搜索） 默认搜索仅不含uid
	UidRange           []uint64               `protobuf:"varint,2,rep,packed,name=uid_range,json=uidRange,proto3" json:"uid_range,omitempty"`                          // uid范围
	OnlySearchUid      bool                   `protobuf:"varint,3,opt,name=only_search_uid,json=onlySearchUid,proto3" json:"only_search_uid,omitempty"`                // 仅搜索uid(模糊）
	OnlySearchPhone    bool                   `protobuf:"varint,4,opt,name=only_search_phone,json=onlySearchPhone,proto3" json:"only_search_phone,omitempty"`          // 仅搜索手机号(精准）
	OnlySearchIdCard   bool                   `protobuf:"varint,5,opt,name=only_search_id_card,json=onlySearchIdCard,proto3" json:"only_search_id_card,omitempty"`     // 仅搜索身份证号(精准）
	OnlySearchNickname bool                   `protobuf:"varint,6,opt,name=only_search_nickname,json=onlySearchNickname,proto3" json:"only_search_nickname,omitempty"` // 仅搜索昵称(模糊）
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserSearchReq) Reset() {
	*x = UserSearchReq{}
	mi := &file_chess_user_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchReq) ProtoMessage() {}

func (x *UserSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchReq.ProtoReflect.Descriptor instead.
func (*UserSearchReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{52}
}

func (x *UserSearchReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *UserSearchReq) GetUidRange() []uint64 {
	if x != nil {
		return x.UidRange
	}
	return nil
}

func (x *UserSearchReq) GetOnlySearchUid() bool {
	if x != nil {
		return x.OnlySearchUid
	}
	return false
}

func (x *UserSearchReq) GetOnlySearchPhone() bool {
	if x != nil {
		return x.OnlySearchPhone
	}
	return false
}

func (x *UserSearchReq) GetOnlySearchIdCard() bool {
	if x != nil {
		return x.OnlySearchIdCard
	}
	return false
}

func (x *UserSearchReq) GetOnlySearchNickname() bool {
	if x != nil {
		return x.OnlySearchNickname
	}
	return false
}

type UserSearchRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserList      []*UserInfo            `protobuf:"bytes,1,rep,name=user_list,json=userList,proto3" json:"user_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSearchRespData) Reset() {
	*x = UserSearchRespData{}
	mi := &file_chess_user_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSearchRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchRespData) ProtoMessage() {}

func (x *UserSearchRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchRespData.ProtoReflect.Descriptor instead.
func (*UserSearchRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{53}
}

func (x *UserSearchRespData) GetUserList() []*UserInfo {
	if x != nil {
		return x.UserList
	}
	return nil
}

type UserSearchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserSearchRespData    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSearchResp) Reset() {
	*x = UserSearchResp{}
	mi := &file_chess_user_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchResp) ProtoMessage() {}

func (x *UserSearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchResp.ProtoReflect.Descriptor instead.
func (*UserSearchResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{54}
}

func (x *UserSearchResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserSearchResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserSearchResp) GetData() *UserSearchRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_chess_user_proto protoreflect.FileDescriptor

var file_chess_user_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x72, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x04,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1f, 0x0a, 0x0d, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x67, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x69,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0f, 0x53, 0x4d, 0x53, 0x53, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d,
	0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52,
	0x0b, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x10,
	0x53, 0x4d, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x49, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x36, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x12,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x41, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x6f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x87, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x02, 0x0a,
	0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x18, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x75, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x65, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8f, 0x05, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x73, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x66, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x59, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x3d, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x48, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x58, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x4f, 0x0a, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x24, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x19, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x22, 0x42, 0x0a, 0x1a, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x4d, 0x0a, 0x1b, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x1c, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x50, 0x65,
	0x72, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x22, 0x53, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x44, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x75, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x2e, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x2a, 0x91, 0x01, 0x0a, 0x0f, 0x45, 0x5f, 0x53, 0x4d, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4d,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x0e, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0x72,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x03, 0x32, 0x87, 0x0e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x6d, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x4d,
	0x53, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x4d, 0x53, 0x53, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x69, 0x6e,
	0x64, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x44, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x22,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x42, 0x79, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x53, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x51, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x4f,
	0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1d,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54,
	0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x72,
	0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x11, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x67,
	0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x42, 0x1b, 0x5a, 0x19,
	0x2f, 0x6e, 0x65, 0x77, 0x2d, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_chess_user_proto_rawDescOnce sync.Once
	file_chess_user_proto_rawDescData []byte
)

func file_chess_user_proto_rawDescGZIP() []byte {
	file_chess_user_proto_rawDescOnce.Do(func() {
		file_chess_user_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chess_user_proto_rawDesc), len(file_chess_user_proto_rawDesc)))
	})
	return file_chess_user_proto_rawDescData
}

var file_chess_user_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chess_user_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_chess_user_proto_goTypes = []any{
	(UserRegisterType)(0),                   // 0: new_chess.UserRegisterType
	(E_SMS_CODE_TYPE)(0),                    // 1: new_chess.E_SMS_CODE_TYPE
	(UserModifyType)(0),                     // 2: new_chess.UserModifyType
	(UserStatusType)(0),                     // 3: new_chess.UserStatusType
	(*UserLoginReq)(nil),                    // 4: new_chess.UserLoginReq
	(*BusinessModel)(nil),                   // 5: new_chess.BusinessModel
	(*UserLoginRespData)(nil),               // 6: new_chess.UserLoginRespData
	(*UserLoginResp)(nil),                   // 7: new_chess.UserLoginResp
	(*UserRegisterReq)(nil),                 // 8: new_chess.UserRegisterReq
	(*UserRegisterResp)(nil),                // 9: new_chess.UserRegisterResp
	(*UserRegisterData)(nil),                // 10: new_chess.UserRegisterData
	(*SMSSendLoginReq)(nil),                 // 11: new_chess.SMSSendLoginReq
	(*SMSSendLoginResp)(nil),                // 12: new_chess.SMSSendLoginResp
	(*OpenIDBindReq)(nil),                   // 13: new_chess.OpenIDBindReq
	(*OpenIDBindResp)(nil),                  // 14: new_chess.OpenIDBindResp
	(*UserUploadGeographicReq)(nil),         // 15: new_chess.UserUploadGeographicReq
	(*UserUploadGeographicResp)(nil),        // 16: new_chess.UserUploadGeographicResp
	(*FeedbackUploadReq)(nil),               // 17: new_chess.FeedbackUploadReq
	(*FeedbackUploadResp)(nil),              // 18: new_chess.FeedbackUploadResp
	(*GetUserPhonesReq)(nil),                // 19: new_chess.GetUserPhonesReq
	(*UserPhone)(nil),                       // 20: new_chess.UserPhone
	(*GetUserPhonesRespData)(nil),           // 21: new_chess.GetUserPhonesRespData
	(*GetUserPhonesResp)(nil),               // 22: new_chess.GetUserPhonesResp
	(*UpdateUserInfoReq)(nil),               // 23: new_chess.UpdateUserInfoReq
	(*UpdateUserInfoResp)(nil),              // 24: new_chess.UpdateUserInfoResp
	(*GetUserInfoReq)(nil),                  // 25: new_chess.GetUserInfoReq
	(*GetUserInfoResp)(nil),                 // 26: new_chess.GetUserInfoResp
	(*BatchGetUserInfoReq)(nil),             // 27: new_chess.BatchGetUserInfoReq
	(*BatchGetUserInfoRespData)(nil),        // 28: new_chess.BatchGetUserInfoRespData
	(*BatchGetUserInfoResp)(nil),            // 29: new_chess.BatchGetUserInfoResp
	(*GetUserIdByPhoneReq)(nil),             // 30: new_chess.GetUserIdByPhoneReq
	(*GetUserIdByPhoneResp)(nil),            // 31: new_chess.GetUserIdByPhoneResp
	(*UserInfo)(nil),                        // 32: new_chess.UserInfo
	(*UserCertificationReq)(nil),            // 33: new_chess.UserCertificationReq
	(*UserCertificationResp)(nil),           // 34: new_chess.UserCertificationResp
	(*CreateOrganizationReq)(nil),           // 35: new_chess.CreateOrganizationReq
	(*CreateOrganizationResp)(nil),          // 36: new_chess.CreateOrganizationResp
	(*UpdateOrganizationReq)(nil),           // 37: new_chess.UpdateOrganizationReq
	(*UpdateOrganizationResp)(nil),          // 38: new_chess.UpdateOrganizationResp
	(*DeleteOrganizationReq)(nil),           // 39: new_chess.DeleteOrganizationReq
	(*DeleteOrganizationResp)(nil),          // 40: new_chess.DeleteOrganizationResp
	(*Organization)(nil),                    // 41: new_chess.Organization
	(*GetOrganizationReq)(nil),              // 42: new_chess.GetOrganizationReq
	(*GetOrganizationResp)(nil),             // 43: new_chess.GetOrganizationResp
	(*GetOrganizationChildrenRespData)(nil), // 44: new_chess.GetOrganizationChildrenRespData
	(*GetOrganizationChildrenResp)(nil),     // 45: new_chess.GetOrganizationChildrenResp
	(*BindUserToOrganizationReq)(nil),       // 46: new_chess.BindUserToOrganizationReq
	(*BindUserToOrganizationResp)(nil),      // 47: new_chess.BindUserToOrganizationResp
	(*UnbindUserToOrganizationReq)(nil),     // 48: new_chess.UnbindUserToOrganizationReq
	(*UnbindUserToOrganizationResp)(nil),    // 49: new_chess.UnbindUserToOrganizationResp
	(*PermTree)(nil),                        // 50: new_chess.PermTree
	(*OrgTreeUser)(nil),                     // 51: new_chess.OrgTreeUser
	(*GetOrgTreeUserReq)(nil),               // 52: new_chess.GetOrgTreeUserReq
	(*GetOrgTreeUserResp)(nil),              // 53: new_chess.GetOrgTreeUserResp
	(*GetOrgTreePermReq)(nil),               // 54: new_chess.GetOrgTreePermReq
	(*PermsArr)(nil),                        // 55: new_chess.PermsArr
	(*UserSearchReq)(nil),                   // 56: new_chess.UserSearchReq
	(*UserSearchRespData)(nil),              // 57: new_chess.UserSearchRespData
	(*UserSearchResp)(nil),                  // 58: new_chess.UserSearchResp
	(*platform.StRoomType)(nil),             // 59: new_chess.st_room_type
}
var file_chess_user_proto_depIdxs = []int32{
	32, // 0: new_chess.UserLoginRespData.user_info:type_name -> new_chess.UserInfo
	5,  // 1: new_chess.UserLoginRespData.business_model:type_name -> new_chess.BusinessModel
	6,  // 2: new_chess.UserLoginResp.data:type_name -> new_chess.UserLoginRespData
	10, // 3: new_chess.UserRegisterResp.data:type_name -> new_chess.UserRegisterData
	1,  // 4: new_chess.SMSSendLoginReq.sms_code_type:type_name -> new_chess.E_SMS_CODE_TYPE
	20, // 5: new_chess.GetUserPhonesRespData.list:type_name -> new_chess.UserPhone
	21, // 6: new_chess.GetUserPhonesResp.data:type_name -> new_chess.GetUserPhonesRespData
	2,  // 7: new_chess.UpdateUserInfoReq.modify_type:type_name -> new_chess.UserModifyType
	32, // 8: new_chess.GetUserInfoResp.data:type_name -> new_chess.UserInfo
	32, // 9: new_chess.BatchGetUserInfoRespData.user_info_list:type_name -> new_chess.UserInfo
	28, // 10: new_chess.BatchGetUserInfoResp.data:type_name -> new_chess.BatchGetUserInfoRespData
	32, // 11: new_chess.GetUserIdByPhoneResp.data:type_name -> new_chess.UserInfo
	3,  // 12: new_chess.UserInfo.user_status:type_name -> new_chess.UserStatusType
	59, // 13: new_chess.UserInfo.room_info:type_name -> new_chess.st_room_type
	41, // 14: new_chess.GetOrganizationResp.data:type_name -> new_chess.Organization
	41, // 15: new_chess.GetOrganizationChildrenRespData.list:type_name -> new_chess.Organization
	44, // 16: new_chess.GetOrganizationChildrenResp.data:type_name -> new_chess.GetOrganizationChildrenRespData
	50, // 17: new_chess.PermTree.children:type_name -> new_chess.PermTree
	50, // 18: new_chess.OrgTreeUser.perm:type_name -> new_chess.PermTree
	51, // 19: new_chess.GetOrgTreeUserResp.data:type_name -> new_chess.OrgTreeUser
	32, // 20: new_chess.UserSearchRespData.user_list:type_name -> new_chess.UserInfo
	57, // 21: new_chess.UserSearchResp.data:type_name -> new_chess.UserSearchRespData
	11, // 22: new_chess.UserServer.SmsSendLogin:input_type -> new_chess.SMSSendLoginReq
	4,  // 23: new_chess.UserServer.UserLogin:input_type -> new_chess.UserLoginReq
	8,  // 24: new_chess.UserServer.UserRegister:input_type -> new_chess.UserRegisterReq
	13, // 25: new_chess.UserServer.OpenIDBind:input_type -> new_chess.OpenIDBindReq
	15, // 26: new_chess.UserServer.UserUploadGeographic:input_type -> new_chess.UserUploadGeographicReq
	17, // 27: new_chess.UserServer.FeedbackUpload:input_type -> new_chess.FeedbackUploadReq
	19, // 28: new_chess.UserServer.GetUserPhonesByUidList:input_type -> new_chess.GetUserPhonesReq
	23, // 29: new_chess.UserServer.UpdateUserInfo:input_type -> new_chess.UpdateUserInfoReq
	25, // 30: new_chess.UserServer.GetUserInfo:input_type -> new_chess.GetUserInfoReq
	27, // 31: new_chess.UserServer.BatchGetUserInfo:input_type -> new_chess.BatchGetUserInfoReq
	30, // 32: new_chess.UserServer.GetUserIdByPhone:input_type -> new_chess.GetUserIdByPhoneReq
	33, // 33: new_chess.UserServer.UserCertification:input_type -> new_chess.UserCertificationReq
	35, // 34: new_chess.UserServer.AddOrgTree:input_type -> new_chess.CreateOrganizationReq
	37, // 35: new_chess.UserServer.SetOrgTree:input_type -> new_chess.UpdateOrganizationReq
	39, // 36: new_chess.UserServer.DelOrgTree:input_type -> new_chess.DeleteOrganizationReq
	42, // 37: new_chess.UserServer.GetOrgTree:input_type -> new_chess.GetOrganizationReq
	42, // 38: new_chess.UserServer.GetOrgTreeChildren:input_type -> new_chess.GetOrganizationReq
	52, // 39: new_chess.UserServer.GetOrgTreeUser:input_type -> new_chess.GetOrgTreeUserReq
	54, // 40: new_chess.UserServer.GetOrgTreePerm:input_type -> new_chess.GetOrgTreePermReq
	46, // 41: new_chess.UserServer.BindOrgTreeUser:input_type -> new_chess.BindUserToOrganizationReq
	48, // 42: new_chess.UserServer.UnBindOrgTreeUser:input_type -> new_chess.UnbindUserToOrganizationReq
	56, // 43: new_chess.UserServer.UserSearch:input_type -> new_chess.UserSearchReq
	12, // 44: new_chess.UserServer.SmsSendLogin:output_type -> new_chess.SMSSendLoginResp
	7,  // 45: new_chess.UserServer.UserLogin:output_type -> new_chess.UserLoginResp
	9,  // 46: new_chess.UserServer.UserRegister:output_type -> new_chess.UserRegisterResp
	14, // 47: new_chess.UserServer.OpenIDBind:output_type -> new_chess.OpenIDBindResp
	16, // 48: new_chess.UserServer.UserUploadGeographic:output_type -> new_chess.UserUploadGeographicResp
	18, // 49: new_chess.UserServer.FeedbackUpload:output_type -> new_chess.FeedbackUploadResp
	22, // 50: new_chess.UserServer.GetUserPhonesByUidList:output_type -> new_chess.GetUserPhonesResp
	24, // 51: new_chess.UserServer.UpdateUserInfo:output_type -> new_chess.UpdateUserInfoResp
	26, // 52: new_chess.UserServer.GetUserInfo:output_type -> new_chess.GetUserInfoResp
	29, // 53: new_chess.UserServer.BatchGetUserInfo:output_type -> new_chess.BatchGetUserInfoResp
	31, // 54: new_chess.UserServer.GetUserIdByPhone:output_type -> new_chess.GetUserIdByPhoneResp
	34, // 55: new_chess.UserServer.UserCertification:output_type -> new_chess.UserCertificationResp
	36, // 56: new_chess.UserServer.AddOrgTree:output_type -> new_chess.CreateOrganizationResp
	38, // 57: new_chess.UserServer.SetOrgTree:output_type -> new_chess.UpdateOrganizationResp
	40, // 58: new_chess.UserServer.DelOrgTree:output_type -> new_chess.DeleteOrganizationResp
	43, // 59: new_chess.UserServer.GetOrgTree:output_type -> new_chess.GetOrganizationResp
	45, // 60: new_chess.UserServer.GetOrgTreeChildren:output_type -> new_chess.GetOrganizationChildrenResp
	53, // 61: new_chess.UserServer.GetOrgTreeUser:output_type -> new_chess.GetOrgTreeUserResp
	53, // 62: new_chess.UserServer.GetOrgTreePerm:output_type -> new_chess.GetOrgTreeUserResp
	47, // 63: new_chess.UserServer.BindOrgTreeUser:output_type -> new_chess.BindUserToOrganizationResp
	49, // 64: new_chess.UserServer.UnBindOrgTreeUser:output_type -> new_chess.UnbindUserToOrganizationResp
	58, // 65: new_chess.UserServer.UserSearch:output_type -> new_chess.UserSearchResp
	44, // [44:66] is the sub-list for method output_type
	22, // [22:44] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_chess_user_proto_init() }
func file_chess_user_proto_init() {
	if File_chess_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chess_user_proto_rawDesc), len(file_chess_user_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chess_user_proto_goTypes,
		DependencyIndexes: file_chess_user_proto_depIdxs,
		EnumInfos:         file_chess_user_proto_enumTypes,
		MessageInfos:      file_chess_user_proto_msgTypes,
	}.Build()
	File_chess_user_proto = out.File
	file_chess_user_proto_goTypes = nil
	file_chess_user_proto_depIdxs = nil
}
