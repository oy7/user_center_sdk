// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.5.0
// source: chess_user.proto

package user

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserRegisterType int32

const (
	UserRegisterType_DEFAULT   UserRegisterType = 0 // 默认值
	UserRegisterType_ONE_CLICK UserRegisterType = 1 // 一键注册
)

// Enum value maps for UserRegisterType.
var (
	UserRegisterType_name = map[int32]string{
		0: "DEFAULT",
		1: "ONE_CLICK",
	}
	UserRegisterType_value = map[string]int32{
		"DEFAULT":   0,
		"ONE_CLICK": 1,
	}
)

func (x UserRegisterType) Enum() *UserRegisterType {
	p := new(UserRegisterType)
	*p = x
	return p
}

func (x UserRegisterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRegisterType) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[0].Descriptor()
}

func (UserRegisterType) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[0]
}

func (x UserRegisterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRegisterType.Descriptor instead.
func (UserRegisterType) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{0}
}

// 手机验证码类型
type E_SMS_CODE_TYPE int32

const (
	E_SMS_CODE_TYPE_SMS_CODE_ERROR_INVALID   E_SMS_CODE_TYPE = 0 // 无效
	E_SMS_CODE_TYPE_SMS_CODE_REGISTER        E_SMS_CODE_TYPE = 1 // 注册验证码
	E_SMS_CODE_TYPE_SMS_CODE_LOGIN           E_SMS_CODE_TYPE = 2 // 登录验证码
	E_SMS_CODE_TYPE_SMS_CODE_REBIND_PHONE    E_SMS_CODE_TYPE = 3 // 重新绑定手机号码
	E_SMS_CODE_TYPE_SMS_CODE_UPDATE_PASSWORD E_SMS_CODE_TYPE = 4 // 修改密码
	E_SMS_CODE_TYPE_SMS_CODE_BIND_PHONE      E_SMS_CODE_TYPE = 5 // 绑定手机号码
)

// Enum value maps for E_SMS_CODE_TYPE.
var (
	E_SMS_CODE_TYPE_name = map[int32]string{
		0: "SMS_CODE_ERROR_INVALID",
		1: "SMS_CODE_REGISTER",
		2: "SMS_CODE_LOGIN",
		3: "SMS_CODE_REBIND_PHONE",
		4: "SMS_CODE_UPDATE_PASSWORD",
		5: "SMS_CODE_BIND_PHONE",
	}
	E_SMS_CODE_TYPE_value = map[string]int32{
		"SMS_CODE_ERROR_INVALID":   0,
		"SMS_CODE_REGISTER":        1,
		"SMS_CODE_LOGIN":           2,
		"SMS_CODE_REBIND_PHONE":    3,
		"SMS_CODE_UPDATE_PASSWORD": 4,
		"SMS_CODE_BIND_PHONE":      5,
	}
)

func (x E_SMS_CODE_TYPE) Enum() *E_SMS_CODE_TYPE {
	p := new(E_SMS_CODE_TYPE)
	*p = x
	return p
}

func (x E_SMS_CODE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E_SMS_CODE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[1].Descriptor()
}

func (E_SMS_CODE_TYPE) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[1]
}

func (x E_SMS_CODE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E_SMS_CODE_TYPE.Descriptor instead.
func (E_SMS_CODE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{1}
}

// 修改个人信息
type UserModifyType int32

const (
	UserModifyType_ERROR_INVALID   UserModifyType = 0 // 无效
	UserModifyType_REBIND_PHONE    UserModifyType = 1 // 重新绑定手机号
	UserModifyType_UPDATE_GENDER   UserModifyType = 2 // 修改性别
	UserModifyType_UPDATE_PASSWORD UserModifyType = 3 // 修改密码
	UserModifyType_UPDATE_NICKNAME UserModifyType = 4 // 修改昵称头像
)

// Enum value maps for UserModifyType.
var (
	UserModifyType_name = map[int32]string{
		0: "ERROR_INVALID",
		1: "REBIND_PHONE",
		2: "UPDATE_GENDER",
		3: "UPDATE_PASSWORD",
		4: "UPDATE_NICKNAME",
	}
	UserModifyType_value = map[string]int32{
		"ERROR_INVALID":   0,
		"REBIND_PHONE":    1,
		"UPDATE_GENDER":   2,
		"UPDATE_PASSWORD": 3,
		"UPDATE_NICKNAME": 4,
	}
)

func (x UserModifyType) Enum() *UserModifyType {
	p := new(UserModifyType)
	*p = x
	return p
}

func (x UserModifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserModifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[2].Descriptor()
}

func (UserModifyType) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[2]
}

func (x UserModifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserModifyType.Descriptor instead.
func (UserModifyType) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{2}
}

// 用户状态
type UserStatusType int32

const (
	UserStatusType_USER_STATUS_INVALID UserStatusType = 0 // 无效
	UserStatusType_USER_STATUS_NORMAL  UserStatusType = 1 // 正常
	UserStatusType_USER_STATUS_DISABLE UserStatusType = 2 // 禁用
	UserStatusType_USER_STATUS_DELETE  UserStatusType = 3 // 删除
)

// Enum value maps for UserStatusType.
var (
	UserStatusType_name = map[int32]string{
		0: "USER_STATUS_INVALID",
		1: "USER_STATUS_NORMAL",
		2: "USER_STATUS_DISABLE",
		3: "USER_STATUS_DELETE",
	}
	UserStatusType_value = map[string]int32{
		"USER_STATUS_INVALID": 0,
		"USER_STATUS_NORMAL":  1,
		"USER_STATUS_DISABLE": 2,
		"USER_STATUS_DELETE":  3,
	}
)

func (x UserStatusType) Enum() *UserStatusType {
	p := new(UserStatusType)
	*p = x
	return p
}

func (x UserStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_chess_user_proto_enumTypes[3].Descriptor()
}

func (UserStatusType) Type() protoreflect.EnumType {
	return &file_chess_user_proto_enumTypes[3]
}

func (x UserStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatusType.Descriptor instead.
func (UserStatusType) EnumDescriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{3}
}

// 用户登陆/注册 请求
type UserLoginReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	LoginType          string                 `protobuf:"bytes,1,opt,name=login_type,json=loginType,proto3" json:"login_type,omitempty"`                               // 登陆类型
	UserId             int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 位置信息
	Password           string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`                                                  // 密码
	PhoneNumber        string                 `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                         // 手机号
	NickName           string                 `protobuf:"bytes,5,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`                                  // 昵称
	AvatarUrl          string                 `protobuf:"bytes,6,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                               // 头像
	SmsCode            string                 `protobuf:"bytes,7,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`                                     // 验证码
	WechatOpenId       string                 `protobuf:"bytes,8,opt,name=wechat_open_id,json=wechatOpenId,proto3" json:"wechat_open_id,omitempty"`                    // 微信openid
	WechatCode         string                 `protobuf:"bytes,9,opt,name=wechat_code,json=wechatCode,proto3" json:"wechat_code,omitempty"`                            // 微信code
	Ip                 string                 `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`                                                             // ip地址
	AppVersion         string                 `protobuf:"bytes,11,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`                           // app版本
	MachineCode        string                 `protobuf:"bytes,12,opt,name=machine_code,json=machineCode,proto3" json:"machine_code,omitempty"`                        // 机器码
	PhoneType          string                 `protobuf:"bytes,13,opt,name=phone_type,json=phoneType,proto3" json:"phone_type,omitempty"`                              // 手机类型
	PhoneVersion       string                 `protobuf:"bytes,14,opt,name=phone_version,json=phoneVersion,proto3" json:"phone_version,omitempty"`                     // 手机版本
	PhoneSystemVersion string                 `protobuf:"bytes,15,opt,name=phone_system_version,json=phoneSystemVersion,proto3" json:"phone_system_version,omitempty"` // 手机系统版本
	ProjectSource      string                 `protobuf:"bytes,16,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"`                  // 项目来源
	Token              string                 `protobuf:"bytes,17,opt,name=token,proto3" json:"token,omitempty"`                                                       // token
	Udid               string                 `protobuf:"bytes,18,opt,name=udid,proto3" json:"udid,omitempty"`                                                         // 设备唯一编号
	Channel            string                 `protobuf:"bytes,19,opt,name=channel,proto3" json:"channel,omitempty"`                                                   // 平台
	Longitude          float64                `protobuf:"fixed64,20,opt,name=longitude,proto3" json:"longitude,omitempty"`                                             // 经度
	Latitude           float64                `protobuf:"fixed64,21,opt,name=latitude,proto3" json:"latitude,omitempty"`                                               // 纬度
	Address            string                 `protobuf:"bytes,22,opt,name=address,proto3" json:"address,omitempty"`                                                   // 详细地址
	Province           string                 `protobuf:"bytes,23,opt,name=province,proto3" json:"province,omitempty"`                                                 // 省份
	City               string                 `protobuf:"bytes,24,opt,name=city,proto3" json:"city,omitempty"`                                                         // 城市
	Region             string                 `protobuf:"bytes,25,opt,name=region,proto3" json:"region,omitempty"`                                                     // 区域
	Imsi               string                 `protobuf:"bytes,26,opt,name=imsi,proto3" json:"imsi,omitempty"`                                                         // 手机sim卡标识
	Imei               string                 `protobuf:"bytes,27,opt,name=imei,proto3" json:"imei,omitempty"`                                                         // 手机硬件标识
	TMobile            string                 `protobuf:"bytes,28,opt,name=t_mobile,json=tMobile,proto3" json:"t_mobile,omitempty"`                                    // 手机运营商
	NetworkType        string                 `protobuf:"bytes,29,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`                        // 网络类型
	YdToken            string                 `protobuf:"bytes,30,opt,name=yd_token,json=ydToken,proto3" json:"yd_token,omitempty"`                                    // 易盾SDK token
	ClubInviteCode     string                 `protobuf:"bytes,31,opt,name=club_invite_code,json=clubInviteCode,proto3" json:"club_invite_code,omitempty"`             // 俱乐部邀请码
	InviteUid          uint64                 `protobuf:"varint,32,opt,name=invite_uid,json=inviteUid,proto3" json:"invite_uid,omitempty"`                             // 邀请人uid
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserLoginReq) Reset() {
	*x = UserLoginReq{}
	mi := &file_chess_user_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginReq) ProtoMessage() {}

func (x *UserLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginReq.ProtoReflect.Descriptor instead.
func (*UserLoginReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserLoginReq) GetLoginType() string {
	if x != nil {
		return x.LoginType
	}
	return ""
}

func (x *UserLoginReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserLoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserLoginReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserLoginReq) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserLoginReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserLoginReq) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *UserLoginReq) GetWechatOpenId() string {
	if x != nil {
		return x.WechatOpenId
	}
	return ""
}

func (x *UserLoginReq) GetWechatCode() string {
	if x != nil {
		return x.WechatCode
	}
	return ""
}

func (x *UserLoginReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UserLoginReq) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *UserLoginReq) GetMachineCode() string {
	if x != nil {
		return x.MachineCode
	}
	return ""
}

func (x *UserLoginReq) GetPhoneType() string {
	if x != nil {
		return x.PhoneType
	}
	return ""
}

func (x *UserLoginReq) GetPhoneVersion() string {
	if x != nil {
		return x.PhoneVersion
	}
	return ""
}

func (x *UserLoginReq) GetPhoneSystemVersion() string {
	if x != nil {
		return x.PhoneSystemVersion
	}
	return ""
}

func (x *UserLoginReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

func (x *UserLoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserLoginReq) GetUdid() string {
	if x != nil {
		return x.Udid
	}
	return ""
}

func (x *UserLoginReq) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UserLoginReq) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UserLoginReq) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UserLoginReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserLoginReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UserLoginReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserLoginReq) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UserLoginReq) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *UserLoginReq) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *UserLoginReq) GetTMobile() string {
	if x != nil {
		return x.TMobile
	}
	return ""
}

func (x *UserLoginReq) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *UserLoginReq) GetYdToken() string {
	if x != nil {
		return x.YdToken
	}
	return ""
}

func (x *UserLoginReq) GetClubInviteCode() string {
	if x != nil {
		return x.ClubInviteCode
	}
	return ""
}

func (x *UserLoginReq) GetInviteUid() uint64 {
	if x != nil {
		return x.InviteUid
	}
	return 0
}

type BusinessModel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 商业模式id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BusinessModel) Reset() {
	*x = BusinessModel{}
	mi := &file_chess_user_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusinessModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessModel) ProtoMessage() {}

func (x *BusinessModel) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessModel.ProtoReflect.Descriptor instead.
func (*BusinessModel) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserLoginRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfo      *UserInfo              `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Openid        string                 `protobuf:"bytes,3,opt,name=openid,proto3" json:"openid,omitempty"`
	BusinessModel *BusinessModel         `protobuf:"bytes,4,opt,name=business_model,json=businessModel,proto3" json:"business_model,omitempty"`
	NewUser       bool                   `protobuf:"varint,5,opt,name=new_user,json=newUser,proto3" json:"new_user,omitempty"` // 是否新用户
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLoginRespData) Reset() {
	*x = UserLoginRespData{}
	mi := &file_chess_user_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginRespData) ProtoMessage() {}

func (x *UserLoginRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginRespData.ProtoReflect.Descriptor instead.
func (*UserLoginRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserLoginRespData) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UserLoginRespData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserLoginRespData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *UserLoginRespData) GetBusinessModel() *BusinessModel {
	if x != nil {
		return x.BusinessModel
	}
	return nil
}

func (x *UserLoginRespData) GetNewUser() bool {
	if x != nil {
		return x.NewUser
	}
	return false
}

// 用户登陆/注册 回执
type UserLoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserLoginRespData     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 用户信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLoginResp) Reset() {
	*x = UserLoginResp{}
	mi := &file_chess_user_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginResp) ProtoMessage() {}

func (x *UserLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginResp.ProtoReflect.Descriptor instead.
func (*UserLoginResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{3}
}

func (x *UserLoginResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserLoginResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserLoginResp) GetData() *UserLoginRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 用户注册
type UserRegisterReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegisterType  string                 `protobuf:"bytes,1,opt,name=register_type,json=registerType,proto3" json:"register_type,omitempty"`    // 注册类型:one_click
	PhoneNumber   string                 `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`       // 手机号
	ProjectSource string                 `protobuf:"bytes,3,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"` // 项目来源
	Password      string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`                                // 密码(明文)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRegisterReq) Reset() {
	*x = UserRegisterReq{}
	mi := &file_chess_user_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterReq) ProtoMessage() {}

func (x *UserRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterReq.ProtoReflect.Descriptor instead.
func (*UserRegisterReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{4}
}

func (x *UserRegisterReq) GetRegisterType() string {
	if x != nil {
		return x.RegisterType
	}
	return ""
}

func (x *UserRegisterReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserRegisterReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

func (x *UserRegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserRegisterResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserRegisterData      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  //用户信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRegisterResp) Reset() {
	*x = UserRegisterResp{}
	mi := &file_chess_user_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterResp) ProtoMessage() {}

func (x *UserRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterResp.ProtoReflect.Descriptor instead.
func (*UserRegisterResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{5}
}

func (x *UserRegisterResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserRegisterResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserRegisterResp) GetData() *UserRegisterData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserRegisterData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRegisterData) Reset() {
	*x = UserRegisterData{}
	mi := &file_chess_user_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRegisterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegisterData) ProtoMessage() {}

func (x *UserRegisterData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegisterData.ProtoReflect.Descriptor instead.
func (*UserRegisterData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{6}
}

func (x *UserRegisterData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 手机验证码发送 请求
type SMSSendLoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhoneNumber   string                 `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                                   // 手机号
	SmsCodeType   E_SMS_CODE_TYPE        `protobuf:"varint,2,opt,name=sms_code_type,json=smsCodeType,proto3,enum=new_chess.E_SMS_CODE_TYPE" json:"sms_code_type,omitempty"` // 短信类型
	ProjectSource string                 `protobuf:"bytes,3,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"`                             // 项目来源
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SMSSendLoginReq) Reset() {
	*x = SMSSendLoginReq{}
	mi := &file_chess_user_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SMSSendLoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSSendLoginReq) ProtoMessage() {}

func (x *SMSSendLoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSSendLoginReq.ProtoReflect.Descriptor instead.
func (*SMSSendLoginReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{7}
}

func (x *SMSSendLoginReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SMSSendLoginReq) GetSmsCodeType() E_SMS_CODE_TYPE {
	if x != nil {
		return x.SmsCodeType
	}
	return E_SMS_CODE_TYPE_SMS_CODE_ERROR_INVALID
}

func (x *SMSSendLoginReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

// 手机验证码发送 回执
type SMSSendLoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SMSSendLoginResp) Reset() {
	*x = SMSSendLoginResp{}
	mi := &file_chess_user_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SMSSendLoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMSSendLoginResp) ProtoMessage() {}

func (x *SMSSendLoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMSSendLoginResp.ProtoReflect.Descriptor instead.
func (*SMSSendLoginResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{8}
}

func (x *SMSSendLoginResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SMSSendLoginResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 绑定微信 请求
type OpenIDBindReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                               // 用户id
	WechatCode      string                 `protobuf:"bytes,2,opt,name=wechat_code,json=wechatCode,proto3" json:"wechat_code,omitempty"`                    // 微信code
	UserWxCacheData *UserWXCacheData       `protobuf:"bytes,3,opt,name=user_wx_cache_data,json=userWxCacheData,proto3" json:"user_wx_cache_data,omitempty"` // 微信用户缓存信息
	ProjectSource   string                 `protobuf:"bytes,4,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"`           // 项目来源
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OpenIDBindReq) Reset() {
	*x = OpenIDBindReq{}
	mi := &file_chess_user_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenIDBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDBindReq) ProtoMessage() {}

func (x *OpenIDBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDBindReq.ProtoReflect.Descriptor instead.
func (*OpenIDBindReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{9}
}

func (x *OpenIDBindReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OpenIDBindReq) GetWechatCode() string {
	if x != nil {
		return x.WechatCode
	}
	return ""
}

func (x *OpenIDBindReq) GetUserWxCacheData() *UserWXCacheData {
	if x != nil {
		return x.UserWxCacheData
	}
	return nil
}

func (x *OpenIDBindReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

type UserWXCacheData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WechatOpenId  string                 `protobuf:"bytes,1,opt,name=wechat_open_id,json=wechatOpenId,proto3" json:"wechat_open_id,omitempty"` // 微信openid
	Nickname      string                 `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`                               // 用户昵称
	AvatarUrl     string                 `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`            // 头像
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserWXCacheData) Reset() {
	*x = UserWXCacheData{}
	mi := &file_chess_user_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserWXCacheData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWXCacheData) ProtoMessage() {}

func (x *UserWXCacheData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWXCacheData.ProtoReflect.Descriptor instead.
func (*UserWXCacheData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{10}
}

func (x *UserWXCacheData) GetWechatOpenId() string {
	if x != nil {
		return x.WechatOpenId
	}
	return ""
}

func (x *UserWXCacheData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserWXCacheData) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

// 绑定微信 回执
type OpenIDBindResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserWXCacheData       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 微信用户信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenIDBindResp) Reset() {
	*x = OpenIDBindResp{}
	mi := &file_chess_user_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenIDBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIDBindResp) ProtoMessage() {}

func (x *OpenIDBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIDBindResp.ProtoReflect.Descriptor instead.
func (*OpenIDBindResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{11}
}

func (x *OpenIDBindResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpenIDBindResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *OpenIDBindResp) GetData() *UserWXCacheData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 上传用户信息
type UserUploadGeographicReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoginIp       string                 `protobuf:"bytes,1,opt,name=login_ip,json=loginIp,proto3" json:"login_ip,omitempty"` // 登录ip
	Location      string                 `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`              // 位置信息
	Longitude     float64                `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`          // 经度
	Latitude      float64                `protobuf:"fixed64,4,opt,name=latitude,proto3" json:"latitude,omitempty"`            // 纬度
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUploadGeographicReq) Reset() {
	*x = UserUploadGeographicReq{}
	mi := &file_chess_user_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUploadGeographicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUploadGeographicReq) ProtoMessage() {}

func (x *UserUploadGeographicReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUploadGeographicReq.ProtoReflect.Descriptor instead.
func (*UserUploadGeographicReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{12}
}

func (x *UserUploadGeographicReq) GetLoginIp() string {
	if x != nil {
		return x.LoginIp
	}
	return ""
}

func (x *UserUploadGeographicReq) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserUploadGeographicReq) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UserUploadGeographicReq) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type UserUploadGeographicResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUploadGeographicResp) Reset() {
	*x = UserUploadGeographicResp{}
	mi := &file_chess_user_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUploadGeographicResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUploadGeographicResp) ProtoMessage() {}

func (x *UserUploadGeographicResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUploadGeographicResp.ProtoReflect.Descriptor instead.
func (*UserUploadGeographicResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{13}
}

func (x *UserUploadGeographicResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserUploadGeographicResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户反馈信息请求
type FeedbackUploadReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 反馈问题类型 0 分数问题，2 功能问题，3 违法举报，4 反馈建议，5 其他
	Desc           string                 `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Contact        string                 `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
	ScreenshotUrls string                 `protobuf:"bytes,4,opt,name=screenshot_urls,json=screenshotUrls,proto3" json:"screenshot_urls,omitempty"`
	ReportedUid    uint64                 `protobuf:"varint,5,opt,name=reported_uid,json=reportedUid,proto3" json:"reported_uid,omitempty"` // 被举报玩家uid
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FeedbackUploadReq) Reset() {
	*x = FeedbackUploadReq{}
	mi := &file_chess_user_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackUploadReq) ProtoMessage() {}

func (x *FeedbackUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackUploadReq.ProtoReflect.Descriptor instead.
func (*FeedbackUploadReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{14}
}

func (x *FeedbackUploadReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FeedbackUploadReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FeedbackUploadReq) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *FeedbackUploadReq) GetScreenshotUrls() string {
	if x != nil {
		return x.ScreenshotUrls
	}
	return ""
}

func (x *FeedbackUploadReq) GetReportedUid() uint64 {
	if x != nil {
		return x.ReportedUid
	}
	return 0
}

// 用户反馈信息响应
type FeedbackUploadResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeedbackUploadResp) Reset() {
	*x = FeedbackUploadResp{}
	mi := &file_chess_user_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeedbackUploadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackUploadResp) ProtoMessage() {}

func (x *FeedbackUploadResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackUploadResp.ProtoReflect.Descriptor instead.
func (*FeedbackUploadResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{15}
}

func (x *FeedbackUploadResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FeedbackUploadResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 获取用户手机号列表请求
type GetUserPhonesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UidList       []uint64               `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserPhonesReq) Reset() {
	*x = GetUserPhonesReq{}
	mi := &file_chess_user_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPhonesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhonesReq) ProtoMessage() {}

func (x *GetUserPhonesReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhonesReq.ProtoReflect.Descriptor instead.
func (*GetUserPhonesReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserPhonesReq) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

// 用户手机信息
type UserPhone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Phone         string                 `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPhone) Reset() {
	*x = UserPhone{}
	mi := &file_chess_user_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPhone) ProtoMessage() {}

func (x *UserPhone) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPhone.ProtoReflect.Descriptor instead.
func (*UserPhone) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{17}
}

func (x *UserPhone) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type GetUserPhonesRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*UserPhone           `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserPhonesRespData) Reset() {
	*x = GetUserPhonesRespData{}
	mi := &file_chess_user_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPhonesRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhonesRespData) ProtoMessage() {}

func (x *GetUserPhonesRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhonesRespData.ProtoReflect.Descriptor instead.
func (*GetUserPhonesRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{18}
}

func (x *GetUserPhonesRespData) GetList() []*UserPhone {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取用户手机号列表响应
type GetUserPhonesResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *GetUserPhonesRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserPhonesResp) Reset() {
	*x = GetUserPhonesResp{}
	mi := &file_chess_user_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserPhonesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhonesResp) ProtoMessage() {}

func (x *GetUserPhonesResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhonesResp.ProtoReflect.Descriptor instead.
func (*GetUserPhonesResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{19}
}

func (x *GetUserPhonesResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserPhonesResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserPhonesResp) GetData() *GetUserPhonesRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 修改个人信息
type UpdateUserInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModifyType    UserModifyType         `protobuf:"varint,1,opt,name=modify_type,json=modifyType,proto3,enum=new_chess.UserModifyType" json:"modify_type,omitempty"` // 修改类型：1 重新绑定手机号码；2 修改性别 3 修改密码
	Phone         string                 `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`                                                            // 新手机号码
	VerifyCode    string                 `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`                                // 验证码
	Gender        int32                  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`                                                         // 性别: 1 表示男，2 表示女
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`                                                      // 密码
	Nickname      string                 `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                      // 昵称
	AvatarUrl     string                 `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                   // 头像
	Uid           uint64                 `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`                                                               // 用户id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	mi := &file_chess_user_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserInfoReq) GetModifyType() UserModifyType {
	if x != nil {
		return x.ModifyType
	}
	return UserModifyType_ERROR_INVALID
}

func (x *UpdateUserInfoReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateUserInfoReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *UpdateUserInfoReq) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UpdateUserInfoReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserInfoReq) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UpdateUserInfoReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateUserInfoReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type UpdateUserInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserInfoResp) Reset() {
	*x = UpdateUserInfoResp{}
	mi := &file_chess_user_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResp) ProtoMessage() {}

func (x *UpdateUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetUserInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	IsRealAuth    bool                   `protobuf:"varint,2,opt,name=is_real_auth,json=isRealAuth,proto3" json:"is_real_auth,omitempty"` // 是否查询实名信息 默认false
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInfoReq) Reset() {
	*x = GetUserInfoReq{}
	mi := &file_chess_user_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoReq) ProtoMessage() {}

func (x *GetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserInfoReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GetUserInfoReq) GetIsRealAuth() bool {
	if x != nil {
		return x.IsRealAuth
	}
	return false
}

type GetUserInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserInfo              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInfoResp) Reset() {
	*x = GetUserInfoResp{}
	mi := &file_chess_user_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResp) ProtoMessage() {}

func (x *GetUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResp.ProtoReflect.Descriptor instead.
func (*GetUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{23}
}

func (x *GetUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserInfoResp) GetData() *UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchGetUserInfoReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UidList           []uint64               `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	QueryFields       []string               `protobuf:"bytes,2,rep,name=query_fields,json=queryFields,proto3" json:"query_fields,omitempty"`                     // 查询字段
	GetRealAuth       bool                   `protobuf:"varint,3,opt,name=get_real_auth,json=getRealAuth,proto3" json:"get_real_auth,omitempty"`                  // 是否查询实名信息 默认false
	StartRegisterTime string                 `protobuf:"bytes,4,opt,name=start_register_time,json=startRegisterTime,proto3" json:"start_register_time,omitempty"` // 注册开始时间 (格式：2020-01-01)
	EndRegisterTime   string                 `protobuf:"bytes,5,opt,name=end_register_time,json=endRegisterTime,proto3" json:"end_register_time,omitempty"`       // 注册结束时间 (格式：2020-01-02)
	Page              int32                  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`                                                     // 页码
	PageSize          int32                  `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                             // 每页数量
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BatchGetUserInfoReq) Reset() {
	*x = BatchGetUserInfoReq{}
	mi := &file_chess_user_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoReq) ProtoMessage() {}

func (x *BatchGetUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoReq.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{24}
}

func (x *BatchGetUserInfoReq) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *BatchGetUserInfoReq) GetQueryFields() []string {
	if x != nil {
		return x.QueryFields
	}
	return nil
}

func (x *BatchGetUserInfoReq) GetGetRealAuth() bool {
	if x != nil {
		return x.GetRealAuth
	}
	return false
}

func (x *BatchGetUserInfoReq) GetStartRegisterTime() string {
	if x != nil {
		return x.StartRegisterTime
	}
	return ""
}

func (x *BatchGetUserInfoReq) GetEndRegisterTime() string {
	if x != nil {
		return x.EndRegisterTime
	}
	return ""
}

func (x *BatchGetUserInfoReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BatchGetUserInfoReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type BatchGetUserInfoRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserInfoList  []*UserInfo            `protobuf:"bytes,1,rep,name=user_info_list,json=userInfoList,proto3" json:"user_info_list,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserInfoRespData) Reset() {
	*x = BatchGetUserInfoRespData{}
	mi := &file_chess_user_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserInfoRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoRespData) ProtoMessage() {}

func (x *BatchGetUserInfoRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoRespData.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{25}
}

func (x *BatchGetUserInfoRespData) GetUserInfoList() []*UserInfo {
	if x != nil {
		return x.UserInfoList
	}
	return nil
}

func (x *BatchGetUserInfoRespData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type BatchGetUserInfoResp struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Code          int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          *BatchGetUserInfoRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserInfoResp) Reset() {
	*x = BatchGetUserInfoResp{}
	mi := &file_chess_user_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoResp) ProtoMessage() {}

func (x *BatchGetUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoResp.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{26}
}

func (x *BatchGetUserInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchGetUserInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BatchGetUserInfoResp) GetData() *BatchGetUserInfoRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserIdByPhoneReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Phone         string                 `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserIdByPhoneReq) Reset() {
	*x = GetUserIdByPhoneReq{}
	mi := &file_chess_user_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserIdByPhoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIdByPhoneReq) ProtoMessage() {}

func (x *GetUserIdByPhoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIdByPhoneReq.ProtoReflect.Descriptor instead.
func (*GetUserIdByPhoneReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{27}
}

func (x *GetUserIdByPhoneReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type GetUserIdByPhoneResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserInfo              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserIdByPhoneResp) Reset() {
	*x = GetUserIdByPhoneResp{}
	mi := &file_chess_user_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserIdByPhoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIdByPhoneResp) ProtoMessage() {}

func (x *GetUserIdByPhoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIdByPhoneResp.ProtoReflect.Descriptor instead.
func (*GetUserIdByPhoneResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{28}
}

func (x *GetUserIdByPhoneResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserIdByPhoneResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserIdByPhoneResp) GetData() *UserInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                // 用户uid
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                                       // 账户名
	Nickname      string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                       // 用户昵称
	AvatarUrl     string                 `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                                    // 头像
	PhoneNumber   string                 `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                              // 绑定手机号码
	IsRealAuth    int64                  `protobuf:"varint,6,opt,name=is_real_auth,json=isRealAuth,proto3" json:"is_real_auth,omitempty"`                              // 是否实名
	RealName      string                 `protobuf:"bytes,7,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                                       // 真实姓名
	IdCard        string                 `protobuf:"bytes,8,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`                                             // 身份证号
	RegisterTime  string                 `protobuf:"bytes,9,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`                           // 注册时间
	Gender        int64                  `protobuf:"varint,10,opt,name=gender,proto3" json:"gender,omitempty"`                                                         // 性别1男2女
	UserStatus    UserStatusType         `protobuf:"varint,11,opt,name=user_status,json=userStatus,proto3,enum=new_chess.UserStatusType" json:"user_status,omitempty"` // 用户状态 1、正常，2、禁用 3、删除
	LastLoginTime string                 `protobuf:"bytes,12,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`                     // 最后登录时间
	CreateTime    string                 `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                                // 记录创建时间无业务意义
	UpdateTime    string                 `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                // 记录更新时间无业务意义
	IsWatch       int64                  `protobuf:"varint,15,opt,name=is_watch,json=isWatch,proto3" json:"is_watch,omitempty"`                                        // 是否观战中：1、是
	Token         string                 `protobuf:"bytes,16,opt,name=token,proto3" json:"token,omitempty"`                                                            // token
	IfGame        int64                  `protobuf:"varint,17,opt,name=if_game,json=ifGame,proto3" json:"if_game,omitempty"`                                           // 是否游戏中
	HallOnline    int64                  `protobuf:"varint,18,opt,name=hall_online,json=hallOnline,proto3" json:"hall_online,omitempty"`                               // 大厅在线状态
	GameKind      uint32                 `protobuf:"varint,19,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`                                     // 当前游戏中用户产品id
	GameAddr      string                 `protobuf:"bytes,20,opt,name=game_addr,json=gameAddr,proto3" json:"game_addr,omitempty"`                                      // 游戏长连接地址
	UserRole      uint64                 `protobuf:"varint,21,opt,name=user_role,json=userRole,proto3" json:"user_role,omitempty"`                                     // 用户角色 0 普通玩家 1 代理商
	MatchId       uint32                 `protobuf:"varint,22,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                        // 比赛id
	PhoneBind     uint32                 `protobuf:"varint,23,opt,name=phone_bind,json=phoneBind,proto3" json:"phone_bind,omitempty"`                                  // 手机号是否已绑定 1 已绑定 2 未绑定
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_chess_user_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{29}
}

func (x *UserInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserInfo) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *UserInfo) GetIsRealAuth() int64 {
	if x != nil {
		return x.IsRealAuth
	}
	return 0
}

func (x *UserInfo) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserInfo) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

func (x *UserInfo) GetRegisterTime() string {
	if x != nil {
		return x.RegisterTime
	}
	return ""
}

func (x *UserInfo) GetGender() int64 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *UserInfo) GetUserStatus() UserStatusType {
	if x != nil {
		return x.UserStatus
	}
	return UserStatusType_USER_STATUS_INVALID
}

func (x *UserInfo) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *UserInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *UserInfo) GetIsWatch() int64 {
	if x != nil {
		return x.IsWatch
	}
	return 0
}

func (x *UserInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserInfo) GetIfGame() int64 {
	if x != nil {
		return x.IfGame
	}
	return 0
}

func (x *UserInfo) GetHallOnline() int64 {
	if x != nil {
		return x.HallOnline
	}
	return 0
}

func (x *UserInfo) GetGameKind() uint32 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *UserInfo) GetGameAddr() string {
	if x != nil {
		return x.GameAddr
	}
	return ""
}

func (x *UserInfo) GetUserRole() uint64 {
	if x != nil {
		return x.UserRole
	}
	return 0
}

func (x *UserInfo) GetMatchId() uint32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *UserInfo) GetPhoneBind() uint32 {
	if x != nil {
		return x.PhoneBind
	}
	return 0
}

// 用户实名认证
type UserCertificationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`               // 姓名
	UserIdNumber  string                 `protobuf:"bytes,2,opt,name=user_id_number,json=userIdNumber,proto3" json:"user_id_number,omitempty"` // 身份证号
	Uid           uint64                 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`                                        // 用户uid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCertificationReq) Reset() {
	*x = UserCertificationReq{}
	mi := &file_chess_user_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCertificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCertificationReq) ProtoMessage() {}

func (x *UserCertificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCertificationReq.ProtoReflect.Descriptor instead.
func (*UserCertificationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{30}
}

func (x *UserCertificationReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserCertificationReq) GetUserIdNumber() string {
	if x != nil {
		return x.UserIdNumber
	}
	return ""
}

func (x *UserCertificationReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type UserCertificationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserCertificationResp) Reset() {
	*x = UserCertificationResp{}
	mi := &file_chess_user_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCertificationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCertificationResp) ProtoMessage() {}

func (x *UserCertificationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCertificationResp.ProtoReflect.Descriptor instead.
func (*UserCertificationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{31}
}

func (x *UserCertificationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserCertificationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户权限组织关系相关
type CreateOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                          // 组织名
	ParentId      uint32                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganizationReq) Reset() {
	*x = CreateOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationReq) ProtoMessage() {}

func (x *CreateOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationReq.ProtoReflect.Descriptor instead.
func (*CreateOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{32}
}

func (x *CreateOrganizationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationReq) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type CreateOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrganizationResp) Reset() {
	*x = CreateOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationResp) ProtoMessage() {}

func (x *CreateOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationResp.ProtoReflect.Descriptor instead.
func (*CreateOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{33}
}

func (x *CreateOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UpdateOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // 组织id
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                          // 组织名称
	ParentId      uint32                 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationReq) Reset() {
	*x = UpdateOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationReq) ProtoMessage() {}

func (x *UpdateOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationReq.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateOrganizationReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrganizationReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationReq) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type UpdateOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrganizationResp) Reset() {
	*x = UpdateOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationResp) ProtoMessage() {}

func (x *UpdateOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationResp.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeleteOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrganizationReq) Reset() {
	*x = DeleteOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationReq) ProtoMessage() {}

func (x *DeleteOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationReq.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteOrganizationReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrganizationResp) Reset() {
	*x = DeleteOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationResp) ProtoMessage() {}

func (x *DeleteOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationResp.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Organization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // uid
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                          // 组织名称
	ParentId      uint32                 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Organization) Reset() {
	*x = Organization{}
	mi := &file_chess_user_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{38}
}

func (x *Organization) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Organization) GetParentId() uint32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type GetOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationReq) Reset() {
	*x = GetOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationReq) ProtoMessage() {}

func (x *GetOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationReq.ProtoReflect.Descriptor instead.
func (*GetOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{39}
}

func (x *GetOrganizationReq) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *Organization          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 组织信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationResp) Reset() {
	*x = GetOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationResp) ProtoMessage() {}

func (x *GetOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationResp.ProtoReflect.Descriptor instead.
func (*GetOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{40}
}

func (x *GetOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetOrganizationResp) GetData() *Organization {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrganizationChildrenRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*Organization        `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationChildrenRespData) Reset() {
	*x = GetOrganizationChildrenRespData{}
	mi := &file_chess_user_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationChildrenRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationChildrenRespData) ProtoMessage() {}

func (x *GetOrganizationChildrenRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationChildrenRespData.ProtoReflect.Descriptor instead.
func (*GetOrganizationChildrenRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{41}
}

func (x *GetOrganizationChildrenRespData) GetList() []*Organization {
	if x != nil {
		return x.List
	}
	return nil
}

type GetOrganizationChildrenResp struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Code          int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *GetOrganizationChildrenRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 组织信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrganizationChildrenResp) Reset() {
	*x = GetOrganizationChildrenResp{}
	mi := &file_chess_user_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrganizationChildrenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationChildrenResp) ProtoMessage() {}

func (x *GetOrganizationChildrenResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationChildrenResp.ProtoReflect.Descriptor instead.
func (*GetOrganizationChildrenResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{42}
}

func (x *GetOrganizationChildrenResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrganizationChildrenResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetOrganizationChildrenResp) GetData() *GetOrganizationChildrenRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BindUserToOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	OrgId         uint32                 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`    // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindUserToOrganizationReq) Reset() {
	*x = BindUserToOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindUserToOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserToOrganizationReq) ProtoMessage() {}

func (x *BindUserToOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserToOrganizationReq.ProtoReflect.Descriptor instead.
func (*BindUserToOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{43}
}

func (x *BindUserToOrganizationReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BindUserToOrganizationReq) GetOrgId() uint32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type BindUserToOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BindUserToOrganizationResp) Reset() {
	*x = BindUserToOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BindUserToOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserToOrganizationResp) ProtoMessage() {}

func (x *BindUserToOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserToOrganizationResp.ProtoReflect.Descriptor instead.
func (*BindUserToOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{44}
}

func (x *BindUserToOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BindUserToOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UnbindUserToOrganizationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户id
	OrgId         uint32                 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`    // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnbindUserToOrganizationReq) Reset() {
	*x = UnbindUserToOrganizationReq{}
	mi := &file_chess_user_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbindUserToOrganizationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindUserToOrganizationReq) ProtoMessage() {}

func (x *UnbindUserToOrganizationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindUserToOrganizationReq.ProtoReflect.Descriptor instead.
func (*UnbindUserToOrganizationReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{45}
}

func (x *UnbindUserToOrganizationReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UnbindUserToOrganizationReq) GetOrgId() uint32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type UnbindUserToOrganizationResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnbindUserToOrganizationResp) Reset() {
	*x = UnbindUserToOrganizationResp{}
	mi := &file_chess_user_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnbindUserToOrganizationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindUserToOrganizationResp) ProtoMessage() {}

func (x *UnbindUserToOrganizationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindUserToOrganizationResp.ProtoReflect.Descriptor instead.
func (*UnbindUserToOrganizationResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{46}
}

func (x *UnbindUserToOrganizationResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UnbindUserToOrganizationResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 权限树
type PermTree struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`            // 权限id
	Label         string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`       // 标识
	Type          uint32                 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`        // 权限类型：1页面，2路由，3数据
	Node          string                 `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`         // 节点序列码：如：system:HealthManage:list:view
	Children      []*PermTree            `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"` // 子节点
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermTree) Reset() {
	*x = PermTree{}
	mi := &file_chess_user_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermTree) ProtoMessage() {}

func (x *PermTree) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermTree.ProtoReflect.Descriptor instead.
func (*PermTree) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{47}
}

func (x *PermTree) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PermTree) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PermTree) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PermTree) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *PermTree) GetChildren() []*PermTree {
	if x != nil {
		return x.Children
	}
	return nil
}

// 用户组织关系结构，多个
type OrgTreeUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         []uint32               `protobuf:"varint,1,rep,packed,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`          // 组织id集合
	ParentId      []uint32               `protobuf:"varint,2,rep,packed,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"` // 上级组织id集合
	OrgName       []string               `protobuf:"bytes,3,rep,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`            // 组织名称集合
	Perm          *PermTree              `protobuf:"bytes,4,opt,name=perm,proto3" json:"perm,omitempty"`                                 // 权限树
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrgTreeUser) Reset() {
	*x = OrgTreeUser{}
	mi := &file_chess_user_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrgTreeUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgTreeUser) ProtoMessage() {}

func (x *OrgTreeUser) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgTreeUser.ProtoReflect.Descriptor instead.
func (*OrgTreeUser) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{48}
}

func (x *OrgTreeUser) GetOrgId() []uint32 {
	if x != nil {
		return x.OrgId
	}
	return nil
}

func (x *OrgTreeUser) GetParentId() []uint32 {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *OrgTreeUser) GetOrgName() []string {
	if x != nil {
		return x.OrgName
	}
	return nil
}

func (x *OrgTreeUser) GetPerm() *PermTree {
	if x != nil {
		return x.Perm
	}
	return nil
}

type GetOrgTreeUserReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 用户id
	ProjectSource string                 `protobuf:"bytes,2,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"` // 项目来源
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreeUserReq) Reset() {
	*x = GetOrgTreeUserReq{}
	mi := &file_chess_user_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreeUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreeUserReq) ProtoMessage() {}

func (x *GetOrgTreeUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreeUserReq.ProtoReflect.Descriptor instead.
func (*GetOrgTreeUserReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{49}
}

func (x *GetOrgTreeUserReq) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetOrgTreeUserReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

type GetOrgTreeUserResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *OrgTreeUser           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreeUserResp) Reset() {
	*x = GetOrgTreeUserResp{}
	mi := &file_chess_user_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreeUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreeUserResp) ProtoMessage() {}

func (x *GetOrgTreeUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreeUserResp.ProtoReflect.Descriptor instead.
func (*GetOrgTreeUserResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{50}
}

func (x *GetOrgTreeUserResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgTreeUserResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetOrgTreeUserResp) GetData() *OrgTreeUser {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrgTreePermReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgIds        []uint32               `protobuf:"varint,1,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`              // 组织id集合
	ProjectSource string                 `protobuf:"bytes,2,opt,name=project_source,json=projectSource,proto3" json:"project_source,omitempty"` // 项目来源
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreePermReq) Reset() {
	*x = GetOrgTreePermReq{}
	mi := &file_chess_user_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreePermReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreePermReq) ProtoMessage() {}

func (x *GetOrgTreePermReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreePermReq.ProtoReflect.Descriptor instead.
func (*GetOrgTreePermReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{51}
}

func (x *GetOrgTreePermReq) GetOrgIds() []uint32 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *GetOrgTreePermReq) GetProjectSource() string {
	if x != nil {
		return x.ProjectSource
	}
	return ""
}

// 权限水平集合
type PermsArr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Api           []uint32               `protobuf:"varint,1,rep,packed,name=api,proto3" json:"api,omitempty"` // API权限
	View          []string               `protobuf:"bytes,2,rep,name=view,proto3" json:"view,omitempty"`       // view权限
	Data          []string               `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`       // 数据权限
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermsArr) Reset() {
	*x = PermsArr{}
	mi := &file_chess_user_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermsArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermsArr) ProtoMessage() {}

func (x *PermsArr) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermsArr.ProtoReflect.Descriptor instead.
func (*PermsArr) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{52}
}

func (x *PermsArr) GetApi() []uint32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *PermsArr) GetView() []string {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *PermsArr) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 用户搜索
type UserSearchReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Keyword            string                 `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`                                                    // 关键字 // 手机号、昵称、身份证号搜索（昵称模糊搜索，手机号、身份证号精确搜索） 默认搜索仅不含uid
	UidRange           []uint64               `protobuf:"varint,2,rep,packed,name=uid_range,json=uidRange,proto3" json:"uid_range,omitempty"`                          // uid范围
	OnlySearchUid      bool                   `protobuf:"varint,3,opt,name=only_search_uid,json=onlySearchUid,proto3" json:"only_search_uid,omitempty"`                // 仅搜索uid(模糊）
	OnlySearchPhone    bool                   `protobuf:"varint,4,opt,name=only_search_phone,json=onlySearchPhone,proto3" json:"only_search_phone,omitempty"`          // 仅搜索手机号(精准）
	OnlySearchIdCard   bool                   `protobuf:"varint,5,opt,name=only_search_id_card,json=onlySearchIdCard,proto3" json:"only_search_id_card,omitempty"`     // 仅搜索身份证号(精准）
	OnlySearchNickname bool                   `protobuf:"varint,6,opt,name=only_search_nickname,json=onlySearchNickname,proto3" json:"only_search_nickname,omitempty"` // 仅搜索昵称(模糊）
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UserSearchReq) Reset() {
	*x = UserSearchReq{}
	mi := &file_chess_user_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchReq) ProtoMessage() {}

func (x *UserSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchReq.ProtoReflect.Descriptor instead.
func (*UserSearchReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{53}
}

func (x *UserSearchReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *UserSearchReq) GetUidRange() []uint64 {
	if x != nil {
		return x.UidRange
	}
	return nil
}

func (x *UserSearchReq) GetOnlySearchUid() bool {
	if x != nil {
		return x.OnlySearchUid
	}
	return false
}

func (x *UserSearchReq) GetOnlySearchPhone() bool {
	if x != nil {
		return x.OnlySearchPhone
	}
	return false
}

func (x *UserSearchReq) GetOnlySearchIdCard() bool {
	if x != nil {
		return x.OnlySearchIdCard
	}
	return false
}

func (x *UserSearchReq) GetOnlySearchNickname() bool {
	if x != nil {
		return x.OnlySearchNickname
	}
	return false
}

type UserSearchRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserList      []*UserInfo            `protobuf:"bytes,1,rep,name=user_list,json=userList,proto3" json:"user_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSearchRespData) Reset() {
	*x = UserSearchRespData{}
	mi := &file_chess_user_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSearchRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchRespData) ProtoMessage() {}

func (x *UserSearchRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchRespData.ProtoReflect.Descriptor instead.
func (*UserSearchRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{54}
}

func (x *UserSearchRespData) GetUserList() []*UserInfo {
	if x != nil {
		return x.UserList
	}
	return nil
}

type UserSearchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserSearchRespData    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSearchResp) Reset() {
	*x = UserSearchResp{}
	mi := &file_chess_user_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSearchResp) ProtoMessage() {}

func (x *UserSearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSearchResp.ProtoReflect.Descriptor instead.
func (*UserSearchResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{55}
}

func (x *UserSearchResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserSearchResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserSearchResp) GetData() *UserSearchRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取商业模式
type GetOrgTreeBusinessReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrgId         uint32                 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"` // 组织id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreeBusinessReq) Reset() {
	*x = GetOrgTreeBusinessReq{}
	mi := &file_chess_user_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreeBusinessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreeBusinessReq) ProtoMessage() {}

func (x *GetOrgTreeBusinessReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreeBusinessReq.ProtoReflect.Descriptor instead.
func (*GetOrgTreeBusinessReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{56}
}

func (x *GetOrgTreeBusinessReq) GetOrgId() uint32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type GetOrgTreeBusinessResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *BusinessModel         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 组织商业模式信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgTreeBusinessResp) Reset() {
	*x = GetOrgTreeBusinessResp{}
	mi := &file_chess_user_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgTreeBusinessResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgTreeBusinessResp) ProtoMessage() {}

func (x *GetOrgTreeBusinessResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgTreeBusinessResp.ProtoReflect.Descriptor instead.
func (*GetOrgTreeBusinessResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{57}
}

func (x *GetOrgTreeBusinessResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrgTreeBusinessResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetOrgTreeBusinessResp) GetData() *BusinessModel {
	if x != nil {
		return x.Data
	}
	return nil
}

// 用户个人配置
type UserConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                // 用户id
	ClientConf    string                 `protobuf:"bytes,2,opt,name=client_conf,json=clientConf,proto3" json:"client_conf,omitempty"` // 客户端配置
	CreateTime    string                 `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	UpdateTime    string                 `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserConfig) Reset() {
	*x = UserConfig{}
	mi := &file_chess_user_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConfig) ProtoMessage() {}

func (x *UserConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConfig.ProtoReflect.Descriptor instead.
func (*UserConfig) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{58}
}

func (x *UserConfig) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserConfig) GetClientConf() string {
	if x != nil {
		return x.ClientConf
	}
	return ""
}

func (x *UserConfig) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserConfig) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

// 获取用户个人配置
type GetUserConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"` // 用户id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserConfigReq) Reset() {
	*x = GetUserConfigReq{}
	mi := &file_chess_user_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConfigReq) ProtoMessage() {}

func (x *GetUserConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConfigReq.ProtoReflect.Descriptor instead.
func (*GetUserConfigReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{59}
}

func (x *GetUserConfigReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type GetUserConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserConfig            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 用户个人配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserConfigResp) Reset() {
	*x = GetUserConfigResp{}
	mi := &file_chess_user_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConfigResp) ProtoMessage() {}

func (x *GetUserConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConfigResp.ProtoReflect.Descriptor instead.
func (*GetUserConfigResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{60}
}

func (x *GetUserConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserConfigResp) GetData() *UserConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

// 设置用户个人配置
type SetUserConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                // 用户id
	ClientConf    string                 `protobuf:"bytes,2,opt,name=client_conf,json=clientConf,proto3" json:"client_conf,omitempty"` // 客户端配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetUserConfigReq) Reset() {
	*x = SetUserConfigReq{}
	mi := &file_chess_user_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserConfigReq) ProtoMessage() {}

func (x *SetUserConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserConfigReq.ProtoReflect.Descriptor instead.
func (*SetUserConfigReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{61}
}

func (x *SetUserConfigReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SetUserConfigReq) GetClientConf() string {
	if x != nil {
		return x.ClientConf
	}
	return ""
}

type SetUserConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetUserConfigResp) Reset() {
	*x = SetUserConfigResp{}
	mi := &file_chess_user_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserConfigResp) ProtoMessage() {}

func (x *SetUserConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserConfigResp.ProtoReflect.Descriptor instead.
func (*SetUserConfigResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{62}
}

func (x *SetUserConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetUserConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新增“推广模式” 请求
type AddPromotionModelReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PromotionModelName string                 `protobuf:"bytes,1,opt,name=promotion_model_name,json=promotionModelName,proto3" json:"promotion_model_name,omitempty"` // 推广模式名称
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AddPromotionModelReq) Reset() {
	*x = AddPromotionModelReq{}
	mi := &file_chess_user_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPromotionModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPromotionModelReq) ProtoMessage() {}

func (x *AddPromotionModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPromotionModelReq.ProtoReflect.Descriptor instead.
func (*AddPromotionModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{63}
}

func (x *AddPromotionModelReq) GetPromotionModelName() string {
	if x != nil {
		return x.PromotionModelName
	}
	return ""
}

// 新增“推广模式” 响应
type AddPromotionModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPromotionModelResp) Reset() {
	*x = AddPromotionModelResp{}
	mi := &file_chess_user_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPromotionModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPromotionModelResp) ProtoMessage() {}

func (x *AddPromotionModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPromotionModelResp.ProtoReflect.Descriptor instead.
func (*AddPromotionModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{64}
}

func (x *AddPromotionModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddPromotionModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 更新“推广模式” 请求
type UpdatePromotionModelReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PromotionModelName string                 `protobuf:"bytes,2,opt,name=promotion_model_name,json=promotionModelName,proto3" json:"promotion_model_name,omitempty"` // 推广模式名称
	ModelStatus        uint32                 `protobuf:"varint,3,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`                       // 状态 1正常 2禁用 3删除
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdatePromotionModelReq) Reset() {
	*x = UpdatePromotionModelReq{}
	mi := &file_chess_user_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePromotionModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePromotionModelReq) ProtoMessage() {}

func (x *UpdatePromotionModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePromotionModelReq.ProtoReflect.Descriptor instead.
func (*UpdatePromotionModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{65}
}

func (x *UpdatePromotionModelReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePromotionModelReq) GetPromotionModelName() string {
	if x != nil {
		return x.PromotionModelName
	}
	return ""
}

func (x *UpdatePromotionModelReq) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 更新“推广模式” 响应
type UpdatePromotionModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePromotionModelResp) Reset() {
	*x = UpdatePromotionModelResp{}
	mi := &file_chess_user_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePromotionModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePromotionModelResp) ProtoMessage() {}

func (x *UpdatePromotionModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePromotionModelResp.ProtoReflect.Descriptor instead.
func (*UpdatePromotionModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{66}
}

func (x *UpdatePromotionModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdatePromotionModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新增“推广模式角色” 请求
type AddPromotionRoleReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PromotionModelId uint64                 `protobuf:"varint,1,opt,name=promotion_model_id,json=promotionModelId,proto3" json:"promotion_model_id,omitempty"` // 推广模式id
	RoleName         string                 `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`                            // 角色名称
	ParentId         uint64                 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                           // 上级id
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddPromotionRoleReq) Reset() {
	*x = AddPromotionRoleReq{}
	mi := &file_chess_user_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPromotionRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPromotionRoleReq) ProtoMessage() {}

func (x *AddPromotionRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPromotionRoleReq.ProtoReflect.Descriptor instead.
func (*AddPromotionRoleReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{67}
}

func (x *AddPromotionRoleReq) GetPromotionModelId() uint64 {
	if x != nil {
		return x.PromotionModelId
	}
	return 0
}

func (x *AddPromotionRoleReq) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *AddPromotionRoleReq) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

// 新增“推广模式角色” 响应
type AddPromotionRoleResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPromotionRoleResp) Reset() {
	*x = AddPromotionRoleResp{}
	mi := &file_chess_user_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPromotionRoleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPromotionRoleResp) ProtoMessage() {}

func (x *AddPromotionRoleResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPromotionRoleResp.ProtoReflect.Descriptor instead.
func (*AddPromotionRoleResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{68}
}

func (x *AddPromotionRoleResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddPromotionRoleResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 更新“推广模式角色” 请求
type UpdatePromotionRoleReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PromotionModelId uint64                 `protobuf:"varint,2,opt,name=promotion_model_id,json=promotionModelId,proto3" json:"promotion_model_id,omitempty"` // 推广模式id
	RoleName         string                 `protobuf:"bytes,3,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`                            // 角色名称
	ParentId         uint64                 `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                           // 上级id
	ModelStatus      uint32                 `protobuf:"varint,5,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`                  // 状态 1正常 2禁用 3删除
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdatePromotionRoleReq) Reset() {
	*x = UpdatePromotionRoleReq{}
	mi := &file_chess_user_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePromotionRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePromotionRoleReq) ProtoMessage() {}

func (x *UpdatePromotionRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePromotionRoleReq.ProtoReflect.Descriptor instead.
func (*UpdatePromotionRoleReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{69}
}

func (x *UpdatePromotionRoleReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePromotionRoleReq) GetPromotionModelId() uint64 {
	if x != nil {
		return x.PromotionModelId
	}
	return 0
}

func (x *UpdatePromotionRoleReq) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *UpdatePromotionRoleReq) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *UpdatePromotionRoleReq) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 更新“推广模式角色” 响应
type UpdatePromotionRoleResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePromotionRoleResp) Reset() {
	*x = UpdatePromotionRoleResp{}
	mi := &file_chess_user_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePromotionRoleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePromotionRoleResp) ProtoMessage() {}

func (x *UpdatePromotionRoleResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePromotionRoleResp.ProtoReflect.Descriptor instead.
func (*UpdatePromotionRoleResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{70}
}

func (x *UpdatePromotionRoleResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdatePromotionRoleResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新增“推广模式角色分润配比” 请求
type AddPromotionRoleRatioReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PromotionModelRoleId uint64                 `protobuf:"varint,1,opt,name=promotion_model_role_id,json=promotionModelRoleId,proto3" json:"promotion_model_role_id,omitempty"` // 推广模式角色id
	Ratio                uint32                 `protobuf:"varint,2,opt,name=ratio,proto3" json:"ratio,omitempty"`                                                               // 分润分配比例
	RightsId             uint64                 `protobuf:"varint,3,opt,name=rights_id,json=rightsId,proto3" json:"rights_id,omitempty"`                                         // 权益id                                                      // 权益id
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AddPromotionRoleRatioReq) Reset() {
	*x = AddPromotionRoleRatioReq{}
	mi := &file_chess_user_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPromotionRoleRatioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPromotionRoleRatioReq) ProtoMessage() {}

func (x *AddPromotionRoleRatioReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPromotionRoleRatioReq.ProtoReflect.Descriptor instead.
func (*AddPromotionRoleRatioReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{71}
}

func (x *AddPromotionRoleRatioReq) GetPromotionModelRoleId() uint64 {
	if x != nil {
		return x.PromotionModelRoleId
	}
	return 0
}

func (x *AddPromotionRoleRatioReq) GetRatio() uint32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *AddPromotionRoleRatioReq) GetRightsId() uint64 {
	if x != nil {
		return x.RightsId
	}
	return 0
}

// 新增“推广模式角色分润配比” 响应
type AddPromotionRoleRatioResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddPromotionRoleRatioResp) Reset() {
	*x = AddPromotionRoleRatioResp{}
	mi := &file_chess_user_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddPromotionRoleRatioResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPromotionRoleRatioResp) ProtoMessage() {}

func (x *AddPromotionRoleRatioResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPromotionRoleRatioResp.ProtoReflect.Descriptor instead.
func (*AddPromotionRoleRatioResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{72}
}

func (x *AddPromotionRoleRatioResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddPromotionRoleRatioResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 更新“推广模式角色分润配比” 请求
type UpdatePromotionRoleRatioReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PromotionModelRoleId uint64                 `protobuf:"varint,2,opt,name=promotion_model_role_id,json=promotionModelRoleId,proto3" json:"promotion_model_role_id,omitempty"` // 推广模式角色id
	Ratio                uint32                 `protobuf:"varint,3,opt,name=ratio,proto3" json:"ratio,omitempty"`                                                               // 分润分配比例
	RightsId             uint64                 `protobuf:"varint,4,opt,name=rights_id,json=rightsId,proto3" json:"rights_id,omitempty"`                                         // 权益id
	ModelStatus          uint32                 `protobuf:"varint,5,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`                                // 状态 1正常 2禁用 3删除
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdatePromotionRoleRatioReq) Reset() {
	*x = UpdatePromotionRoleRatioReq{}
	mi := &file_chess_user_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePromotionRoleRatioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePromotionRoleRatioReq) ProtoMessage() {}

func (x *UpdatePromotionRoleRatioReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePromotionRoleRatioReq.ProtoReflect.Descriptor instead.
func (*UpdatePromotionRoleRatioReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{73}
}

func (x *UpdatePromotionRoleRatioReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePromotionRoleRatioReq) GetPromotionModelRoleId() uint64 {
	if x != nil {
		return x.PromotionModelRoleId
	}
	return 0
}

func (x *UpdatePromotionRoleRatioReq) GetRatio() uint32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *UpdatePromotionRoleRatioReq) GetRightsId() uint64 {
	if x != nil {
		return x.RightsId
	}
	return 0
}

func (x *UpdatePromotionRoleRatioReq) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 更新“推广模式角色分润配比” 响应
type UpdatePromotionRoleRatioResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePromotionRoleRatioResp) Reset() {
	*x = UpdatePromotionRoleRatioResp{}
	mi := &file_chess_user_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePromotionRoleRatioResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePromotionRoleRatioResp) ProtoMessage() {}

func (x *UpdatePromotionRoleRatioResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePromotionRoleRatioResp.ProtoReflect.Descriptor instead.
func (*UpdatePromotionRoleRatioResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{74}
}

func (x *UpdatePromotionRoleRatioResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdatePromotionRoleRatioResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新增“商业模式” 请求
type AddBusinessModelReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BusinessModelName string                 `protobuf:"bytes,1,opt,name=business_model_name,json=businessModelName,proto3" json:"business_model_name,omitempty"` // 商业模式名称
	CurrencyId        uint64                 `protobuf:"varint,2,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`                       // 购卡规则id
	FundId            uint64                 `protobuf:"varint,3,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`                                   // 创业基金规则id
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddBusinessModelReq) Reset() {
	*x = AddBusinessModelReq{}
	mi := &file_chess_user_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBusinessModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessModelReq) ProtoMessage() {}

func (x *AddBusinessModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessModelReq.ProtoReflect.Descriptor instead.
func (*AddBusinessModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{75}
}

func (x *AddBusinessModelReq) GetBusinessModelName() string {
	if x != nil {
		return x.BusinessModelName
	}
	return ""
}

func (x *AddBusinessModelReq) GetCurrencyId() uint64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *AddBusinessModelReq) GetFundId() uint64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

// 新增“商业模式” 响应
type AddBusinessModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddBusinessModelResp) Reset() {
	*x = AddBusinessModelResp{}
	mi := &file_chess_user_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBusinessModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessModelResp) ProtoMessage() {}

func (x *AddBusinessModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessModelResp.ProtoReflect.Descriptor instead.
func (*AddBusinessModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{76}
}

func (x *AddBusinessModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddBusinessModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 更新“商业模式” 请求
type UpdateBusinessModelReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessModelName string                 `protobuf:"bytes,2,opt,name=business_model_name,json=businessModelName,proto3" json:"business_model_name,omitempty"` // 商业模式名称
	CurrencyId        uint64                 `protobuf:"varint,3,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`                       // 购卡规则id
	FundId            uint64                 `protobuf:"varint,4,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`                                   // 创业基金规则id
	ModelStatus       uint32                 `protobuf:"varint,5,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`                    // 状态 1正常 2禁用 3删除
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateBusinessModelReq) Reset() {
	*x = UpdateBusinessModelReq{}
	mi := &file_chess_user_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessModelReq) ProtoMessage() {}

func (x *UpdateBusinessModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessModelReq.ProtoReflect.Descriptor instead.
func (*UpdateBusinessModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateBusinessModelReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBusinessModelReq) GetBusinessModelName() string {
	if x != nil {
		return x.BusinessModelName
	}
	return ""
}

func (x *UpdateBusinessModelReq) GetCurrencyId() uint64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *UpdateBusinessModelReq) GetFundId() uint64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

func (x *UpdateBusinessModelReq) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 更新“商业模式” 响应
type UpdateBusinessModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBusinessModelResp) Reset() {
	*x = UpdateBusinessModelResp{}
	mi := &file_chess_user_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessModelResp) ProtoMessage() {}

func (x *UpdateBusinessModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessModelResp.ProtoReflect.Descriptor instead.
func (*UpdateBusinessModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateBusinessModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateBusinessModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新增“商业模式所属权益” 请求
type AddBusinessModelRightsReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BusinessModelId uint64                 `protobuf:"varint,1,opt,name=business_model_id,json=businessModelId,proto3" json:"business_model_id,omitempty"` // 商业模式id
	RightsId        uint64                 `protobuf:"varint,2,opt,name=rights_id,json=rightsId,proto3" json:"rights_id,omitempty"`                        //权益id
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddBusinessModelRightsReq) Reset() {
	*x = AddBusinessModelRightsReq{}
	mi := &file_chess_user_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBusinessModelRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessModelRightsReq) ProtoMessage() {}

func (x *AddBusinessModelRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessModelRightsReq.ProtoReflect.Descriptor instead.
func (*AddBusinessModelRightsReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{79}
}

func (x *AddBusinessModelRightsReq) GetBusinessModelId() uint64 {
	if x != nil {
		return x.BusinessModelId
	}
	return 0
}

func (x *AddBusinessModelRightsReq) GetRightsId() uint64 {
	if x != nil {
		return x.RightsId
	}
	return 0
}

// 新增“商业模式所属权益” 响应
type AddBusinessModelRightsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddBusinessModelRightsResp) Reset() {
	*x = AddBusinessModelRightsResp{}
	mi := &file_chess_user_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBusinessModelRightsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBusinessModelRightsResp) ProtoMessage() {}

func (x *AddBusinessModelRightsResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBusinessModelRightsResp.ProtoReflect.Descriptor instead.
func (*AddBusinessModelRightsResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{80}
}

func (x *AddBusinessModelRightsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddBusinessModelRightsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 更新“商业模式所属权益” 请求
type UpdateBusinessModelRightsReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessModelId uint64                 `protobuf:"varint,2,opt,name=business_model_id,json=businessModelId,proto3" json:"business_model_id,omitempty"` // 商业模式id
	RightsId        uint64                 `protobuf:"varint,3,opt,name=rights_id,json=rightsId,proto3" json:"rights_id,omitempty"`                        //权益id
	ModelStatus     uint32                 `protobuf:"varint,4,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`               // 状态 1正常 2禁用 3删除
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateBusinessModelRightsReq) Reset() {
	*x = UpdateBusinessModelRightsReq{}
	mi := &file_chess_user_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessModelRightsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessModelRightsReq) ProtoMessage() {}

func (x *UpdateBusinessModelRightsReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessModelRightsReq.ProtoReflect.Descriptor instead.
func (*UpdateBusinessModelRightsReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateBusinessModelRightsReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBusinessModelRightsReq) GetBusinessModelId() uint64 {
	if x != nil {
		return x.BusinessModelId
	}
	return 0
}

func (x *UpdateBusinessModelRightsReq) GetRightsId() uint64 {
	if x != nil {
		return x.RightsId
	}
	return 0
}

func (x *UpdateBusinessModelRightsReq) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 更新“商业模式所属权益” 响应
type UpdateBusinessModelRightsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBusinessModelRightsResp) Reset() {
	*x = UpdateBusinessModelRightsResp{}
	mi := &file_chess_user_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBusinessModelRightsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessModelRightsResp) ProtoMessage() {}

func (x *UpdateBusinessModelRightsResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessModelRightsResp.ProtoReflect.Descriptor instead.
func (*UpdateBusinessModelRightsResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateBusinessModelRightsResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateBusinessModelRightsResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新增“业务模式” 请求
type AddModelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentId       uint64                 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`             // 代理商id
	ClubId        uint64                 `protobuf:"varint,2,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`                // 俱乐部id
	GameKind      uint64                 `protobuf:"varint,3,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`          // 产品id
	BusinessId    uint64                 `protobuf:"varint,4,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`    // 商业模式id
	PromotionId   uint64                 `protobuf:"varint,5,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"` // 推广模式id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddModelReq) Reset() {
	*x = AddModelReq{}
	mi := &file_chess_user_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddModelReq) ProtoMessage() {}

func (x *AddModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddModelReq.ProtoReflect.Descriptor instead.
func (*AddModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{83}
}

func (x *AddModelReq) GetAgentId() uint64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *AddModelReq) GetClubId() uint64 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *AddModelReq) GetGameKind() uint64 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *AddModelReq) GetBusinessId() uint64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *AddModelReq) GetPromotionId() uint64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

// 新增“业务模式” 响应
type AddModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddModelResp) Reset() {
	*x = AddModelResp{}
	mi := &file_chess_user_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddModelResp) ProtoMessage() {}

func (x *AddModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddModelResp.ProtoReflect.Descriptor instead.
func (*AddModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{84}
}

func (x *AddModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 更新“业务模式” 请求
type UpdateModelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AgentId       uint64                 `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`             // 代理商id
	ClubId        uint64                 `protobuf:"varint,4,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`                // 俱乐部id
	GameKind      uint64                 `protobuf:"varint,5,opt,name=game_kind,json=gameKind,proto3" json:"game_kind,omitempty"`          // 产品id
	BusinessId    uint64                 `protobuf:"varint,6,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`    // 商业模式id
	PromotionId   uint64                 `protobuf:"varint,7,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"` // 推广模式id
	ModelStatus   uint32                 `protobuf:"varint,9,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"` // 状态 1正常 2禁用 3删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateModelReq) Reset() {
	*x = UpdateModelReq{}
	mi := &file_chess_user_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelReq) ProtoMessage() {}

func (x *UpdateModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelReq.ProtoReflect.Descriptor instead.
func (*UpdateModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateModelReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateModelReq) GetAgentId() uint64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *UpdateModelReq) GetClubId() uint64 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *UpdateModelReq) GetGameKind() uint64 {
	if x != nil {
		return x.GameKind
	}
	return 0
}

func (x *UpdateModelReq) GetBusinessId() uint64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *UpdateModelReq) GetPromotionId() uint64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

func (x *UpdateModelReq) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 更新“业务模式” 响应
type UpdateModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateModelResp) Reset() {
	*x = UpdateModelResp{}
	mi := &file_chess_user_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelResp) ProtoMessage() {}

func (x *UpdateModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelResp.ProtoReflect.Descriptor instead.
func (*UpdateModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//----------------------------------多层级业务模式-------------------------------------//
// 多级产品
type MultistageProduct struct {
	state                    protoimpl.MessageState     `protogen:"open.v1"`
	ModelId                  uint64                     `protobuf:"varint,1,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`                                                     // 模式id
	ProductId                uint64                     `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                                               // 产品id
	MultistageBusinessModel  []*MultistageBusinessModel `protobuf:"bytes,3,rep,name=multistage_business_model,json=multistageBusinessModel,proto3" json:"multistage_business_model,omitempty"`    // 多级商业模式
	MultistagePromotionModel *MultistagePromotion       `protobuf:"bytes,4,opt,name=multistage_promotion_model,json=multistagePromotionModel,proto3" json:"multistage_promotion_model,omitempty"` // 多级推广模式
	HallScene                uint32                     `protobuf:"varint,5,opt,name=hall_scene,json=hallScene,proto3" json:"hall_scene,omitempty"`                                               // 大厅场景：1、比赛，2、桌子
	ModelStatus              uint32                     `protobuf:"varint,6,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`                                         // 1正常，2停用，3删除
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MultistageProduct) Reset() {
	*x = MultistageProduct{}
	mi := &file_chess_user_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultistageProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistageProduct) ProtoMessage() {}

func (x *MultistageProduct) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistageProduct.ProtoReflect.Descriptor instead.
func (*MultistageProduct) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{87}
}

func (x *MultistageProduct) GetModelId() uint64 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *MultistageProduct) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *MultistageProduct) GetMultistageBusinessModel() []*MultistageBusinessModel {
	if x != nil {
		return x.MultistageBusinessModel
	}
	return nil
}

func (x *MultistageProduct) GetMultistagePromotionModel() *MultistagePromotion {
	if x != nil {
		return x.MultistagePromotionModel
	}
	return nil
}

func (x *MultistageProduct) GetHallScene() uint32 {
	if x != nil {
		return x.HallScene
	}
	return 0
}

func (x *MultistageProduct) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 多级商业模式
type MultistageBusinessModel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BusinessId    uint64                 `protobuf:"varint,1,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`          // 商业模式id
	BusinessType  uint32                 `protobuf:"varint,2,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`    // 商业模式类型：1:VIP、2:晋中、3:房卡、4:金豆
	TempId        uint32                 `protobuf:"varint,3,opt,name=temp_id,json=tempId,proto3" json:"temp_id,omitempty"`                      // 临时id 用户控制重复新增的绑定关系
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                         // 商业模式名称
	CurrencyId    uint64                 `protobuf:"varint,5,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`          // 购卡规则ID
	FundId        uint64                 `protobuf:"varint,6,opt,name=fund_id,json=fundId,proto3" json:"fund_id,omitempty"`                      // 创业基金ID
	RightsIds     []uint64               `protobuf:"varint,7,rep,packed,name=rights_ids,json=rightsIds,proto3" json:"rights_ids,omitempty"`      //商业模式所属权益
	ModelStatus   uint32                 `protobuf:"varint,8,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`       // 1正常，2停用，3删除
	OperationType uint32                 `protobuf:"varint,9,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"` // 操作类型 1全部应用,独立应用
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultistageBusinessModel) Reset() {
	*x = MultistageBusinessModel{}
	mi := &file_chess_user_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultistageBusinessModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistageBusinessModel) ProtoMessage() {}

func (x *MultistageBusinessModel) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistageBusinessModel.ProtoReflect.Descriptor instead.
func (*MultistageBusinessModel) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{88}
}

func (x *MultistageBusinessModel) GetBusinessId() uint64 {
	if x != nil {
		return x.BusinessId
	}
	return 0
}

func (x *MultistageBusinessModel) GetBusinessType() uint32 {
	if x != nil {
		return x.BusinessType
	}
	return 0
}

func (x *MultistageBusinessModel) GetTempId() uint32 {
	if x != nil {
		return x.TempId
	}
	return 0
}

func (x *MultistageBusinessModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultistageBusinessModel) GetCurrencyId() uint64 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *MultistageBusinessModel) GetFundId() uint64 {
	if x != nil {
		return x.FundId
	}
	return 0
}

func (x *MultistageBusinessModel) GetRightsIds() []uint64 {
	if x != nil {
		return x.RightsIds
	}
	return nil
}

func (x *MultistageBusinessModel) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

func (x *MultistageBusinessModel) GetOperationType() uint32 {
	if x != nil {
		return x.OperationType
	}
	return 0
}

// 多级推广模式
type MultistagePromotion struct {
	state                   protoimpl.MessageState     `protogen:"open.v1"`
	PromotionId             uint64                     `protobuf:"varint,1,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`                                      // 推广模式id
	Name                    string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                        // 推广模式名称
	MultistagePromotionRole []*MultistagePromotionRole `protobuf:"bytes,3,rep,name=multistage_promotion_role,json=multistagePromotionRole,proto3" json:"multistage_promotion_role,omitempty"` //多级推广角色
	ModelStatus             uint32                     `protobuf:"varint,4,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`                                      // 1正常，2停用，3删除
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MultistagePromotion) Reset() {
	*x = MultistagePromotion{}
	mi := &file_chess_user_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultistagePromotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePromotion) ProtoMessage() {}

func (x *MultistagePromotion) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePromotion.ProtoReflect.Descriptor instead.
func (*MultistagePromotion) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{89}
}

func (x *MultistagePromotion) GetPromotionId() uint64 {
	if x != nil {
		return x.PromotionId
	}
	return 0
}

func (x *MultistagePromotion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultistagePromotion) GetMultistagePromotionRole() []*MultistagePromotionRole {
	if x != nil {
		return x.MultistagePromotionRole
	}
	return nil
}

func (x *MultistagePromotion) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 多级推广角色
type MultistagePromotionRole struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	PromotionRoleId uint64                     `protobuf:"varint,1,opt,name=promotion_role_id,json=promotionRoleId,proto3" json:"promotion_role_id,omitempty"` // 角色id
	RoleId          uint64                     `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`                              // 用户角色id
	Name            string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                 // 角色名
	RoleRatio       []*PromotionRoleRatio      `protobuf:"bytes,4,rep,name=role_ratio,json=roleRatio,proto3" json:"role_ratio,omitempty"`                      // 角色分润比例
	Child           []*MultistagePromotionRole `protobuf:"bytes,5,rep,name=child,proto3" json:"child,omitempty"`                                               // 多级推广角色
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MultistagePromotionRole) Reset() {
	*x = MultistagePromotionRole{}
	mi := &file_chess_user_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultistagePromotionRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistagePromotionRole) ProtoMessage() {}

func (x *MultistagePromotionRole) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistagePromotionRole.ProtoReflect.Descriptor instead.
func (*MultistagePromotionRole) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{90}
}

func (x *MultistagePromotionRole) GetPromotionRoleId() uint64 {
	if x != nil {
		return x.PromotionRoleId
	}
	return 0
}

func (x *MultistagePromotionRole) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *MultistagePromotionRole) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultistagePromotionRole) GetRoleRatio() []*PromotionRoleRatio {
	if x != nil {
		return x.RoleRatio
	}
	return nil
}

func (x *MultistagePromotionRole) GetChild() []*MultistagePromotionRole {
	if x != nil {
		return x.Child
	}
	return nil
}

// 推广模式角色分润配比
type PromotionRoleRatio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RatioId       uint64                 `protobuf:"varint,1,opt,name=ratio_id,json=ratioId,proto3" json:"ratio_id,omitempty"`             // 分润id
	RatioValue    uint32                 `protobuf:"varint,2,opt,name=ratio_value,json=ratioValue,proto3" json:"ratio_value,omitempty"`    // 分润分配比例
	RightsId      uint64                 `protobuf:"varint,3,opt,name=rights_id,json=rightsId,proto3" json:"rights_id,omitempty"`          // 权益id
	ModelStatus   uint32                 `protobuf:"varint,4,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"` // 1正常，2停用，3删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PromotionRoleRatio) Reset() {
	*x = PromotionRoleRatio{}
	mi := &file_chess_user_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromotionRoleRatio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionRoleRatio) ProtoMessage() {}

func (x *PromotionRoleRatio) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionRoleRatio.ProtoReflect.Descriptor instead.
func (*PromotionRoleRatio) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{91}
}

func (x *PromotionRoleRatio) GetRatioId() uint64 {
	if x != nil {
		return x.RatioId
	}
	return 0
}

func (x *PromotionRoleRatio) GetRatioValue() uint32 {
	if x != nil {
		return x.RatioValue
	}
	return 0
}

func (x *PromotionRoleRatio) GetRightsId() uint64 {
	if x != nil {
		return x.RightsId
	}
	return 0
}

func (x *PromotionRoleRatio) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 新增“新增多层级模式（用户俱乐部级别的多级配置）” 请求
type AddMultistageModelReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AgentUid          uint64                 `protobuf:"varint,1,opt,name=agent_uid,json=agentUid,proto3" json:"agent_uid,omitempty"`                           // 代理商uid
	ClubId            uint64                 `protobuf:"varint,2,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`                                 // 俱乐部id
	MultistageProduct []*MultistageProduct   `protobuf:"bytes,3,rep,name=multistage_product,json=multistageProduct,proto3" json:"multistage_product,omitempty"` // 多级产品
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddMultistageModelReq) Reset() {
	*x = AddMultistageModelReq{}
	mi := &file_chess_user_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMultistageModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultistageModelReq) ProtoMessage() {}

func (x *AddMultistageModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultistageModelReq.ProtoReflect.Descriptor instead.
func (*AddMultistageModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{92}
}

func (x *AddMultistageModelReq) GetAgentUid() uint64 {
	if x != nil {
		return x.AgentUid
	}
	return 0
}

func (x *AddMultistageModelReq) GetClubId() uint64 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *AddMultistageModelReq) GetMultistageProduct() []*MultistageProduct {
	if x != nil {
		return x.MultistageProduct
	}
	return nil
}

// 新增“新增多层级模式（用户俱乐部级别的多级配置）” 响应
type AddMultistageModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMultistageModelResp) Reset() {
	*x = AddMultistageModelResp{}
	mi := &file_chess_user_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMultistageModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultistageModelResp) ProtoMessage() {}

func (x *AddMultistageModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultistageModelResp.ProtoReflect.Descriptor instead.
func (*AddMultistageModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{93}
}

func (x *AddMultistageModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddMultistageModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 新增“新增产品模版模式（用户俱乐部级别的多级配置）” 请求
type AddTemplateModelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentUid      uint64                 `protobuf:"varint,1,opt,name=agent_uid,json=agentUid,proto3" json:"agent_uid,omitempty"`           // 代理商uid
	ClubId        uint64                 `protobuf:"varint,2,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`                 // 俱乐部id
	ProductId     []uint64               `protobuf:"varint,3,rep,packed,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 多级产品
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTemplateModelReq) Reset() {
	*x = AddTemplateModelReq{}
	mi := &file_chess_user_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTemplateModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTemplateModelReq) ProtoMessage() {}

func (x *AddTemplateModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTemplateModelReq.ProtoReflect.Descriptor instead.
func (*AddTemplateModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{94}
}

func (x *AddTemplateModelReq) GetAgentUid() uint64 {
	if x != nil {
		return x.AgentUid
	}
	return 0
}

func (x *AddTemplateModelReq) GetClubId() uint64 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *AddTemplateModelReq) GetProductId() []uint64 {
	if x != nil {
		return x.ProductId
	}
	return nil
}

// 新增“新增产品模版模式（用户俱乐部级别的多级配置）” 响应
type AddTemplateModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTemplateModelResp) Reset() {
	*x = AddTemplateModelResp{}
	mi := &file_chess_user_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTemplateModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTemplateModelResp) ProtoMessage() {}

func (x *AddTemplateModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTemplateModelResp.ProtoReflect.Descriptor instead.
func (*AddTemplateModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{95}
}

func (x *AddTemplateModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddTemplateModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 获取“新增多层级模式（用户俱乐部级别的多级配置）” 请求
type GetMultistageModelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AgentUid      uint64                 `protobuf:"varint,1,opt,name=agent_uid,json=agentUid,proto3" json:"agent_uid,omitempty"`    // 代理商uid
	ClubId        uint64                 `protobuf:"varint,2,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`          // 俱乐部id
	ProductId     uint64                 `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMultistageModelReq) Reset() {
	*x = GetMultistageModelReq{}
	mi := &file_chess_user_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMultistageModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultistageModelReq) ProtoMessage() {}

func (x *GetMultistageModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultistageModelReq.ProtoReflect.Descriptor instead.
func (*GetMultistageModelReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{96}
}

func (x *GetMultistageModelReq) GetAgentUid() uint64 {
	if x != nil {
		return x.AgentUid
	}
	return 0
}

func (x *GetMultistageModelReq) GetClubId() uint64 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *GetMultistageModelReq) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

// 多级模式产品数据
type MultistageModelData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MultistageProduct []*MultistageProduct   `protobuf:"bytes,3,rep,name=multistage_product,json=multistageProduct,proto3" json:"multistage_product,omitempty"` // 多级产品
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MultistageModelData) Reset() {
	*x = MultistageModelData{}
	mi := &file_chess_user_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultistageModelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultistageModelData) ProtoMessage() {}

func (x *MultistageModelData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultistageModelData.ProtoReflect.Descriptor instead.
func (*MultistageModelData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{97}
}

func (x *MultistageModelData) GetMultistageProduct() []*MultistageProduct {
	if x != nil {
		return x.MultistageProduct
	}
	return nil
}

// 获取“新增多层级模式（用户俱乐部级别的多级配置）” 响应
type GetMultistageModelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *MultistageModelData   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 多级模式产品数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMultistageModelResp) Reset() {
	*x = GetMultistageModelResp{}
	mi := &file_chess_user_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMultistageModelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMultistageModelResp) ProtoMessage() {}

func (x *GetMultistageModelResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMultistageModelResp.ProtoReflect.Descriptor instead.
func (*GetMultistageModelResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{98}
}

func (x *GetMultistageModelResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMultistageModelResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetMultistageModelResp) GetData() *MultistageModelData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserRoleListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRoleListReq) Reset() {
	*x = UserRoleListReq{}
	mi := &file_chess_user_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRoleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleListReq) ProtoMessage() {}

func (x *UserRoleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleListReq.ProtoReflect.Descriptor instead.
func (*UserRoleListReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{99}
}

type UserRole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        uint64                 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`      // 角色id
	RoleName      string                 `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"` // 角色名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRole) Reset() {
	*x = UserRole{}
	mi := &file_chess_user_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRole) ProtoMessage() {}

func (x *UserRole) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRole.ProtoReflect.Descriptor instead.
func (*UserRole) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{100}
}

func (x *UserRole) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *UserRole) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

type UserRoleListRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleList      []*UserRole            `protobuf:"bytes,1,rep,name=role_list,json=roleList,proto3" json:"role_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRoleListRespData) Reset() {
	*x = UserRoleListRespData{}
	mi := &file_chess_user_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRoleListRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleListRespData) ProtoMessage() {}

func (x *UserRoleListRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleListRespData.ProtoReflect.Descriptor instead.
func (*UserRoleListRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{101}
}

func (x *UserRoleListRespData) GetRoleList() []*UserRole {
	if x != nil {
		return x.RoleList
	}
	return nil
}

type UserRoleListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserRoleListRespData  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRoleListResp) Reset() {
	*x = UserRoleListResp{}
	mi := &file_chess_user_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRoleListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleListResp) ProtoMessage() {}

func (x *UserRoleListResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleListResp.ProtoReflect.Descriptor instead.
func (*UserRoleListResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{102}
}

func (x *UserRoleListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserRoleListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserRoleListResp) GetData() *UserRoleListRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 业务模式模版
type ModelTemplate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           // 模版id
	TemplateName  string                 `protobuf:"bytes,2,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"`    // 模版名称
	TemplateValue string                 `protobuf:"bytes,3,opt,name=template_value,json=templateValue,proto3" json:"template_value,omitempty"` // 模版值
	ModelStatus   uint32                 `protobuf:"varint,4,opt,name=model_status,json=modelStatus,proto3" json:"model_status,omitempty"`      // 状态：1正常，2停用，3删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelTemplate) Reset() {
	*x = ModelTemplate{}
	mi := &file_chess_user_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTemplate) ProtoMessage() {}

func (x *ModelTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTemplate.ProtoReflect.Descriptor instead.
func (*ModelTemplate) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{103}
}

func (x *ModelTemplate) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModelTemplate) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

func (x *ModelTemplate) GetTemplateValue() string {
	if x != nil {
		return x.TemplateValue
	}
	return ""
}

func (x *ModelTemplate) GetModelStatus() uint32 {
	if x != nil {
		return x.ModelStatus
	}
	return 0
}

// 新增“业务模式模版” 请求
type AddModelTemplateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelTemplate *ModelTemplate         `protobuf:"bytes,1,opt,name=model_template,json=modelTemplate,proto3" json:"model_template,omitempty"` // 业务模版
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddModelTemplateReq) Reset() {
	*x = AddModelTemplateReq{}
	mi := &file_chess_user_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddModelTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddModelTemplateReq) ProtoMessage() {}

func (x *AddModelTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddModelTemplateReq.ProtoReflect.Descriptor instead.
func (*AddModelTemplateReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{104}
}

func (x *AddModelTemplateReq) GetModelTemplate() *ModelTemplate {
	if x != nil {
		return x.ModelTemplate
	}
	return nil
}

// 新增“业务模式模版” 响应
type AddModelTemplateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddModelTemplateResp) Reset() {
	*x = AddModelTemplateResp{}
	mi := &file_chess_user_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddModelTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddModelTemplateResp) ProtoMessage() {}

func (x *AddModelTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddModelTemplateResp.ProtoReflect.Descriptor instead.
func (*AddModelTemplateResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{105}
}

func (x *AddModelTemplateResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddModelTemplateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 获取“业务模式模版” 请求
type GetModelTemplateReq struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ModelTemplateId uint32                 `protobuf:"varint,1,opt,name=model_template_id,json=modelTemplateId,proto3" json:"model_template_id,omitempty"` // 业务模版id
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetModelTemplateReq) Reset() {
	*x = GetModelTemplateReq{}
	mi := &file_chess_user_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTemplateReq) ProtoMessage() {}

func (x *GetModelTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTemplateReq.ProtoReflect.Descriptor instead.
func (*GetModelTemplateReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{106}
}

func (x *GetModelTemplateReq) GetModelTemplateId() uint32 {
	if x != nil {
		return x.ModelTemplateId
	}
	return 0
}

// 获取“业务模式模版” 响应
type GetModelTemplateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *ModelTemplate         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 返回数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModelTemplateResp) Reset() {
	*x = GetModelTemplateResp{}
	mi := &file_chess_user_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelTemplateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTemplateResp) ProtoMessage() {}

func (x *GetModelTemplateResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTemplateResp.ProtoReflect.Descriptor instead.
func (*GetModelTemplateResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{107}
}

func (x *GetModelTemplateResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetModelTemplateResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetModelTemplateResp) GetData() *ModelTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取“玩法绑定业务模式模版” 请求
type GetModelTemplateGameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProductId     []uint64               `protobuf:"varint,1,rep,packed,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModelTemplateGameReq) Reset() {
	*x = GetModelTemplateGameReq{}
	mi := &file_chess_user_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelTemplateGameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTemplateGameReq) ProtoMessage() {}

func (x *GetModelTemplateGameReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTemplateGameReq.ProtoReflect.Descriptor instead.
func (*GetModelTemplateGameReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{108}
}

func (x *GetModelTemplateGameReq) GetProductId() []uint64 {
	if x != nil {
		return x.ProductId
	}
	return nil
}

// 获取“玩法绑定业务模式模版” 响应
type GetModelTemplateGameResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *MultistageModelData   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 多级模式产品数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModelTemplateGameResp) Reset() {
	*x = GetModelTemplateGameResp{}
	mi := &file_chess_user_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelTemplateGameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTemplateGameResp) ProtoMessage() {}

func (x *GetModelTemplateGameResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTemplateGameResp.ProtoReflect.Descriptor instead.
func (*GetModelTemplateGameResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{109}
}

func (x *GetModelTemplateGameResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetModelTemplateGameResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetModelTemplateGameResp) GetData() *MultistageModelData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 获取“业务模式模版”列表 请求
type GetModelTemplateListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModelTemplateListReq) Reset() {
	*x = GetModelTemplateListReq{}
	mi := &file_chess_user_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelTemplateListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTemplateListReq) ProtoMessage() {}

func (x *GetModelTemplateListReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTemplateListReq.ProtoReflect.Descriptor instead.
func (*GetModelTemplateListReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{110}
}

// 业务模式模版列表数据
type ModelTemplateList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*ModelTemplate       `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 业务模版集合
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelTemplateList) Reset() {
	*x = ModelTemplateList{}
	mi := &file_chess_user_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelTemplateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTemplateList) ProtoMessage() {}

func (x *ModelTemplateList) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTemplateList.ProtoReflect.Descriptor instead.
func (*ModelTemplateList) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{111}
}

func (x *ModelTemplateList) GetList() []*ModelTemplate {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取“业务模式模版”列表 响应
type GetModelTemplateListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *ModelTemplateList     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 返回数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModelTemplateListResp) Reset() {
	*x = GetModelTemplateListResp{}
	mi := &file_chess_user_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelTemplateListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelTemplateListResp) ProtoMessage() {}

func (x *GetModelTemplateListResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelTemplateListResp.ProtoReflect.Descriptor instead.
func (*GetModelTemplateListResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{112}
}

func (x *GetModelTemplateListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetModelTemplateListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetModelTemplateListResp) GetData() *ModelTemplateList {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUserSwitchConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSwitchConfigReq) Reset() {
	*x = GetUserSwitchConfigReq{}
	mi := &file_chess_user_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSwitchConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSwitchConfigReq) ProtoMessage() {}

func (x *GetUserSwitchConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSwitchConfigReq.ProtoReflect.Descriptor instead.
func (*GetUserSwitchConfigReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{113}
}

type UserSwitchConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NeedPhoneBind uint32                 `protobuf:"varint,1,opt,name=need_phone_bind,json=needPhoneBind,proto3" json:"need_phone_bind,omitempty"` // 是否强制要求绑定手机号 1、是 2、否
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSwitchConfig) Reset() {
	*x = UserSwitchConfig{}
	mi := &file_chess_user_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSwitchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSwitchConfig) ProtoMessage() {}

func (x *UserSwitchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSwitchConfig.ProtoReflect.Descriptor instead.
func (*UserSwitchConfig) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{114}
}

func (x *UserSwitchConfig) GetNeedPhoneBind() uint32 {
	if x != nil {
		return x.NeedPhoneBind
	}
	return 0
}

type GetUserSwitchConfigResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserSwitchConfig      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 返回数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserSwitchConfigResp) Reset() {
	*x = GetUserSwitchConfigResp{}
	mi := &file_chess_user_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserSwitchConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSwitchConfigResp) ProtoMessage() {}

func (x *GetUserSwitchConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSwitchConfigResp.ProtoReflect.Descriptor instead.
func (*GetUserSwitchConfigResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{115}
}

func (x *GetUserSwitchConfigResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserSwitchConfigResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserSwitchConfigResp) GetData() *UserSwitchConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type PhoneBindReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PhoneNumber   string                 `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"` // 手机号
	SmsCode       string                 `protobuf:"bytes,3,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`             // 短信验证码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhoneBindReq) Reset() {
	*x = PhoneBindReq{}
	mi := &file_chess_user_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBindReq) ProtoMessage() {}

func (x *PhoneBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBindReq.ProtoReflect.Descriptor instead.
func (*PhoneBindReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{116}
}

func (x *PhoneBindReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PhoneBindReq) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

type PhoneBindRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"` // 用户uid(换绑回老号时的uid) code=30202时有效
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhoneBindRespData) Reset() {
	*x = PhoneBindRespData{}
	mi := &file_chess_user_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneBindRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBindRespData) ProtoMessage() {}

func (x *PhoneBindRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBindRespData.ProtoReflect.Descriptor instead.
func (*PhoneBindRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{117}
}

func (x *PhoneBindRespData) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type PhoneBindResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *PhoneBindRespData     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 返回数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhoneBindResp) Reset() {
	*x = PhoneBindResp{}
	mi := &file_chess_user_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhoneBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhoneBindResp) ProtoMessage() {}

func (x *PhoneBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhoneBindResp.ProtoReflect.Descriptor instead.
func (*PhoneBindResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{118}
}

func (x *PhoneBindResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PhoneBindResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PhoneBindResp) GetData() *PhoneBindRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AgentUpdateUserPasswordReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`          // 用户uid
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // 密码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentUpdateUserPasswordReq) Reset() {
	*x = AgentUpdateUserPasswordReq{}
	mi := &file_chess_user_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUpdateUserPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpdateUserPasswordReq) ProtoMessage() {}

func (x *AgentUpdateUserPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpdateUserPasswordReq.ProtoReflect.Descriptor instead.
func (*AgentUpdateUserPasswordReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{119}
}

func (x *AgentUpdateUserPasswordReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AgentUpdateUserPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AgentUpdateUserPasswordResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentUpdateUserPasswordResp) Reset() {
	*x = AgentUpdateUserPasswordResp{}
	mi := &file_chess_user_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentUpdateUserPasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpdateUserPasswordResp) ProtoMessage() {}

func (x *AgentUpdateUserPasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpdateUserPasswordResp.ProtoReflect.Descriptor instead.
func (*AgentUpdateUserPasswordResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{120}
}

func (x *AgentUpdateUserPasswordResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AgentUpdateUserPasswordResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 用户设备查询
type BatchGetUserDeviceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UidList       []uint64               `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"` // 用户uid列表
	PhoneList     []string               `protobuf:"bytes,2,rep,name=phone_list,json=phoneList,proto3" json:"phone_list,omitempty"`   // 手机号列表 手机号和uid二选一
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserDeviceReq) Reset() {
	*x = BatchGetUserDeviceReq{}
	mi := &file_chess_user_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserDeviceReq) ProtoMessage() {}

func (x *BatchGetUserDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserDeviceReq.ProtoReflect.Descriptor instead.
func (*BatchGetUserDeviceReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{121}
}

func (x *BatchGetUserDeviceReq) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *BatchGetUserDeviceReq) GetPhoneList() []string {
	if x != nil {
		return x.PhoneList
	}
	return nil
}

type UserDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`          // 用户uid
	Udid          string                 `protobuf:"bytes,2,opt,name=udid,proto3" json:"udid,omitempty"`         // 设备id
	Nickname      string                 `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"` // 昵称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDevice) Reset() {
	*x = UserDevice{}
	mi := &file_chess_user_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDevice) ProtoMessage() {}

func (x *UserDevice) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDevice.ProtoReflect.Descriptor instead.
func (*UserDevice) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{122}
}

func (x *UserDevice) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserDevice) GetUdid() string {
	if x != nil {
		return x.Udid
	}
	return ""
}

func (x *UserDevice) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type BatchGetUserDeviceRespData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserDeviceList []*UserDevice          `protobuf:"bytes,1,rep,name=user_device_list,json=userDeviceList,proto3" json:"user_device_list,omitempty"` // 用户设备信息列表
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchGetUserDeviceRespData) Reset() {
	*x = BatchGetUserDeviceRespData{}
	mi := &file_chess_user_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserDeviceRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserDeviceRespData) ProtoMessage() {}

func (x *BatchGetUserDeviceRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserDeviceRespData.ProtoReflect.Descriptor instead.
func (*BatchGetUserDeviceRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{123}
}

func (x *BatchGetUserDeviceRespData) GetUserDeviceList() []*UserDevice {
	if x != nil {
		return x.UserDeviceList
	}
	return nil
}

type BatchGetUserDeviceResp struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Code          int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *BatchGetUserDeviceRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 返回数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserDeviceResp) Reset() {
	*x = BatchGetUserDeviceResp{}
	mi := &file_chess_user_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserDeviceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserDeviceResp) ProtoMessage() {}

func (x *BatchGetUserDeviceResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserDeviceResp.ProtoReflect.Descriptor instead.
func (*BatchGetUserDeviceResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{124}
}

func (x *BatchGetUserDeviceResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchGetUserDeviceResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BatchGetUserDeviceResp) GetData() *BatchGetUserDeviceRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 聊天风险检测
type UserChatRiskCheckReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentType   int32                  `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // 内容类型 1-文本 2-图片 3-语音 4-视频 5-文件
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                             // 内容
	MessageId     string                 `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`        // 消息id 用于跟踪消息，如果不传则使用trace_id跟踪
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChatRiskCheckReq) Reset() {
	*x = UserChatRiskCheckReq{}
	mi := &file_chess_user_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChatRiskCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatRiskCheckReq) ProtoMessage() {}

func (x *UserChatRiskCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatRiskCheckReq.ProtoReflect.Descriptor instead.
func (*UserChatRiskCheckReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{125}
}

func (x *UserChatRiskCheckReq) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *UserChatRiskCheckReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserChatRiskCheckReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type UserChatRiskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RiskTotal     int32                  `protobuf:"varint,1,opt,name=risk_total,json=riskTotal,proto3" json:"risk_total,omitempty"`    // 风控触发次数
	RiskHandle    int32                  `protobuf:"varint,2,opt,name=risk_handle,json=riskHandle,proto3" json:"risk_handle,omitempty"` // 风控处理方式 1-风险提醒 2 禁止聊天 3 封号
	RiskDesc      string                 `protobuf:"bytes,3,opt,name=risk_desc,json=riskDesc,proto3" json:"risk_desc,omitempty"`        // 风控描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChatRiskInfo) Reset() {
	*x = UserChatRiskInfo{}
	mi := &file_chess_user_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChatRiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatRiskInfo) ProtoMessage() {}

func (x *UserChatRiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatRiskInfo.ProtoReflect.Descriptor instead.
func (*UserChatRiskInfo) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{126}
}

func (x *UserChatRiskInfo) GetRiskTotal() int32 {
	if x != nil {
		return x.RiskTotal
	}
	return 0
}

func (x *UserChatRiskInfo) GetRiskHandle() int32 {
	if x != nil {
		return x.RiskHandle
	}
	return 0
}

func (x *UserChatRiskInfo) GetRiskDesc() string {
	if x != nil {
		return x.RiskDesc
	}
	return ""
}

type UserChatRiskCheckResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserChatRiskInfo      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 风控信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChatRiskCheckResp) Reset() {
	*x = UserChatRiskCheckResp{}
	mi := &file_chess_user_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChatRiskCheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatRiskCheckResp) ProtoMessage() {}

func (x *UserChatRiskCheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatRiskCheckResp.ProtoReflect.Descriptor instead.
func (*UserChatRiskCheckResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{127}
}

func (x *UserChatRiskCheckResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserChatRiskCheckResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserChatRiskCheckResp) GetData() *UserChatRiskInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询用户风险情况
type GetUserRiskInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"` // 用户uid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRiskInfoReq) Reset() {
	*x = GetUserRiskInfoReq{}
	mi := &file_chess_user_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRiskInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRiskInfoReq) ProtoMessage() {}

func (x *GetUserRiskInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRiskInfoReq.ProtoReflect.Descriptor instead.
func (*GetUserRiskInfoReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{128}
}

func (x *GetUserRiskInfoReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type UserRiskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                      // 用户uid
	RiskEngine    int32                  `protobuf:"varint,2,opt,name=risk_engine,json=riskEngine,proto3" json:"risk_engine,omitempty"`      // 风控引擎 1-第三方引擎风控
	BizType       int32                  `protobuf:"varint,3,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`               // 触发业务类型 1-设备风险 2-聊天风险
	RiskHandle    int32                  `protobuf:"varint,4,opt,name=risk_handle,json=riskHandle,proto3" json:"risk_handle,omitempty"`      // 风控处理方式 1-风险提醒 2 禁止聊天 3 封号
	RiskDesc      string                 `protobuf:"bytes,5,opt,name=risk_desc,json=riskDesc,proto3" json:"risk_desc,omitempty"`             // 风险描述
	DeviceId      uint64                 `protobuf:"varint,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`            // 风险设备id
	Score         int32                  `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`                                  // 风险系数：类型1时为易盾和极光引擎的风险值之和 记录最高值
	RiskTotal     int32                  `protobuf:"varint,8,opt,name=risk_total,json=riskTotal,proto3" json:"risk_total,omitempty"`         // 触发次数
	RiskStatus    int32                  `protobuf:"varint,9,opt,name=risk_status,json=riskStatus,proto3" json:"risk_status,omitempty"`      // 处理状态 1 待处理 2 已处理
	OptUserId     uint64                 `protobuf:"varint,10,opt,name=opt_user_id,json=optUserId,proto3" json:"opt_user_id,omitempty"`      // 处理人ID
	OptUserName   string                 `protobuf:"bytes,11,opt,name=opt_user_name,json=optUserName,proto3" json:"opt_user_name,omitempty"` // 处理人名称
	OptDesc       string                 `protobuf:"bytes,12,opt,name=opt_desc,json=optDesc,proto3" json:"opt_desc,omitempty"`               // 后台解除/实名解除
	CreateTime    string                 `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`      // 创建时间
	UpdateTime    string                 `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`      // 更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRiskInfo) Reset() {
	*x = UserRiskInfo{}
	mi := &file_chess_user_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRiskInfo) ProtoMessage() {}

func (x *UserRiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRiskInfo.ProtoReflect.Descriptor instead.
func (*UserRiskInfo) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{129}
}

func (x *UserRiskInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserRiskInfo) GetRiskEngine() int32 {
	if x != nil {
		return x.RiskEngine
	}
	return 0
}

func (x *UserRiskInfo) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *UserRiskInfo) GetRiskHandle() int32 {
	if x != nil {
		return x.RiskHandle
	}
	return 0
}

func (x *UserRiskInfo) GetRiskDesc() string {
	if x != nil {
		return x.RiskDesc
	}
	return ""
}

func (x *UserRiskInfo) GetDeviceId() uint64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *UserRiskInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserRiskInfo) GetRiskTotal() int32 {
	if x != nil {
		return x.RiskTotal
	}
	return 0
}

func (x *UserRiskInfo) GetRiskStatus() int32 {
	if x != nil {
		return x.RiskStatus
	}
	return 0
}

func (x *UserRiskInfo) GetOptUserId() uint64 {
	if x != nil {
		return x.OptUserId
	}
	return 0
}

func (x *UserRiskInfo) GetOptUserName() string {
	if x != nil {
		return x.OptUserName
	}
	return ""
}

func (x *UserRiskInfo) GetOptDesc() string {
	if x != nil {
		return x.OptDesc
	}
	return ""
}

func (x *UserRiskInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *UserRiskInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type GetUserRiskInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserRiskInfo          `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 用户风险信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRiskInfoResp) Reset() {
	*x = GetUserRiskInfoResp{}
	mi := &file_chess_user_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRiskInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRiskInfoResp) ProtoMessage() {}

func (x *GetUserRiskInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRiskInfoResp.ProtoReflect.Descriptor instead.
func (*GetUserRiskInfoResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{130}
}

func (x *GetUserRiskInfoResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUserRiskInfoResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetUserRiskInfoResp) GetData() *UserRiskInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// 用户风险解除
type UserUnBanReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                     // 被解除的用户uid
	BizType       int32                  `protobuf:"varint,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`              // 业务类型 1-设备风险 2-聊天风险
	OptUserId     uint64                 `protobuf:"varint,3,opt,name=opt_user_id,json=optUserId,proto3" json:"opt_user_id,omitempty"`      // 操作人ID
	OptUserName   string                 `protobuf:"bytes,4,opt,name=opt_user_name,json=optUserName,proto3" json:"opt_user_name,omitempty"` // 操作人名称
	OptDesc       string                 `protobuf:"bytes,5,opt,name=opt_desc,json=optDesc,proto3" json:"opt_desc,omitempty"`               // 后台解除/实名解除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUnBanReq) Reset() {
	*x = UserUnBanReq{}
	mi := &file_chess_user_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUnBanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUnBanReq) ProtoMessage() {}

func (x *UserUnBanReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUnBanReq.ProtoReflect.Descriptor instead.
func (*UserUnBanReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{131}
}

func (x *UserUnBanReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserUnBanReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *UserUnBanReq) GetOptUserId() uint64 {
	if x != nil {
		return x.OptUserId
	}
	return 0
}

func (x *UserUnBanReq) GetOptUserName() string {
	if x != nil {
		return x.OptUserName
	}
	return ""
}

func (x *UserUnBanReq) GetOptDesc() string {
	if x != nil {
		return x.OptDesc
	}
	return ""
}

type UserUnBanResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUnBanResp) Reset() {
	*x = UserUnBanResp{}
	mi := &file_chess_user_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUnBanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUnBanResp) ProtoMessage() {}

func (x *UserUnBanResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUnBanResp.ProtoReflect.Descriptor instead.
func (*UserUnBanResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{132}
}

func (x *UserUnBanResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserUnBanResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 封禁用户
type UserBanReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           uint64                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                     // 被封禁的用户uid
	BizType       int32                  `protobuf:"varint,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`              // 业务类型 1-设备风险 2-聊天风险
	RiskHandle    int32                  `protobuf:"varint,3,opt,name=risk_handle,json=riskHandle,proto3" json:"risk_handle,omitempty"`     // 风控处理方式 1-风险提醒 2 禁止聊天 3 封号
	RiskDesc      string                 `protobuf:"bytes,4,opt,name=risk_desc,json=riskDesc,proto3" json:"risk_desc,omitempty"`            // 封禁描述
	OptUserId     uint64                 `protobuf:"varint,5,opt,name=opt_user_id,json=optUserId,proto3" json:"opt_user_id,omitempty"`      // 操作人ID
	OptUserName   string                 `protobuf:"bytes,6,opt,name=opt_user_name,json=optUserName,proto3" json:"opt_user_name,omitempty"` // 操作人名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserBanReq) Reset() {
	*x = UserBanReq{}
	mi := &file_chess_user_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserBanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBanReq) ProtoMessage() {}

func (x *UserBanReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBanReq.ProtoReflect.Descriptor instead.
func (*UserBanReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{133}
}

func (x *UserBanReq) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserBanReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *UserBanReq) GetRiskHandle() int32 {
	if x != nil {
		return x.RiskHandle
	}
	return 0
}

func (x *UserBanReq) GetRiskDesc() string {
	if x != nil {
		return x.RiskDesc
	}
	return ""
}

func (x *UserBanReq) GetOptUserId() uint64 {
	if x != nil {
		return x.OptUserId
	}
	return 0
}

func (x *UserBanReq) GetOptUserName() string {
	if x != nil {
		return x.OptUserName
	}
	return ""
}

type UserBanResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserBanResp) Reset() {
	*x = UserBanResp{}
	mi := &file_chess_user_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserBanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBanResp) ProtoMessage() {}

func (x *UserBanResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBanResp.ProtoReflect.Descriptor instead.
func (*UserBanResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{134}
}

func (x *UserBanResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserBanResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 批量获取用户封禁信息
type BatchGetUserRiskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UidList       []uint64               `protobuf:"varint,1,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`   // 用户uid列表
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                               // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`       // 每页大小
	BizType       int32                  `protobuf:"varint,4,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`          // 业务类型 1-设备风险 2-聊天风险
	RiskStatus    int32                  `protobuf:"varint,5,opt,name=risk_status,json=riskStatus,proto3" json:"risk_status,omitempty"` // 风控处理状态 1 待处理 2 已处理
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserRiskReq) Reset() {
	*x = BatchGetUserRiskReq{}
	mi := &file_chess_user_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserRiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserRiskReq) ProtoMessage() {}

func (x *BatchGetUserRiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserRiskReq.ProtoReflect.Descriptor instead.
func (*BatchGetUserRiskReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{135}
}

func (x *BatchGetUserRiskReq) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *BatchGetUserRiskReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BatchGetUserRiskReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *BatchGetUserRiskReq) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *BatchGetUserRiskReq) GetRiskStatus() int32 {
	if x != nil {
		return x.RiskStatus
	}
	return 0
}

type BatchGetUserRiskData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RiskList      []*UserRiskInfo        `protobuf:"bytes,1,rep,name=risk_list,json=riskList,proto3" json:"risk_list,omitempty"` // 用户风险信息列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                      // 总数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserRiskData) Reset() {
	*x = BatchGetUserRiskData{}
	mi := &file_chess_user_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserRiskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserRiskData) ProtoMessage() {}

func (x *BatchGetUserRiskData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserRiskData.ProtoReflect.Descriptor instead.
func (*BatchGetUserRiskData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{136}
}

func (x *BatchGetUserRiskData) GetRiskList() []*UserRiskInfo {
	if x != nil {
		return x.RiskList
	}
	return nil
}

func (x *BatchGetUserRiskData) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type BatchGetUserRiskResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *BatchGetUserRiskData  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`  // 返回数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetUserRiskResp) Reset() {
	*x = BatchGetUserRiskResp{}
	mi := &file_chess_user_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetUserRiskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserRiskResp) ProtoMessage() {}

func (x *BatchGetUserRiskResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserRiskResp.ProtoReflect.Descriptor instead.
func (*BatchGetUserRiskResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{137}
}

func (x *BatchGetUserRiskResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchGetUserRiskResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BatchGetUserRiskResp) GetData() *BatchGetUserRiskData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 做任务
type DoTaskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`       // 任务IDrpc BatchGetUserRisk(BatchGetUserRiskReq) returns (BatchGetUserRiskResp);                   // 批量获取用户风险信息
	TaskType      uint32                 `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"` // 任务类型 1: 签到 2: 分享 3: 邀请 4: 游戏
	Params        string                 `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`                      // 参数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoTaskReq) Reset() {
	*x = DoTaskReq{}
	mi := &file_chess_user_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoTaskReq) ProtoMessage() {}

func (x *DoTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoTaskReq.ProtoReflect.Descriptor instead.
func (*DoTaskReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{138}
}

func (x *DoTaskReq) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *DoTaskReq) GetTaskType() uint32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *DoTaskReq) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type DoTaskResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoTaskResp) Reset() {
	*x = DoTaskResp{}
	mi := &file_chess_user_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoTaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoTaskResp) ProtoMessage() {}

func (x *DoTaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoTaskResp.ProtoReflect.Descriptor instead.
func (*DoTaskResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{139}
}

func (x *DoTaskResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DoTaskResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 获取用户任务处理列表
type UserTaskProcessListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTaskProcessListReq) Reset() {
	*x = UserTaskProcessListReq{}
	mi := &file_chess_user_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTaskProcessListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskProcessListReq) ProtoMessage() {}

func (x *UserTaskProcessListReq) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskProcessListReq.ProtoReflect.Descriptor instead.
func (*UserTaskProcessListReq) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{140}
}

type UserTaskProcessListResp struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Code          int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 0: OK, 否则失败
	Msg           string                       `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 信息描述
	Data          *UserTaskProcessListRespData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTaskProcessListResp) Reset() {
	*x = UserTaskProcessListResp{}
	mi := &file_chess_user_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTaskProcessListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskProcessListResp) ProtoMessage() {}

func (x *UserTaskProcessListResp) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskProcessListResp.ProtoReflect.Descriptor instead.
func (*UserTaskProcessListResp) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{141}
}

func (x *UserTaskProcessListResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserTaskProcessListResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UserTaskProcessListResp) GetData() *UserTaskProcessListRespData {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserTaskProcessListRespData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*BaseTaskInfo        `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` // 用户任务处理列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserTaskProcessListRespData) Reset() {
	*x = UserTaskProcessListRespData{}
	mi := &file_chess_user_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTaskProcessListRespData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskProcessListRespData) ProtoMessage() {}

func (x *UserTaskProcessListRespData) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskProcessListRespData.ProtoReflect.Descriptor instead.
func (*UserTaskProcessListRespData) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{142}
}

func (x *UserTaskProcessListRespData) GetList() []*BaseTaskInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type BaseTaskInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TaskId          uint64                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName        string                 `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskSubTitle    string                 `protobuf:"bytes,3,opt,name=task_sub_title,json=taskSubTitle,proto3" json:"task_sub_title,omitempty"`
	TaskType        uint32                 `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3" json:"task_type,omitempty"`
	TaskReward      string                 `protobuf:"bytes,5,opt,name=task_reward,json=taskReward,proto3" json:"task_reward,omitempty"`
	UserTaskProcess *UserTaskProcess       `protobuf:"bytes,6,opt,name=user_task_process,json=userTaskProcess,proto3" json:"user_task_process,omitempty"`
	TaskExtra       string                 `protobuf:"bytes,7,opt,name=task_extra,json=taskExtra,proto3" json:"task_extra,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BaseTaskInfo) Reset() {
	*x = BaseTaskInfo{}
	mi := &file_chess_user_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTaskInfo) ProtoMessage() {}

func (x *BaseTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTaskInfo.ProtoReflect.Descriptor instead.
func (*BaseTaskInfo) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{143}
}

func (x *BaseTaskInfo) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *BaseTaskInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *BaseTaskInfo) GetTaskSubTitle() string {
	if x != nil {
		return x.TaskSubTitle
	}
	return ""
}

func (x *BaseTaskInfo) GetTaskType() uint32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *BaseTaskInfo) GetTaskReward() string {
	if x != nil {
		return x.TaskReward
	}
	return ""
}

func (x *BaseTaskInfo) GetUserTaskProcess() *UserTaskProcess {
	if x != nil {
		return x.UserTaskProcess
	}
	return nil
}

func (x *BaseTaskInfo) GetTaskExtra() string {
	if x != nil {
		return x.TaskExtra
	}
	return ""
}

type UserTaskProcess struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ProcessId               uint64                 `protobuf:"varint,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	TaskId                  uint64                 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CompletedCount          uint32                 `protobuf:"varint,3,opt,name=completed_count,json=completedCount,proto3" json:"completed_count,omitempty"`
	TotalCount              uint64                 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TaskStatus              uint32                 `protobuf:"varint,5,opt,name=task_status,json=taskStatus,proto3" json:"task_status,omitempty"`
	TaskStartTime           string                 `protobuf:"bytes,6,opt,name=task_start_time,json=taskStartTime,proto3" json:"task_start_time,omitempty"`
	TaskEndTime             string                 `protobuf:"bytes,7,opt,name=task_end_time,json=taskEndTime,proto3" json:"task_end_time,omitempty"`
	NotReceivedRewardsCount uint32                 `protobuf:"varint,8,opt,name=not_received_rewards_count,json=notReceivedRewardsCount,proto3" json:"not_received_rewards_count,omitempty"` // 未领取奖励的数量
	ProcessExtra            string                 `protobuf:"bytes,9,opt,name=process_extra,json=processExtra,proto3" json:"process_extra,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UserTaskProcess) Reset() {
	*x = UserTaskProcess{}
	mi := &file_chess_user_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserTaskProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskProcess) ProtoMessage() {}

func (x *UserTaskProcess) ProtoReflect() protoreflect.Message {
	mi := &file_chess_user_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskProcess.ProtoReflect.Descriptor instead.
func (*UserTaskProcess) Descriptor() ([]byte, []int) {
	return file_chess_user_proto_rawDescGZIP(), []int{144}
}

func (x *UserTaskProcess) GetProcessId() uint64 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *UserTaskProcess) GetTaskId() uint64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *UserTaskProcess) GetCompletedCount() uint32 {
	if x != nil {
		return x.CompletedCount
	}
	return 0
}

func (x *UserTaskProcess) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *UserTaskProcess) GetTaskStatus() uint32 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *UserTaskProcess) GetTaskStartTime() string {
	if x != nil {
		return x.TaskStartTime
	}
	return ""
}

func (x *UserTaskProcess) GetTaskEndTime() string {
	if x != nil {
		return x.TaskEndTime
	}
	return ""
}

func (x *UserTaskProcess) GetNotReceivedRewardsCount() uint32 {
	if x != nil {
		return x.NotReceivedRewardsCount
	}
	return 0
}

func (x *UserTaskProcess) GetProcessExtra() string {
	if x != nil {
		return x.ProcessExtra
	}
	return ""
}

var File_chess_user_proto protoreflect.FileDescriptor

var file_chess_user_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x07, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x64, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x64, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73,
	0x69, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x79, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x79, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c,
	0x75, 0x62, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x55, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xac, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x69,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x53, 0x4d, 0x53, 0x53, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0b, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x53, 0x4d, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xca,
	0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0a, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x77, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x58, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x57, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x72, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x58, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22,
	0x66, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x58, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x22, 0x40, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x12, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x6f, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f,
	0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0x3a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x44, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x68, 0x22, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x08,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x39, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x75, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x37,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x65, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xcd, 0x05, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x73, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x66, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x61, 0x6c, 0x6c, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x22, 0x7b, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x22, 0x3d, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x50, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x3e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x61, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x30, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x4f, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d, 0x0a, 0x19, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5f, 0x0a, 0x1b, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x1c, 0x55, 0x6e,
	0x62, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x89, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x85, 0x01, 0x0a,
	0x0b, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x70,
	0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04,
	0x70, 0x65, 0x72, 0x6d, 0x22, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72,
	0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x41,
	0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x01, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x75, 0x69, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x6e, 0x6c, 0x79, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x69, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x6c, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x2d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x64,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x51, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x1e, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x8f, 0x01,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x1e, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3c, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xbc, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x9f, 0x01,
	0x0a, 0x18, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x3e, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x64, 0x22,
	0x41, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0xc3, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x88,
	0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x1e, 0x52, 0x11, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6d, 0x0a, 0x19, 0x41, 0x64, 0x64,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa3, 0x01, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x45, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32,
	0x02, 0x20, 0x00, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0xe1, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xcd,
	0x02, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5e,
	0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x5c,
	0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x68, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf,
	0x02, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xcf, 0x01, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5e, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x17, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22,
	0x90, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62,
	0x49, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x11, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22,
	0x3e, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x6a, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b,
	0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x72, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x11, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x40, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x09,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6d,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01,
	0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x41, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x41,
	0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x72, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22,
	0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65,
	0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x22, 0x70, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a,
	0x0c, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x11, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0x67, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x1a, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x1e, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x43, 0x0a, 0x1b, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x51,
	0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x4e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x64, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5d, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x79, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x6f, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73,
	0x63, 0x22, 0x6e, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0xae, 0x03, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x1a, 0x02, 0x20, 0x00, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x18, 0x1e, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x03, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x44, 0x65, 0x73, 0x63, 0x22, 0x35, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x6e, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xf1,
	0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32,
	0x02, 0x20, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a,
	0x02, 0x20, 0x00, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0b,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x10, 0x03, 0x52, 0x08, 0x72, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0b,
	0x6f, 0x70, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x1e, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x33, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x07, 0x75, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04,
	0x30, 0x01, 0x30, 0x02, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0a, 0x72,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72,
	0x69, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x71, 0x0a,
	0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x33, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x59, 0x0a, 0x09, 0x44, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x44,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x18, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x7b, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x46, 0x0a,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x22, 0xe2, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x6f, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2a, 0x2e, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e,
	0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x10, 0x01, 0x2a, 0xaa, 0x01, 0x0a, 0x0f, 0x45, 0x5f,
	0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4d, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x2a, 0x72, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x45, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x0e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x32, 0xf8,
	0x24, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x62, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6b, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x5c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x65, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x6e, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x44, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47,
	0x0a, 0x0c, 0x53, 0x6d, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x4d, 0x53, 0x53, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x4d, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x41, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x18,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x44, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x73, 0x42, 0x79, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a,
	0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x51, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x12, 0x20, 0x2e,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54,
	0x72, 0x65, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x0f, 0x42,
	0x69, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x64, 0x0a, 0x11, 0x55,
	0x6e, 0x42, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x54, 0x72, 0x65, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x6f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x41, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4a, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6e, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x68, 0x0a, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x25, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x59, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65,
	0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x12, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68,
	0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3e, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x42, 0x61, 0x6e, 0x12, 0x17, 0x2e, 0x6e,
	0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x42,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x53, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x69, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x44, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14,
	0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73,
	0x2e, 0x44, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x1b, 0x5a, 0x19, 0x2f, 0x6e, 0x65,
	0x77, 0x2d, 0x63, 0x68, 0x65, 0x73, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chess_user_proto_rawDescOnce sync.Once
	file_chess_user_proto_rawDescData = file_chess_user_proto_rawDesc
)

func file_chess_user_proto_rawDescGZIP() []byte {
	file_chess_user_proto_rawDescOnce.Do(func() {
		file_chess_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_chess_user_proto_rawDescData)
	})
	return file_chess_user_proto_rawDescData
}

var file_chess_user_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chess_user_proto_msgTypes = make([]protoimpl.MessageInfo, 145)
var file_chess_user_proto_goTypes = []any{
	(UserRegisterType)(0),                   // 0: new_chess.UserRegisterType
	(E_SMS_CODE_TYPE)(0),                    // 1: new_chess.E_SMS_CODE_TYPE
	(UserModifyType)(0),                     // 2: new_chess.UserModifyType
	(UserStatusType)(0),                     // 3: new_chess.UserStatusType
	(*UserLoginReq)(nil),                    // 4: new_chess.UserLoginReq
	(*BusinessModel)(nil),                   // 5: new_chess.BusinessModel
	(*UserLoginRespData)(nil),               // 6: new_chess.UserLoginRespData
	(*UserLoginResp)(nil),                   // 7: new_chess.UserLoginResp
	(*UserRegisterReq)(nil),                 // 8: new_chess.UserRegisterReq
	(*UserRegisterResp)(nil),                // 9: new_chess.UserRegisterResp
	(*UserRegisterData)(nil),                // 10: new_chess.UserRegisterData
	(*SMSSendLoginReq)(nil),                 // 11: new_chess.SMSSendLoginReq
	(*SMSSendLoginResp)(nil),                // 12: new_chess.SMSSendLoginResp
	(*OpenIDBindReq)(nil),                   // 13: new_chess.OpenIDBindReq
	(*UserWXCacheData)(nil),                 // 14: new_chess.UserWXCacheData
	(*OpenIDBindResp)(nil),                  // 15: new_chess.OpenIDBindResp
	(*UserUploadGeographicReq)(nil),         // 16: new_chess.UserUploadGeographicReq
	(*UserUploadGeographicResp)(nil),        // 17: new_chess.UserUploadGeographicResp
	(*FeedbackUploadReq)(nil),               // 18: new_chess.FeedbackUploadReq
	(*FeedbackUploadResp)(nil),              // 19: new_chess.FeedbackUploadResp
	(*GetUserPhonesReq)(nil),                // 20: new_chess.GetUserPhonesReq
	(*UserPhone)(nil),                       // 21: new_chess.UserPhone
	(*GetUserPhonesRespData)(nil),           // 22: new_chess.GetUserPhonesRespData
	(*GetUserPhonesResp)(nil),               // 23: new_chess.GetUserPhonesResp
	(*UpdateUserInfoReq)(nil),               // 24: new_chess.UpdateUserInfoReq
	(*UpdateUserInfoResp)(nil),              // 25: new_chess.UpdateUserInfoResp
	(*GetUserInfoReq)(nil),                  // 26: new_chess.GetUserInfoReq
	(*GetUserInfoResp)(nil),                 // 27: new_chess.GetUserInfoResp
	(*BatchGetUserInfoReq)(nil),             // 28: new_chess.BatchGetUserInfoReq
	(*BatchGetUserInfoRespData)(nil),        // 29: new_chess.BatchGetUserInfoRespData
	(*BatchGetUserInfoResp)(nil),            // 30: new_chess.BatchGetUserInfoResp
	(*GetUserIdByPhoneReq)(nil),             // 31: new_chess.GetUserIdByPhoneReq
	(*GetUserIdByPhoneResp)(nil),            // 32: new_chess.GetUserIdByPhoneResp
	(*UserInfo)(nil),                        // 33: new_chess.UserInfo
	(*UserCertificationReq)(nil),            // 34: new_chess.UserCertificationReq
	(*UserCertificationResp)(nil),           // 35: new_chess.UserCertificationResp
	(*CreateOrganizationReq)(nil),           // 36: new_chess.CreateOrganizationReq
	(*CreateOrganizationResp)(nil),          // 37: new_chess.CreateOrganizationResp
	(*UpdateOrganizationReq)(nil),           // 38: new_chess.UpdateOrganizationReq
	(*UpdateOrganizationResp)(nil),          // 39: new_chess.UpdateOrganizationResp
	(*DeleteOrganizationReq)(nil),           // 40: new_chess.DeleteOrganizationReq
	(*DeleteOrganizationResp)(nil),          // 41: new_chess.DeleteOrganizationResp
	(*Organization)(nil),                    // 42: new_chess.Organization
	(*GetOrganizationReq)(nil),              // 43: new_chess.GetOrganizationReq
	(*GetOrganizationResp)(nil),             // 44: new_chess.GetOrganizationResp
	(*GetOrganizationChildrenRespData)(nil), // 45: new_chess.GetOrganizationChildrenRespData
	(*GetOrganizationChildrenResp)(nil),     // 46: new_chess.GetOrganizationChildrenResp
	(*BindUserToOrganizationReq)(nil),       // 47: new_chess.BindUserToOrganizationReq
	(*BindUserToOrganizationResp)(nil),      // 48: new_chess.BindUserToOrganizationResp
	(*UnbindUserToOrganizationReq)(nil),     // 49: new_chess.UnbindUserToOrganizationReq
	(*UnbindUserToOrganizationResp)(nil),    // 50: new_chess.UnbindUserToOrganizationResp
	(*PermTree)(nil),                        // 51: new_chess.PermTree
	(*OrgTreeUser)(nil),                     // 52: new_chess.OrgTreeUser
	(*GetOrgTreeUserReq)(nil),               // 53: new_chess.GetOrgTreeUserReq
	(*GetOrgTreeUserResp)(nil),              // 54: new_chess.GetOrgTreeUserResp
	(*GetOrgTreePermReq)(nil),               // 55: new_chess.GetOrgTreePermReq
	(*PermsArr)(nil),                        // 56: new_chess.PermsArr
	(*UserSearchReq)(nil),                   // 57: new_chess.UserSearchReq
	(*UserSearchRespData)(nil),              // 58: new_chess.UserSearchRespData
	(*UserSearchResp)(nil),                  // 59: new_chess.UserSearchResp
	(*GetOrgTreeBusinessReq)(nil),           // 60: new_chess.GetOrgTreeBusinessReq
	(*GetOrgTreeBusinessResp)(nil),          // 61: new_chess.GetOrgTreeBusinessResp
	(*UserConfig)(nil),                      // 62: new_chess.UserConfig
	(*GetUserConfigReq)(nil),                // 63: new_chess.GetUserConfigReq
	(*GetUserConfigResp)(nil),               // 64: new_chess.GetUserConfigResp
	(*SetUserConfigReq)(nil),                // 65: new_chess.SetUserConfigReq
	(*SetUserConfigResp)(nil),               // 66: new_chess.SetUserConfigResp
	(*AddPromotionModelReq)(nil),            // 67: new_chess.AddPromotionModelReq
	(*AddPromotionModelResp)(nil),           // 68: new_chess.AddPromotionModelResp
	(*UpdatePromotionModelReq)(nil),         // 69: new_chess.UpdatePromotionModelReq
	(*UpdatePromotionModelResp)(nil),        // 70: new_chess.UpdatePromotionModelResp
	(*AddPromotionRoleReq)(nil),             // 71: new_chess.AddPromotionRoleReq
	(*AddPromotionRoleResp)(nil),            // 72: new_chess.AddPromotionRoleResp
	(*UpdatePromotionRoleReq)(nil),          // 73: new_chess.UpdatePromotionRoleReq
	(*UpdatePromotionRoleResp)(nil),         // 74: new_chess.UpdatePromotionRoleResp
	(*AddPromotionRoleRatioReq)(nil),        // 75: new_chess.AddPromotionRoleRatioReq
	(*AddPromotionRoleRatioResp)(nil),       // 76: new_chess.AddPromotionRoleRatioResp
	(*UpdatePromotionRoleRatioReq)(nil),     // 77: new_chess.UpdatePromotionRoleRatioReq
	(*UpdatePromotionRoleRatioResp)(nil),    // 78: new_chess.UpdatePromotionRoleRatioResp
	(*AddBusinessModelReq)(nil),             // 79: new_chess.AddBusinessModelReq
	(*AddBusinessModelResp)(nil),            // 80: new_chess.AddBusinessModelResp
	(*UpdateBusinessModelReq)(nil),          // 81: new_chess.UpdateBusinessModelReq
	(*UpdateBusinessModelResp)(nil),         // 82: new_chess.UpdateBusinessModelResp
	(*AddBusinessModelRightsReq)(nil),       // 83: new_chess.AddBusinessModelRightsReq
	(*AddBusinessModelRightsResp)(nil),      // 84: new_chess.AddBusinessModelRightsResp
	(*UpdateBusinessModelRightsReq)(nil),    // 85: new_chess.UpdateBusinessModelRightsReq
	(*UpdateBusinessModelRightsResp)(nil),   // 86: new_chess.UpdateBusinessModelRightsResp
	(*AddModelReq)(nil),                     // 87: new_chess.AddModelReq
	(*AddModelResp)(nil),                    // 88: new_chess.AddModelResp
	(*UpdateModelReq)(nil),                  // 89: new_chess.UpdateModelReq
	(*UpdateModelResp)(nil),                 // 90: new_chess.UpdateModelResp
	(*MultistageProduct)(nil),               // 91: new_chess.MultistageProduct
	(*MultistageBusinessModel)(nil),         // 92: new_chess.MultistageBusinessModel
	(*MultistagePromotion)(nil),             // 93: new_chess.MultistagePromotion
	(*MultistagePromotionRole)(nil),         // 94: new_chess.MultistagePromotionRole
	(*PromotionRoleRatio)(nil),              // 95: new_chess.PromotionRoleRatio
	(*AddMultistageModelReq)(nil),           // 96: new_chess.AddMultistageModelReq
	(*AddMultistageModelResp)(nil),          // 97: new_chess.AddMultistageModelResp
	(*AddTemplateModelReq)(nil),             // 98: new_chess.AddTemplateModelReq
	(*AddTemplateModelResp)(nil),            // 99: new_chess.AddTemplateModelResp
	(*GetMultistageModelReq)(nil),           // 100: new_chess.GetMultistageModelReq
	(*MultistageModelData)(nil),             // 101: new_chess.MultistageModelData
	(*GetMultistageModelResp)(nil),          // 102: new_chess.GetMultistageModelResp
	(*UserRoleListReq)(nil),                 // 103: new_chess.UserRoleListReq
	(*UserRole)(nil),                        // 104: new_chess.UserRole
	(*UserRoleListRespData)(nil),            // 105: new_chess.UserRoleListRespData
	(*UserRoleListResp)(nil),                // 106: new_chess.UserRoleListResp
	(*ModelTemplate)(nil),                   // 107: new_chess.ModelTemplate
	(*AddModelTemplateReq)(nil),             // 108: new_chess.AddModelTemplateReq
	(*AddModelTemplateResp)(nil),            // 109: new_chess.AddModelTemplateResp
	(*GetModelTemplateReq)(nil),             // 110: new_chess.GetModelTemplateReq
	(*GetModelTemplateResp)(nil),            // 111: new_chess.GetModelTemplateResp
	(*GetModelTemplateGameReq)(nil),         // 112: new_chess.GetModelTemplateGameReq
	(*GetModelTemplateGameResp)(nil),        // 113: new_chess.GetModelTemplateGameResp
	(*GetModelTemplateListReq)(nil),         // 114: new_chess.GetModelTemplateListReq
	(*ModelTemplateList)(nil),               // 115: new_chess.ModelTemplateList
	(*GetModelTemplateListResp)(nil),        // 116: new_chess.GetModelTemplateListResp
	(*GetUserSwitchConfigReq)(nil),          // 117: new_chess.GetUserSwitchConfigReq
	(*UserSwitchConfig)(nil),                // 118: new_chess.UserSwitchConfig
	(*GetUserSwitchConfigResp)(nil),         // 119: new_chess.GetUserSwitchConfigResp
	(*PhoneBindReq)(nil),                    // 120: new_chess.PhoneBindReq
	(*PhoneBindRespData)(nil),               // 121: new_chess.PhoneBindRespData
	(*PhoneBindResp)(nil),                   // 122: new_chess.PhoneBindResp
	(*AgentUpdateUserPasswordReq)(nil),      // 123: new_chess.AgentUpdateUserPasswordReq
	(*AgentUpdateUserPasswordResp)(nil),     // 124: new_chess.AgentUpdateUserPasswordResp
	(*BatchGetUserDeviceReq)(nil),           // 125: new_chess.BatchGetUserDeviceReq
	(*UserDevice)(nil),                      // 126: new_chess.UserDevice
	(*BatchGetUserDeviceRespData)(nil),      // 127: new_chess.BatchGetUserDeviceRespData
	(*BatchGetUserDeviceResp)(nil),          // 128: new_chess.BatchGetUserDeviceResp
	(*UserChatRiskCheckReq)(nil),            // 129: new_chess.UserChatRiskCheckReq
	(*UserChatRiskInfo)(nil),                // 130: new_chess.UserChatRiskInfo
	(*UserChatRiskCheckResp)(nil),           // 131: new_chess.UserChatRiskCheckResp
	(*GetUserRiskInfoReq)(nil),              // 132: new_chess.GetUserRiskInfoReq
	(*UserRiskInfo)(nil),                    // 133: new_chess.UserRiskInfo
	(*GetUserRiskInfoResp)(nil),             // 134: new_chess.GetUserRiskInfoResp
	(*UserUnBanReq)(nil),                    // 135: new_chess.UserUnBanReq
	(*UserUnBanResp)(nil),                   // 136: new_chess.UserUnBanResp
	(*UserBanReq)(nil),                      // 137: new_chess.UserBanReq
	(*UserBanResp)(nil),                     // 138: new_chess.UserBanResp
	(*BatchGetUserRiskReq)(nil),             // 139: new_chess.BatchGetUserRiskReq
	(*BatchGetUserRiskData)(nil),            // 140: new_chess.BatchGetUserRiskData
	(*BatchGetUserRiskResp)(nil),            // 141: new_chess.BatchGetUserRiskResp
	(*DoTaskReq)(nil),                       // 142: new_chess.DoTaskReq
	(*DoTaskResp)(nil),                      // 143: new_chess.DoTaskResp
	(*UserTaskProcessListReq)(nil),          // 144: new_chess.UserTaskProcessListReq
	(*UserTaskProcessListResp)(nil),         // 145: new_chess.UserTaskProcessListResp
	(*UserTaskProcessListRespData)(nil),     // 146: new_chess.UserTaskProcessListRespData
	(*BaseTaskInfo)(nil),                    // 147: new_chess.BaseTaskInfo
	(*UserTaskProcess)(nil),                 // 148: new_chess.UserTaskProcess
}
var file_chess_user_proto_depIdxs = []int32{
	33,  // 0: new_chess.UserLoginRespData.user_info:type_name -> new_chess.UserInfo
	5,   // 1: new_chess.UserLoginRespData.business_model:type_name -> new_chess.BusinessModel
	6,   // 2: new_chess.UserLoginResp.data:type_name -> new_chess.UserLoginRespData
	10,  // 3: new_chess.UserRegisterResp.data:type_name -> new_chess.UserRegisterData
	1,   // 4: new_chess.SMSSendLoginReq.sms_code_type:type_name -> new_chess.E_SMS_CODE_TYPE
	14,  // 5: new_chess.OpenIDBindReq.user_wx_cache_data:type_name -> new_chess.UserWXCacheData
	14,  // 6: new_chess.OpenIDBindResp.data:type_name -> new_chess.UserWXCacheData
	21,  // 7: new_chess.GetUserPhonesRespData.list:type_name -> new_chess.UserPhone
	22,  // 8: new_chess.GetUserPhonesResp.data:type_name -> new_chess.GetUserPhonesRespData
	2,   // 9: new_chess.UpdateUserInfoReq.modify_type:type_name -> new_chess.UserModifyType
	33,  // 10: new_chess.GetUserInfoResp.data:type_name -> new_chess.UserInfo
	33,  // 11: new_chess.BatchGetUserInfoRespData.user_info_list:type_name -> new_chess.UserInfo
	29,  // 12: new_chess.BatchGetUserInfoResp.data:type_name -> new_chess.BatchGetUserInfoRespData
	33,  // 13: new_chess.GetUserIdByPhoneResp.data:type_name -> new_chess.UserInfo
	3,   // 14: new_chess.UserInfo.user_status:type_name -> new_chess.UserStatusType
	42,  // 15: new_chess.GetOrganizationResp.data:type_name -> new_chess.Organization
	42,  // 16: new_chess.GetOrganizationChildrenRespData.list:type_name -> new_chess.Organization
	45,  // 17: new_chess.GetOrganizationChildrenResp.data:type_name -> new_chess.GetOrganizationChildrenRespData
	51,  // 18: new_chess.PermTree.children:type_name -> new_chess.PermTree
	51,  // 19: new_chess.OrgTreeUser.perm:type_name -> new_chess.PermTree
	52,  // 20: new_chess.GetOrgTreeUserResp.data:type_name -> new_chess.OrgTreeUser
	33,  // 21: new_chess.UserSearchRespData.user_list:type_name -> new_chess.UserInfo
	58,  // 22: new_chess.UserSearchResp.data:type_name -> new_chess.UserSearchRespData
	5,   // 23: new_chess.GetOrgTreeBusinessResp.data:type_name -> new_chess.BusinessModel
	62,  // 24: new_chess.GetUserConfigResp.data:type_name -> new_chess.UserConfig
	92,  // 25: new_chess.MultistageProduct.multistage_business_model:type_name -> new_chess.MultistageBusinessModel
	93,  // 26: new_chess.MultistageProduct.multistage_promotion_model:type_name -> new_chess.MultistagePromotion
	94,  // 27: new_chess.MultistagePromotion.multistage_promotion_role:type_name -> new_chess.MultistagePromotionRole
	95,  // 28: new_chess.MultistagePromotionRole.role_ratio:type_name -> new_chess.PromotionRoleRatio
	94,  // 29: new_chess.MultistagePromotionRole.child:type_name -> new_chess.MultistagePromotionRole
	91,  // 30: new_chess.AddMultistageModelReq.multistage_product:type_name -> new_chess.MultistageProduct
	91,  // 31: new_chess.MultistageModelData.multistage_product:type_name -> new_chess.MultistageProduct
	101, // 32: new_chess.GetMultistageModelResp.data:type_name -> new_chess.MultistageModelData
	104, // 33: new_chess.UserRoleListRespData.role_list:type_name -> new_chess.UserRole
	105, // 34: new_chess.UserRoleListResp.data:type_name -> new_chess.UserRoleListRespData
	107, // 35: new_chess.AddModelTemplateReq.model_template:type_name -> new_chess.ModelTemplate
	107, // 36: new_chess.GetModelTemplateResp.data:type_name -> new_chess.ModelTemplate
	101, // 37: new_chess.GetModelTemplateGameResp.data:type_name -> new_chess.MultistageModelData
	107, // 38: new_chess.ModelTemplateList.list:type_name -> new_chess.ModelTemplate
	115, // 39: new_chess.GetModelTemplateListResp.data:type_name -> new_chess.ModelTemplateList
	118, // 40: new_chess.GetUserSwitchConfigResp.data:type_name -> new_chess.UserSwitchConfig
	121, // 41: new_chess.PhoneBindResp.data:type_name -> new_chess.PhoneBindRespData
	126, // 42: new_chess.BatchGetUserDeviceRespData.user_device_list:type_name -> new_chess.UserDevice
	127, // 43: new_chess.BatchGetUserDeviceResp.data:type_name -> new_chess.BatchGetUserDeviceRespData
	130, // 44: new_chess.UserChatRiskCheckResp.data:type_name -> new_chess.UserChatRiskInfo
	133, // 45: new_chess.GetUserRiskInfoResp.data:type_name -> new_chess.UserRiskInfo
	133, // 46: new_chess.BatchGetUserRiskData.risk_list:type_name -> new_chess.UserRiskInfo
	140, // 47: new_chess.BatchGetUserRiskResp.data:type_name -> new_chess.BatchGetUserRiskData
	146, // 48: new_chess.UserTaskProcessListResp.data:type_name -> new_chess.UserTaskProcessListRespData
	147, // 49: new_chess.UserTaskProcessListRespData.list:type_name -> new_chess.BaseTaskInfo
	148, // 50: new_chess.BaseTaskInfo.user_task_process:type_name -> new_chess.UserTaskProcess
	67,  // 51: new_chess.UserServer.AddPromotionModel:input_type -> new_chess.AddPromotionModelReq
	69,  // 52: new_chess.UserServer.UpdatePromotionModel:input_type -> new_chess.UpdatePromotionModelReq
	71,  // 53: new_chess.UserServer.AddPromotionRole:input_type -> new_chess.AddPromotionRoleReq
	73,  // 54: new_chess.UserServer.UpdatePromotionRole:input_type -> new_chess.UpdatePromotionRoleReq
	75,  // 55: new_chess.UserServer.AddPromotionRoleRatio:input_type -> new_chess.AddPromotionRoleRatioReq
	77,  // 56: new_chess.UserServer.UpdatePromotionRoleRatio:input_type -> new_chess.UpdatePromotionRoleRatioReq
	79,  // 57: new_chess.UserServer.AddBusinessModel:input_type -> new_chess.AddBusinessModelReq
	81,  // 58: new_chess.UserServer.UpdateBusinessModel:input_type -> new_chess.UpdateBusinessModelReq
	83,  // 59: new_chess.UserServer.AddBusinessModelRights:input_type -> new_chess.AddBusinessModelRightsReq
	85,  // 60: new_chess.UserServer.UpdateBusinessModelRights:input_type -> new_chess.UpdateBusinessModelRightsReq
	87,  // 61: new_chess.UserServer.AddModel:input_type -> new_chess.AddModelReq
	89,  // 62: new_chess.UserServer.UpdateModel:input_type -> new_chess.UpdateModelReq
	96,  // 63: new_chess.UserServer.AddMultistageModel:input_type -> new_chess.AddMultistageModelReq
	98,  // 64: new_chess.UserServer.AddTemplateModel:input_type -> new_chess.AddTemplateModelReq
	100, // 65: new_chess.UserServer.GetMultistageModel:input_type -> new_chess.GetMultistageModelReq
	108, // 66: new_chess.UserServer.AddModelTemplate:input_type -> new_chess.AddModelTemplateReq
	110, // 67: new_chess.UserServer.GetModelTemplate:input_type -> new_chess.GetModelTemplateReq
	114, // 68: new_chess.UserServer.GetModelTemplateList:input_type -> new_chess.GetModelTemplateListReq
	112, // 69: new_chess.UserServer.GetModelTemplateGame:input_type -> new_chess.GetModelTemplateGameReq
	11,  // 70: new_chess.UserServer.SmsSendLogin:input_type -> new_chess.SMSSendLoginReq
	4,   // 71: new_chess.UserServer.UserLogin:input_type -> new_chess.UserLoginReq
	8,   // 72: new_chess.UserServer.UserRegister:input_type -> new_chess.UserRegisterReq
	13,  // 73: new_chess.UserServer.OpenIDBind:input_type -> new_chess.OpenIDBindReq
	16,  // 74: new_chess.UserServer.UserUploadGeographic:input_type -> new_chess.UserUploadGeographicReq
	18,  // 75: new_chess.UserServer.FeedbackUpload:input_type -> new_chess.FeedbackUploadReq
	20,  // 76: new_chess.UserServer.GetUserPhonesByUidList:input_type -> new_chess.GetUserPhonesReq
	24,  // 77: new_chess.UserServer.UpdateUserInfo:input_type -> new_chess.UpdateUserInfoReq
	26,  // 78: new_chess.UserServer.GetUserInfo:input_type -> new_chess.GetUserInfoReq
	28,  // 79: new_chess.UserServer.BatchGetUserInfo:input_type -> new_chess.BatchGetUserInfoReq
	31,  // 80: new_chess.UserServer.GetUserIdByPhone:input_type -> new_chess.GetUserIdByPhoneReq
	34,  // 81: new_chess.UserServer.UserCertification:input_type -> new_chess.UserCertificationReq
	36,  // 82: new_chess.UserServer.AddOrgTree:input_type -> new_chess.CreateOrganizationReq
	38,  // 83: new_chess.UserServer.SetOrgTree:input_type -> new_chess.UpdateOrganizationReq
	40,  // 84: new_chess.UserServer.DelOrgTree:input_type -> new_chess.DeleteOrganizationReq
	43,  // 85: new_chess.UserServer.GetOrgTree:input_type -> new_chess.GetOrganizationReq
	43,  // 86: new_chess.UserServer.GetOrgTreeChildren:input_type -> new_chess.GetOrganizationReq
	53,  // 87: new_chess.UserServer.GetOrgTreeUser:input_type -> new_chess.GetOrgTreeUserReq
	55,  // 88: new_chess.UserServer.GetOrgTreePerm:input_type -> new_chess.GetOrgTreePermReq
	60,  // 89: new_chess.UserServer.GetOrgTreeBusiness:input_type -> new_chess.GetOrgTreeBusinessReq
	47,  // 90: new_chess.UserServer.BindOrgTreeUser:input_type -> new_chess.BindUserToOrganizationReq
	49,  // 91: new_chess.UserServer.UnBindOrgTreeUser:input_type -> new_chess.UnbindUserToOrganizationReq
	57,  // 92: new_chess.UserServer.UserSearch:input_type -> new_chess.UserSearchReq
	63,  // 93: new_chess.UserServer.GetUserConfig:input_type -> new_chess.GetUserConfigReq
	65,  // 94: new_chess.UserServer.SetUserConfig:input_type -> new_chess.SetUserConfigReq
	103, // 95: new_chess.UserServer.GetUserRoleList:input_type -> new_chess.UserRoleListReq
	117, // 96: new_chess.UserServer.GetUserSwitchConfig:input_type -> new_chess.GetUserSwitchConfigReq
	120, // 97: new_chess.UserServer.PhoneBind:input_type -> new_chess.PhoneBindReq
	123, // 98: new_chess.UserServer.AgentUpdateUserPassword:input_type -> new_chess.AgentUpdateUserPasswordReq
	125, // 99: new_chess.UserServer.BatchGetUserDevice:input_type -> new_chess.BatchGetUserDeviceReq
	129, // 100: new_chess.UserServer.UserChatRiskCheck:input_type -> new_chess.UserChatRiskCheckReq
	132, // 101: new_chess.UserServer.GetUserRiskInfo:input_type -> new_chess.GetUserRiskInfoReq
	137, // 102: new_chess.UserServer.UserBan:input_type -> new_chess.UserBanReq
	135, // 103: new_chess.UserServer.UserUnBan:input_type -> new_chess.UserUnBanReq
	139, // 104: new_chess.UserServer.BatchGetUserRisk:input_type -> new_chess.BatchGetUserRiskReq
	142, // 105: new_chess.UserServer.DoTask:input_type -> new_chess.DoTaskReq
	144, // 106: new_chess.UserServer.UserTaskProcessList:input_type -> new_chess.UserTaskProcessListReq
	68,  // 107: new_chess.UserServer.AddPromotionModel:output_type -> new_chess.AddPromotionModelResp
	70,  // 108: new_chess.UserServer.UpdatePromotionModel:output_type -> new_chess.UpdatePromotionModelResp
	72,  // 109: new_chess.UserServer.AddPromotionRole:output_type -> new_chess.AddPromotionRoleResp
	74,  // 110: new_chess.UserServer.UpdatePromotionRole:output_type -> new_chess.UpdatePromotionRoleResp
	76,  // 111: new_chess.UserServer.AddPromotionRoleRatio:output_type -> new_chess.AddPromotionRoleRatioResp
	78,  // 112: new_chess.UserServer.UpdatePromotionRoleRatio:output_type -> new_chess.UpdatePromotionRoleRatioResp
	80,  // 113: new_chess.UserServer.AddBusinessModel:output_type -> new_chess.AddBusinessModelResp
	82,  // 114: new_chess.UserServer.UpdateBusinessModel:output_type -> new_chess.UpdateBusinessModelResp
	84,  // 115: new_chess.UserServer.AddBusinessModelRights:output_type -> new_chess.AddBusinessModelRightsResp
	86,  // 116: new_chess.UserServer.UpdateBusinessModelRights:output_type -> new_chess.UpdateBusinessModelRightsResp
	88,  // 117: new_chess.UserServer.AddModel:output_type -> new_chess.AddModelResp
	90,  // 118: new_chess.UserServer.UpdateModel:output_type -> new_chess.UpdateModelResp
	97,  // 119: new_chess.UserServer.AddMultistageModel:output_type -> new_chess.AddMultistageModelResp
	99,  // 120: new_chess.UserServer.AddTemplateModel:output_type -> new_chess.AddTemplateModelResp
	102, // 121: new_chess.UserServer.GetMultistageModel:output_type -> new_chess.GetMultistageModelResp
	109, // 122: new_chess.UserServer.AddModelTemplate:output_type -> new_chess.AddModelTemplateResp
	111, // 123: new_chess.UserServer.GetModelTemplate:output_type -> new_chess.GetModelTemplateResp
	116, // 124: new_chess.UserServer.GetModelTemplateList:output_type -> new_chess.GetModelTemplateListResp
	113, // 125: new_chess.UserServer.GetModelTemplateGame:output_type -> new_chess.GetModelTemplateGameResp
	12,  // 126: new_chess.UserServer.SmsSendLogin:output_type -> new_chess.SMSSendLoginResp
	7,   // 127: new_chess.UserServer.UserLogin:output_type -> new_chess.UserLoginResp
	9,   // 128: new_chess.UserServer.UserRegister:output_type -> new_chess.UserRegisterResp
	15,  // 129: new_chess.UserServer.OpenIDBind:output_type -> new_chess.OpenIDBindResp
	17,  // 130: new_chess.UserServer.UserUploadGeographic:output_type -> new_chess.UserUploadGeographicResp
	19,  // 131: new_chess.UserServer.FeedbackUpload:output_type -> new_chess.FeedbackUploadResp
	23,  // 132: new_chess.UserServer.GetUserPhonesByUidList:output_type -> new_chess.GetUserPhonesResp
	25,  // 133: new_chess.UserServer.UpdateUserInfo:output_type -> new_chess.UpdateUserInfoResp
	27,  // 134: new_chess.UserServer.GetUserInfo:output_type -> new_chess.GetUserInfoResp
	30,  // 135: new_chess.UserServer.BatchGetUserInfo:output_type -> new_chess.BatchGetUserInfoResp
	32,  // 136: new_chess.UserServer.GetUserIdByPhone:output_type -> new_chess.GetUserIdByPhoneResp
	35,  // 137: new_chess.UserServer.UserCertification:output_type -> new_chess.UserCertificationResp
	37,  // 138: new_chess.UserServer.AddOrgTree:output_type -> new_chess.CreateOrganizationResp
	39,  // 139: new_chess.UserServer.SetOrgTree:output_type -> new_chess.UpdateOrganizationResp
	41,  // 140: new_chess.UserServer.DelOrgTree:output_type -> new_chess.DeleteOrganizationResp
	44,  // 141: new_chess.UserServer.GetOrgTree:output_type -> new_chess.GetOrganizationResp
	46,  // 142: new_chess.UserServer.GetOrgTreeChildren:output_type -> new_chess.GetOrganizationChildrenResp
	54,  // 143: new_chess.UserServer.GetOrgTreeUser:output_type -> new_chess.GetOrgTreeUserResp
	54,  // 144: new_chess.UserServer.GetOrgTreePerm:output_type -> new_chess.GetOrgTreeUserResp
	61,  // 145: new_chess.UserServer.GetOrgTreeBusiness:output_type -> new_chess.GetOrgTreeBusinessResp
	48,  // 146: new_chess.UserServer.BindOrgTreeUser:output_type -> new_chess.BindUserToOrganizationResp
	50,  // 147: new_chess.UserServer.UnBindOrgTreeUser:output_type -> new_chess.UnbindUserToOrganizationResp
	59,  // 148: new_chess.UserServer.UserSearch:output_type -> new_chess.UserSearchResp
	64,  // 149: new_chess.UserServer.GetUserConfig:output_type -> new_chess.GetUserConfigResp
	66,  // 150: new_chess.UserServer.SetUserConfig:output_type -> new_chess.SetUserConfigResp
	106, // 151: new_chess.UserServer.GetUserRoleList:output_type -> new_chess.UserRoleListResp
	119, // 152: new_chess.UserServer.GetUserSwitchConfig:output_type -> new_chess.GetUserSwitchConfigResp
	122, // 153: new_chess.UserServer.PhoneBind:output_type -> new_chess.PhoneBindResp
	124, // 154: new_chess.UserServer.AgentUpdateUserPassword:output_type -> new_chess.AgentUpdateUserPasswordResp
	128, // 155: new_chess.UserServer.BatchGetUserDevice:output_type -> new_chess.BatchGetUserDeviceResp
	131, // 156: new_chess.UserServer.UserChatRiskCheck:output_type -> new_chess.UserChatRiskCheckResp
	134, // 157: new_chess.UserServer.GetUserRiskInfo:output_type -> new_chess.GetUserRiskInfoResp
	138, // 158: new_chess.UserServer.UserBan:output_type -> new_chess.UserBanResp
	136, // 159: new_chess.UserServer.UserUnBan:output_type -> new_chess.UserUnBanResp
	141, // 160: new_chess.UserServer.BatchGetUserRisk:output_type -> new_chess.BatchGetUserRiskResp
	143, // 161: new_chess.UserServer.DoTask:output_type -> new_chess.DoTaskResp
	145, // 162: new_chess.UserServer.UserTaskProcessList:output_type -> new_chess.UserTaskProcessListResp
	107, // [107:163] is the sub-list for method output_type
	51,  // [51:107] is the sub-list for method input_type
	51,  // [51:51] is the sub-list for extension type_name
	51,  // [51:51] is the sub-list for extension extendee
	0,   // [0:51] is the sub-list for field type_name
}

func init() { file_chess_user_proto_init() }
func file_chess_user_proto_init() {
	if File_chess_user_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chess_user_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   145,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chess_user_proto_goTypes,
		DependencyIndexes: file_chess_user_proto_depIdxs,
		EnumInfos:         file_chess_user_proto_enumTypes,
		MessageInfos:      file_chess_user_proto_msgTypes,
	}.Build()
	File_chess_user_proto = out.File
	file_chess_user_proto_rawDesc = nil
	file_chess_user_proto_goTypes = nil
	file_chess_user_proto_depIdxs = nil
}
